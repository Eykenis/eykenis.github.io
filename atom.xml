<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ekke の Space</title>
  <icon>https://www.gravatar.com/avatar/b74e4d6380810c10e04719b2f9079a61</icon>
  
  <link href="https://eykenis.github.io/atom.xml" rel="self"/>
  
  <link href="https://eykenis.github.io/"/>
  <updated>2023-06-07T09:24:58.393Z</updated>
  <id>https://eykenis.github.io/</id>
  
  <author>
    <name>Ekennis</name>
    <email>ekennis@outlook.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>FFT Ocean 推导与实现</title>
    <link href="https://eykenis.github.io/2023/05/29/FFTOcean/"/>
    <id>https://eykenis.github.io/2023/05/29/FFTOcean/</id>
    <published>2023-05-29T15:20:10.000Z</published>
    <updated>2023-06-07T09:24:58.393Z</updated>
    
    <content type="html"><![CDATA[<p>预计实现在自己自行编写的软渲染器 KERenderer 上。</p><p>因为 Hexo 对 $LaTeX$ 的支持不够好，因此公式没法完整发过来。</p><p>流程推导见：</p><p><a href="https://zhuanlan.zhihu.com/p/633200862">https://zhuanlan.zhihu.com/p/633200862</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;预计实现在自己自行编写的软渲染器 KERenderer 上。&lt;/p&gt;
&lt;p&gt;因为 Hexo 对 $LaTeX$ 的支持不够好，因此公式没法完整发过来。&lt;/p&gt;
&lt;p&gt;流程推导见：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/63</summary>
      
    
    
    
    <category term="问道" scheme="https://eykenis.github.io/categories/%E9%97%AE%E9%81%93/"/>
    
    
    <category term="FFT" scheme="https://eykenis.github.io/tags/FFT/"/>
    
    <category term="渲染" scheme="https://eykenis.github.io/tags/%E6%B8%B2%E6%9F%93/"/>
    
  </entry>
  
  <entry>
    <title>你做的前十个游戏都是垃圾，所以赶紧做掉吧。</title>
    <link href="https://eykenis.github.io/2023/05/24/First10/"/>
    <id>https://eykenis.github.io/2023/05/24/First10/</id>
    <published>2023-05-24T03:03:35.000Z</published>
    <updated>2023-05-28T09:07:59.138Z</updated>
    
    <content type="html"><![CDATA[<p><strong>《游戏设计艺术》里有这样一句话：“ 你做的前十个游戏都是垃圾，所以赶紧做掉吧。”</strong></p><p>我相信这句话，重点在于 “赶紧做掉”。我们刚开始写的游戏基本上都是烂货，没有仔细去打磨的必要，而更应该赶紧将新的知识应用到新的 demo 里，去创造一个越来越完善越来越优秀的系统。</p><p>既然如此，我来统计，回顾一下我曾尝试过的 demo，并进行相应的反思总结，督促自己继续学习，做新的内容。从大一入学开始算。</p><p><del>首先，学 c++ 基础时写的五子棋、走迷宫、扫雷等不算。</del></p><h2 id="2021年3月-5月-骑兵与猎人"><a href="#2021年3月-5月-骑兵与猎人" class="headerlink" title="2021年3月~5月 骑兵与猎人"></a>2021年3月~5月 骑兵与猎人</h2><p>这段时间学了一点 Unity 基本用法，后来因为要刷算法竞赛搁置了。很惭愧，直到现在（2023.5）我的 Unity 基础仍然是一团糟。</p><p>同人作品，故事的主题是方舟第一个 Sidestory 的复现。其中涉及到的 Unity 知识主要包括用 Tilemap 刷地图，帧动画和人物状态机等。没有用混合树，当时觉得太麻烦了。</p><p><img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/image-20230524112741260.png" alt="image-20230524112741260"></p><p><img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/image-20230524112813395.png" alt="image-20230524112813395"></p><p>第一次尝试有点想一口吃成胖子的味道。完全没有学过任何策划知识的情况下写了一些随意想出的策划案，最后基本没有实现，只是做了人物移动和攻击动画（笑</p><h2 id="2022-1-2022-2-2022-7-Arktower"><a href="#2022-1-2022-2-2022-7-Arktower" class="headerlink" title="2022.1~2022.2, 2022.7 Arktower"></a>2022.1~2022.2, 2022.7 Arktower</h2><p>22年寒假在家第一次尝试不依靠引擎自己写。于是看了《Windows 游戏编程从零开始》。然后用 mfc 写了一坨。直接使用 GDI 绘制非常消耗电脑资源，是及其不推荐的游戏编写方式。当时列下了一个较完整的设计表（可惜当时不会 UML）。很幸运一个行业独角兽从我当时发在 CSDN 的博客中看中了我，邀请我去他们那里实习。但可惜实习要求6个月，而我仍然要准备算法竞赛。我明白做游戏相关内容一直都是我的梦想，可既然选择了打 ACM，还是要把一件事做好。代价或许就是这样吧。</p><p>这个 demo 仍然是方舟的同人游戏，但是游戏模式上打算复刻经典的固定数值 2D RPG 游戏《魔塔》。</p><p><img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/image-20230524154345522.png" alt="image-20230524154345522"></p><p>看到这个界面还是挺有成就感的，写了一大堆奇形怪状的 Win32 API… 最后，做完地图，人物移动和边栏 UI 后也作罢了。</p><p>7 月发现有个很好用的 EasyX API。虽然很多人说现代工程不用这个，缺点很多，但我也知道自己几斤几两，没必要凡事都写的那么 “现代”，直接做就是了。于是用此代替 GDI 重置了一下。这次还写了外存存储地图，也加入了道具，地图层数，算是功能比较完善了。</p><p><img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/image-20230524144210338.png" alt="image-20230524144210338"></p><p><img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/image-20230524144302767.png" alt="image-20230524144302767"></p><p><img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/image-20230524144313956.png" alt="image-20230524144313956"></p><p>虽然功能比较完善，但代码比较shi，设定的文件读取规范太奇怪，后续不想继续做完内容。结束</p><h2 id="2023-1-Arktower-using-Unity"><a href="#2023-1-Arktower-using-Unity" class="headerlink" title="2023.1 Arktower using Unity"></a>2023.1 Arktower using Unity</h2><p>回到 Unity 来了。还是相同的内容，但这一次做得很完整。使用 json 进行数据存取，尽量少直接拖 prefab。</p><p><img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/image-20230524144546633.png" alt="image-20230524144546633"></p><p><img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/image-20230524144645378.png" alt="image-20230524144645378"></p><p>基本框架完善，只差填充内容。</p><p>我还是很乐意看到这一版能正式可玩的，等什么时候不懒了就把内容填一填吧。</p><p>或者就不填了，因为 json 写的有点问题，导致各层需要分别加载一次资源，地图读取也有一些难排查的 bug。下次想想更好的方法吧。</p><h2 id="2023-5-PJISK（误）"><a href="#2023-5-PJISK（误）" class="headerlink" title="2023.5 PJISK（误）"></a>2023.5 PJISK（误）</h2><p><del>Project Isekai</del></p><p>想尝试写一下音游系统，干脆就顺带做 OpenGL 课设了。</p><p>目前看效果还是比较满意的。考虑平台问题，在 Windows 上确实不太好操控。然后音游的话，没有团队，写谱是件很麻烦很麻烦的事。</p><p><img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/image-20230524153104733.png" alt="image-20230524153104733"></p><p><img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/image-20230524153116508.png" alt="image-20230524153116508"></p><p><img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/image-20230524153309319.png" alt="image-20230524153309319"></p><p><img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/image-20230524153331584.png" alt="image-20230524153331584"></p><p>以此为契机，未来或许可以尝试移动端开发。</p>]]></content>
    
    
    <summary type="html">学艺不精</summary>
    
    
    
    <category term="问道" scheme="https://eykenis.github.io/categories/%E9%97%AE%E9%81%93/"/>
    
    
    <category term="Games" scheme="https://eykenis.github.io/tags/Games/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络知识梳理</title>
    <link href="https://eykenis.github.io/2023/05/05/computernetwork/"/>
    <id>https://eykenis.github.io/2023/05/05/computernetwork/</id>
    <published>2023-05-05T08:00:06.000Z</published>
    <updated>2023-05-28T09:07:09.555Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概念和功能"><a href="#概念和功能" class="headerlink" title="概念和功能"></a>概念和功能</h1><p>参考：Computer Networking: A Top-Down Approach 配套网课, 考研计网</p><p>概念：计算机网络是互联的、自治的计算机集合。</p><p>功能：包括数据通信和资源共享等。</p><h1 id="组成及分类"><a href="#组成及分类" class="headerlink" title="组成及分类"></a>组成及分类</h1><h2 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h2><p>硬件、软件和协议</p><h2 id="不同工作方式"><a href="#不同工作方式" class="headerlink" title="不同工作方式"></a>不同工作方式</h2><p>以下各工作方式都属于边缘部分。除了边缘部分外，核心部分用于为边缘部分提供服务。简单来说就是提供接口实现。</p><h3 id="C-S-方式"><a href="#C-S-方式" class="headerlink" title="C/S 方式"></a>C/S 方式</h3><p>（Client and Server）. 客户端与服务端的端到端服务方式。服务端处理/响应客户端发送的请求。</p><h3 id="P2P-方式"><a href="#P2P-方式" class="headerlink" title="P2P 方式"></a>P2P 方式</h3><p>（Peer to Peer）. P2P 方式下不存在专门的服务机，所有端系统既是客户又是服务器。和 C/S 方式相反，请求的主机越多响应越快。</p><h3 id="B-S-方式"><a href="#B-S-方式" class="headerlink" title="B/S 方式"></a>B/S 方式</h3><p>（Browser and Server）. 浏览器到服务器的服务方式。</p><h2 id="功能组成"><a href="#功能组成" class="headerlink" title="功能组成"></a>功能组成</h2><h3 id="通信子网"><a href="#通信子网" class="headerlink" title="通信子网"></a>通信子网</h3><p>一般包括网络层、数据链路层和物理层（OSI）</p><h3 id="资源子网"><a href="#资源子网" class="headerlink" title="资源子网"></a>资源子网</h3><p>包括应用层、表示层、会话层和传输层（OSI）</p><h2 id="计算机网络的分类"><a href="#计算机网络的分类" class="headerlink" title="计算机网络的分类"></a>计算机网络的分类</h2><ol><li><p>按分布范围分类</p><p> 广域网WAN（交换技术）、城域网MAN、局域网LAN（广播技术）、个人区域网PAN。应该按最大通信距离和实现技术分类，而不是主机距离。</p></li><li><p>按使用者分类</p><p> 公用网和专用网</p></li><li><p>按交换技术分类</p><p> 电路交换、报文交换和分组交换</p><p> 其中报文交换和分组交换使用存储转发技术。</p></li><li><p>按拓扑结构分类</p><p> 星型、环型、网状型、总线型。。</p></li><li><p>按传输技术分类</p><p> 广播网络：共享公共通信信道</p><p> 点对点网络：使用存储转发和路由选择机制</p></li></ol><h2 id="计算机网络标准化"><a href="#计算机网络标准化" class="headerlink" title="计算机网络标准化"></a>计算机网络标准化</h2><p>为了实现不同厂商软硬件连通，计算机网络必须遵从统一的标准。</p><p>目前流行的标准为 TCP/IP. 也有权威机构制定的法定标准 OSI。</p><p>标准化审批流程：</p><p>因特网草案-&gt;建议标准（RFC 文档）-&gt;（草案标准-&gt;）因特网标准</p><p>相关组织：</p><p>ISO、ITU、IEEE、IETF</p><h2 id="性能指标"><a href="#性能指标" class="headerlink" title="性能指标"></a>性能指标</h2><h3 id="速度相关指标"><a href="#速度相关指标" class="headerlink" title="速度相关指标"></a>速度相关指标</h3><ol><li><p>速率</p><p> 每单位时间传输的数据量。</p></li><li><p>带宽</p><p> 单位时间内从某一点到另一点能通过的最高数据率。（发送速率）</p></li><li><p>吞吐量</p><p>单位时间内通过某个网络的数据量。</p></li></ol><h3 id="时间相关指标"><a href="#时间相关指标" class="headerlink" title="时间相关指标"></a>时间相关指标</h3><ol><li><p>时延</p><p> 分为<strong>发送时延</strong>（传输时延）、<strong>传播时延</strong>、<strong>排队时延</strong>和<strong>处理时延</strong>。</p><p> 发送时延：将数据从机器内部推送到信道上的时间。</p><script type="math/tex; mode=display"> 发送时延=\frac{数据长度}{信道带宽}</script><p> 传播时延：在信道上传播的时间。取决于电磁波传播速度和链路长度。</p><script type="math/tex; mode=display"> 传播时延=\frac{信道长度}{电磁波在信道上的传播速率}</script><p> 排队时延：等待输出/输入链路可用的时间。</p><p> 处理时延：寻找合适的出口信道以及检错的时间。</p></li><li><p>时延带宽积</p><p> <strong>传播时延</strong>和带宽的乘积。单位一般为 bit.</p><p> 感觉可以理解为信息通量（？），可以描述某段链路现在有多少正在传播的比特。</p></li><li><p>往返时延 RTT</p><p> 从发送数据开始，到发送方收到接收方的确认总共经过的时延。</p><p> RTT越大，在收到确认之前可以发送的数据越多。（废话）</p><script type="math/tex; mode=display"> {\rm RTT}=2×传播时延+末端处理时间</script><p> 有时候也会忽略末端处理时间。</p></li><li><p>利用率</p><p> 1） 信道利用率</p><script type="math/tex; mode=display"> 信道利用率=\frac{有数据通过时间}{(有+无)数据通过时间}</script><p> <img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/image-20230506230041895.png" alt="image-20230506230041895"></p><p> 2）网络利用率</p><script type="math/tex; mode=display"> 网络利用率=信道利用率加权平均值</script></li></ol><h1 id="体系结构和参考模型"><a href="#体系结构和参考模型" class="headerlink" title="体系结构和参考模型"></a>体系结构和参考模型</h1><h2 id="OSI"><a href="#OSI" class="headerlink" title="OSI"></a>OSI</h2><p>应用层、表示层、会话层、传输层、网络层、数据链路层、物理层。</p><h2 id="TCP-IP"><a href="#TCP-IP" class="headerlink" title="TCP/IP"></a>TCP/IP</h2><p>应用层、传输层、网际层、网络接口层。</p><p>要注意 OSI 的网络层是无连接和面向连接都有，而 TCP/IP 的网络层是无连接；OSI 的传输层是面向连接的，而 TCP/IP 的传输层是无连接+面向连接。</p><h3 id="TCP-IP-协议栈"><a href="#TCP-IP-协议栈" class="headerlink" title="TCP/IP 协议栈"></a>TCP/IP 协议栈</h3><p>应用层包括 HTTP、FTP、DNS 等协议。</p><p>传输层包括 TCP、UDP 等协议。</p><p>网际层为 IP 协议。</p><p>网络接口层包括 Ethernet、ATM、Frame Relay 等。</p><h2 id="5层模型"><a href="#5层模型" class="headerlink" title="5层模型"></a>5层模型</h2><p>放一张图看一下数据封装与解封装。</p><p><img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/image-20230506232455682.png" alt="image-20230506232455682"></p><h1 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h1><h2 id="C-S-通信方式"><a href="#C-S-通信方式" class="headerlink" title="C/S 通信方式"></a>C/S 通信方式</h2><p>服务端特点：</p><ul><li>主机永远在线</li><li>有固定 IP</li></ul><p>客户端特点：</p><ul><li>与服务端连接</li><li>连接非长时间，通常是间歇连接</li><li>不与其他客户端通信</li><li>动态 IP</li></ul><h3 id="C-S-实例：HTTP"><a href="#C-S-实例：HTTP" class="headerlink" title="C/S 实例：HTTP"></a>C/S 实例：HTTP</h3><p>客户端 -&gt; web browser，服务端 -&gt; web server</p><h2 id="P2P-通信方式"><a href="#P2P-通信方式" class="headerlink" title="P2P 通信方式"></a>P2P 通信方式</h2><p>特点：</p><ul><li>没有 always-on server</li><li>任意 peer 可以向其他 peer 提供服务，或接受服务</li><li>peers 直接 communicate</li><li>与 C/S 中的客户端一样，非长时间连接，且动态 IP</li><li>网络鲁棒性强</li></ul><h3 id="P2P-实例：P2P-文件共享"><a href="#P2P-实例：P2P-文件共享" class="headerlink" title="P2P 实例：P2P 文件共享"></a>P2P 实例：P2P 文件共享</h3><h2 id="多主机进程间通信"><a href="#多主机进程间通信" class="headerlink" title="多主机进程间通信"></a>多主机进程间通信</h2><p>单一主机内进程间通信：defined by OS</p><p>多主机间进程：exchanging message</p><ul><li><p>客户端进程初始化本次通话（communication），服务端进程等待连接。</p></li><li><p>使用传输层创建的 socket 进行通信。</p></li></ul><p><img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/image-20230511170614277.png" alt="image-20230511170614277"></p><ul><li>每个对话中，<strong>2</strong> sockets are involved. 每端各一个。</li></ul><h3 id="定址"><a href="#定址" class="headerlink" title="定址"></a>定址</h3><p>每个进程需要一个 identifier. 我们给每个主机设置一个独有的 32 位 IP 地址。然后，再设置一个端口。端口指向我们具体的进程。</p><h2 id="应用层协议"><a href="#应用层协议" class="headerlink" title="应用层协议"></a>应用层协议</h2><ul><li>定义 exchanged message 的类型（request，respone）</li><li>定义 message 的语法。</li><li>定义 message 语义。</li><li>定义 rules. 在发送或接收信息后进行什么动作。</li></ul><h3 id="open-protocols"><a href="#open-protocols" class="headerlink" title="open protocols"></a>open protocols</h3><ul><li>在 RFC 中定义。所有人都可以查看协议内容</li><li>allows for interoperability</li><li>实例：HTTP、SMTP</li><li>独立于系统平台。不受主机影响</li></ul><h2 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h2><p><img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/image-20230511172941967.png" alt="image-20230511172941967"></p><h2 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h2><p><img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/image-20230511172930992.png" alt="image-20230511172930992"></p><blockquote><p>为什么 UDP 什么也不保证，也有使用 UDP 的：</p><p>答：可以在应用层 build 追加 service 来确保这些要求。</p></blockquote><h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><h3 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h3><p>一个 web page 包含各种各样的对象。包括 html 文件、jpg 图像、等等。每个对象都有自己的 URL. HTTP 使用的是 C/S 模式。</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>使用 TCP 传输协议。通常 port 80.</li><li>HTTP 是无状态协议。</li></ul><h3 id="non-persistent-HTTP"><a href="#non-persistent-HTTP" class="headerlink" title="non-persistent HTTP"></a>non-persistent HTTP</h3><ul><li>最多只有一个 Web 对象发送 TCP 连接请求。传输多个对象就需要建立多个连接。</li><li>第一步（1）：HTTP 客户端初始化一个指向 HTTP 服务端的 TCP 连接。</li><li>第一步（2）： HTTP 服务端接收连接，完成连接后通知服务端。</li><li>第二步：客户端将 HTTP request message 息发送至 TCP 套接字（Socket）。消息包括客户端希望获得的<strong>单个</strong>对象。</li><li>第三步：HTTP 服务端接收消息后，将 response message 发送至它的 TCP 套接字。</li><li>第四步：HTTP 服务端关闭 TCP 连接</li><li>第五步：HTTP 客户端接收到 response message，然后显示对应的 html file.</li><li>第六步：假如解析 html 后，其中又有许多 referenced objects，那么又需要重复 1-5 步来获取这些对象的内容。</li></ul><p>问题：一次单对象的 non-persistent HTTP 传输需要多长时间：</p><p>答：2 个 RTT + 传输文件所需时间（time to trasmit file）</p><h3 id="persistent-HTTP"><a href="#persistent-HTTP" class="headerlink" title="persistent HTTP"></a>persistent HTTP</h3><p>persistent HTTP 可以将传输时间从 2 rtts + trasmit time 缩减到 1 rtt + transmit time. 因为传输多个对象只需要初始化一次了。</p><ul><li>TCP 连接建立后，多个对象都可以向单一 TCP 连接进行<strong>串行</strong>传输。</li><li>和 non-persisent HTTP 不同，在发送 response message 后不会立即关闭连接，而是保持开启。</li></ul><h3 id="HTTP-格式"><a href="#HTTP-格式" class="headerlink" title="HTTP 格式"></a>HTTP 格式</h3><ol><li><p>request message</p><ul><li><p>request line. 请求方法+URL+其他（HTTP 协议版本）。例： <code>GET xxx.com/index.html HTTP/1.1\r\h</code>。除了 <code>GET</code> 方法外，还有 <code>POST</code>, <code>HEAD</code>, <code>PUT</code> 等。</p></li><li><p>header lines. 包括发出请求的主机名称、浏览器类型、对象类型、首选语言、连接是否 keep-alive 等附加信息。</p></li><li><p>body. 并不是必要。用于发送其他附加信息。</p><p>  <img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/image-20230514145819758.png" alt="image-20230514145819758"></p></li></ul></li><li><p>response message</p><ul><li>status line. 版本号+状态码+短消息。e.g. <code>HTTP/1.1 200 OK</code></li><li>header lines. 包括时间、服务端类型等附加信息。</li><li>body. 包括需要传输的对象本身。</li></ul></li></ol><h3 id="Cookies-技术"><a href="#Cookies-技术" class="headerlink" title="Cookies 技术"></a>Cookies 技术</h3><p>cookies 用于维护用户和服务器的状态。</p><p>包括四个组件：</p><ol><li>cookie header line of HTTP response message</li><li>cookie header line in next HTTP request message</li><li>cooke file kept on user’s host</li><li>back-end database at Website</li></ol><p><img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/image-20230514151403686.png" alt="image-20230514151403686"></p><h2 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h2><p>安全 HTTP 协议，端口 443. 通过 SSL 或者 TLS 加密，验证访客身份，保护数据完整性。</p><h2 id="FTP"><a href="#FTP" class="headerlink" title="FTP"></a>FTP</h2><p>以 ASCII 码格式控制连接，传输控制信息。</p><blockquote><p>通常端口 21，7位 ASCII 码。</p></blockquote><h2 id="DNS-域名解析系统"><a href="#DNS-域名解析系统" class="headerlink" title="DNS 域名解析系统"></a>DNS 域名解析系统</h2><p>域名解析顺序：</p><ol><li>浏览器缓存</li><li>本机hosts文件</li><li>路由缓存</li><li>均没有，向客户端发送域名</li><li>DNS服务器（本地域名、顶级域名、根域名等多级服务器）迭代解析，递归查询</li><li>传输回解析结果 IP</li></ol><h2 id="DHCP（动态主机配置协议）"><a href="#DHCP（动态主机配置协议）" class="headerlink" title="DHCP（动态主机配置协议）"></a>DHCP（动态主机配置协议）</h2><p>一种局域网协议。属于应用 UDP 的应用层协议。</p><p>作用：为临时接入局域网的用户分配 IP 地址。</p><h1 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h1><h2 id="应用层对传输协议的要求"><a href="#应用层对传输协议的要求" class="headerlink" title="应用层对传输协议的要求"></a>应用层对传输协议的要求</h2><ul><li>数据完整性（文件传输，网上交易）</li><li>时效性（多媒体通话，在线游戏）</li><li>吞吐量（Live）</li><li>安全性</li></ul><h1 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h1><p>物理层用于解决传输比特流的方法。</p><p>物理层主要任务：确定与传输媒体接口有关的特性、标准</p><h2 id="通信基础"><a href="#通信基础" class="headerlink" title="通信基础"></a>通信基础</h2><p>经典数据通信模型：</p><p><img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/image-20230507130801711.png" alt="image-20230507130801711"></p><h3 id="通信方式"><a href="#通信方式" class="headerlink" title="通信方式"></a>通信方式</h3><ol><li>单工通信。单方交互，只需要一条信道。</li><li>半双工。两边都可以发送或接收，但不能同时发送和接收。需要两条信道。</li><li>全双工。可以同时发送和接收。需要两条信道。</li></ol><h3 id="数据传输方式"><a href="#数据传输方式" class="headerlink" title="数据传输方式"></a>数据传输方式</h3><ol><li>串行传输。例如将一个字节的 8 个 bit 由低位到高位按顺序依次发送。</li><li><p>并行传输。例如将 8 个 bit 同时通过 8 条信道发送。相比于串行传输速度更快，费用更高。适合近距离传输。</p></li><li><p>同步传输（区块传输）。数据以一个数据区块为单位传输。传送时，先送出同步字符，再送出整批数据。</p></li><li>异步传输。数据以比特或者小组为单位传输。传送数据时要加起始位和终止位。</li></ol><h3 id="其他概念"><a href="#其他概念" class="headerlink" title="其他概念"></a>其他概念</h3><p><strong>码元</strong>：指一个固定时长的信号波形或数字脉冲。作为数字信号计量单位。码元宽度指时长。有 $x$ 个状态的码元被称为 $x$ 进制码元。</p><p><strong>码元传输速率</strong>：单位时间内传输的码元量。与进制无关， 只与码元宽度有关。</p><p><strong>波特</strong>：码元传输速率的单位。1 波特表示每秒传输一个码元。如果一个码元携带 $n\ {\rm bit}$ 信息量，则  $M\ {\rm Baud}$ 的码元传输速率对应每秒能传输 $Mn\ {\rm bit}$ 信息。</p><p><strong>带宽</strong>（模拟信号）：单位为 Hz. 最高频率和最低频率之间的差值。</p><p><strong>带宽</strong>（数字设备）：单位为 bit/s. 前面提到过。链路最高数据传输能力。</p><h2 id="通信定理"><a href="#通信定理" class="headerlink" title="通信定理"></a>通信定理</h2><p>前置概念：</p><p><strong>失真</strong>：带宽受限、有噪声、干扰导致的波形磨损。影响因素：码元传输速率，过快容易受磨损；信号传输距离；噪声干扰；传输媒体质量。</p><p><strong>码间串扰</strong>： 频率过高，导致接收端收到的波形失去了码元之间的清晰界限。</p><h3 id="奈氏准则"><a href="#奈氏准则" class="headerlink" title="奈氏准则"></a>奈氏准则</h3><p>理想低通（无噪声，带宽受限）条件下，如果要避免码间串扰，极限码元传输速率为 2W Baud. 其中 W 为信道带宽，单位 Hz.</p><p>则极限数据传输速率</p><script type="math/tex; mode=display">2W\log_2V</script><p>$V$ 指有几种码元（码元离散电平数目）。</p><h3 id="香农定理"><a href="#香农定理" class="headerlink" title="香农定理"></a>香农定理</h3><p>在带宽受限<strong>且有噪声</strong>的信道中，为了不产生误差，信息数据传输存在上限。</p><p><strong>信噪比</strong>：信号平均功率/噪声平均功率 $S/N$（单位 dB），或者用如下公式表示：</p><script type="math/tex; mode=display">10\lg{S\over N}</script><p>香农定理公式：</p><script type="math/tex; mode=display">W\log_2({1+{S\over N}})</script><h2 id="编码和调制"><a href="#编码和调制" class="headerlink" title="编码和调制"></a>编码和调制</h2><p>信道分类：模拟信道与数字信道（按传输的信号分），无线信号和有线信号（传输介质）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;概念和功能&quot;&gt;&lt;a href=&quot;#概念和功能&quot; class=&quot;headerlink&quot; title=&quot;概念和功能&quot;&gt;&lt;/a&gt;概念和功能&lt;/h1&gt;&lt;p&gt;参考：Computer Networking: A Top-Down Approach 配套网课, 考研计网&lt;/p&gt;</summary>
      
    
    
    
    <category term="问道" scheme="https://eykenis.github.io/categories/%E9%97%AE%E9%81%93/"/>
    
    
  </entry>
  
  <entry>
    <title>MIT S6.081 labs 笔记</title>
    <link href="https://eykenis.github.io/2023/04/05/xv6-labs-2022/"/>
    <id>https://eykenis.github.io/2023/04/05/xv6-labs-2022/</id>
    <published>2023-04-05T02:32:21.000Z</published>
    <updated>2023-06-02T12:54:52.080Z</updated>
    
    <content type="html"><![CDATA[<h1 id="utilities"><a href="#utilities" class="headerlink" title="utilities"></a>utilities</h1><p>用时 5h 左右.</p><h2 id="Boot-xv6"><a href="#Boot-xv6" class="headerlink" title="Boot xv6"></a>Boot xv6</h2><p>配环境配了半个多小时。官网的引导还是非常清晰的。</p><h2 id="sleep"><a href="#sleep" class="headerlink" title="sleep"></a>sleep</h2><p>xv6 系统 exec指令时，创建一个子进程执行该用户指令，用户函数中可能会有系统调用。这时会陷入内核态并进行操作，再返回。全部执行完后要 <code>exit</code> 来让进程退出。</p><p>调用系统调用 <code>sleep</code>.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;kernel/types.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;user/user.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (argc &lt; <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">char</span>* str;</span><br><span class="line">        str = <span class="string">&quot;Usage: sleep sleeptime..\n&quot;</span>;</span><br><span class="line">        write(<span class="number">1</span>, str, <span class="built_in">strlen</span>(str));</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> time = atoi(argv[<span class="number">1</span>]);</span><br><span class="line">    sleep(time);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意标准输入的 fd 号是 0，标准输出是 1，错误输出（<code>stderr</code>）是 2.</p><p>其中，系统调用 <code>sleep(time)</code> 将当前进程挂起 <code>(time)</code> 个 tick. 如果 sleep 过程中发生信号中断，会返回剩余没睡完的时间。</p><p>可能看书不仔细，没有找到 qemu 模拟的一个 tick 是多久。Linux 下的 <code>sleep()</code> 不是按 tick 睡而是按秒睡。</p><h2 id="pingpong"><a href="#pingpong" class="headerlink" title="pingpong"></a>pingpong</h2><p>该任务要求用 <code>pipe</code> 实现父进程和子进程的通信，子进程写一个 byte 发送给父进程。</p><p><code>pipe()</code> 会创建一个管道，占用两个文件描述符 <code>fd[2]</code>，<code>fd[0]</code> 用于读，<code>fd[1]</code> 用于写。<code>fork()</code> 之后父进程 <code>wait()</code> 一下，等子进程做完它的事再去管道读。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;kernel/types.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;user/user.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">int</span> *argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fd[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">pipe</span>(fd) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="number">2</span>, <span class="string">&quot;Pipe creation failed\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> pid;</span><br><span class="line">    <span class="keyword">if</span> (!(pid = fork())) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="number">1</span>, <span class="string">&quot;%d: received ping\n&quot;</span>, <span class="built_in">getpid</span>());</span><br><span class="line">        <span class="built_in">write</span>(fd[<span class="number">1</span>], <span class="string">&quot;x&quot;</span>, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">wait</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="number">1</span>, <span class="string">&quot;%d: received pong\n&quot;</span>, <span class="built_in">getpid</span>());</span><br><span class="line">        <span class="keyword">char</span> *buf = <span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">char</span>));</span><br><span class="line">        <span class="built_in">read</span>(fd[<span class="number">0</span>], buf, <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="number">1</span>, <span class="string">&quot;message %s received\n&quot;</span>, buf);</span><br><span class="line">        <span class="built_in">free</span>(buf);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">close</span>(fd[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">close</span>(fd[<span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="primes"><a href="#primes" class="headerlink" title="primes"></a>primes</h2><p>用 pipeline 求素数。题目说求 35 以内的就可以，但是测的时候求 100 多也没问题。做法是在每次递归时，将待筛选的数输入 pipe 内，让下一层递归读取并筛去，筛完的数再递归到下一层。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;kernel/types.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;user/user.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test_prime</span><span class="params">(<span class="keyword">int</span> fd)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num, p;</span><br><span class="line">    <span class="keyword">int</span> rd;</span><br><span class="line">    <span class="keyword">if</span> ((rd = <span class="built_in">read</span>(fd, &amp;num, <span class="number">4</span>)) &amp;&amp; rd != <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="comment">// end of recursion</span></span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="number">2</span>, <span class="string">&quot;pipe read is not in int type\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (!rd) <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="number">1</span>, <span class="string">&quot;prime %d\n&quot;</span>, num);</span><br><span class="line">    <span class="keyword">int</span> son_fd[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">pipe</span>(son_fd);</span><br><span class="line">    <span class="keyword">if</span> (!fork()) &#123; <span class="comment">// child</span></span><br><span class="line">        <span class="built_in">close</span>(fd);</span><br><span class="line">        <span class="built_in">close</span>(son_fd[<span class="number">1</span>]);</span><br><span class="line">        <span class="built_in">test_prime</span>(son_fd[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">close</span>(son_fd[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">while</span> ((rd = <span class="built_in">read</span>(fd, &amp;p, <span class="number">4</span>))) &#123;</span><br><span class="line">            <span class="keyword">if</span> (rd != <span class="number">4</span>) &#123;</span><br><span class="line">                <span class="built_in">fprintf</span>(<span class="number">2</span>, <span class="string">&quot;pipe read is not in int type\n&quot;</span>);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (p % num) &#123;</span><br><span class="line">                <span class="built_in">write</span>(son_fd[<span class="number">1</span>], &amp;p, <span class="number">4</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">close</span>(son_fd[<span class="number">1</span>]);</span><br><span class="line">        <span class="built_in">close</span>(fd);</span><br><span class="line">        <span class="built_in">wait</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fd[<span class="number">2</span>];</span><br><span class="line">    <span class="built_in">pipe</span>(fd);</span><br><span class="line">    <span class="keyword">int</span> i, n = <span class="number">35</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">2</span>; i &lt;= n; ++i) &#123; <span class="comment">// initialize</span></span><br><span class="line">        <span class="built_in">write</span>(fd[<span class="number">1</span>], &amp;i, <span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">close</span>(fd[<span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">test_prime</span>(fd[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="find"><a href="#find" class="headerlink" title="find"></a>find</h2><p>照着 ls 写递归版本就行。要先熟悉 <code>stat</code>、<code>dirent</code> 等描述结构体。<code>stat</code>详细可以看 <code>stat.h</code>。<code>dirent</code> 描述的是当前被读取的目录信息，其中包括索引节点号 <code>inum</code> 和目录名 <code>name</code>.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;kernel/types.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;kernel/stat.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;user/user.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;kernel/fs.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span>*</span></span><br><span class="line"><span class="function"><span class="title">fmtname</span><span class="params">(<span class="keyword">char</span> *path)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">char</span> buf[DIRSIZ+<span class="number">1</span>];</span><br><span class="line">  <span class="keyword">char</span> *p;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Find first character after last slash.</span></span><br><span class="line">  <span class="keyword">for</span>(p=path+<span class="built_in">strlen</span>(path); p &gt;= path &amp;&amp; *p != <span class="string">&#x27;/&#x27;</span>; p--)</span><br><span class="line">    ;</span><br><span class="line">  p++;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Return name.</span></span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">strlen</span>(p) &gt;= DIRSIZ)</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">  <span class="built_in">memmove</span>(buf, p, <span class="built_in">strlen</span>(p));</span><br><span class="line">  *(buf + <span class="built_in">strlen</span>(p)) = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> buf;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">find</span><span class="params">(<span class="keyword">char</span>* path, <span class="keyword">char</span>* target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">512</span>];</span><br><span class="line">    <span class="keyword">char</span>* p;</span><br><span class="line">    <span class="keyword">int</span> fd;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dirent</span> <span class="title">de</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">st</span>;</span></span><br><span class="line">    <span class="keyword">if</span> ((fd = <span class="built_in">open</span>(path, <span class="number">0</span>)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="number">2</span>, <span class="string">&quot;find: cannot open %s\n&quot;</span>, path);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">fstat</span>(fd, &amp;st) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="number">2</span>, <span class="string">&quot;find: cannot stat %s\n&quot;</span>, path);</span><br><span class="line">        <span class="built_in">close</span>(fd);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in"><span class="keyword">switch</span></span>(st.type) &#123;</span><br><span class="line">        <span class="keyword">case</span> T_FILE:</span><br><span class="line">            <span class="comment">// printf(&quot;%s is a file, fmtname: %s, target: %s\n&quot;, path, fmtname(path), target);</span></span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(target, <span class="built_in">fmtname</span>(path))) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, path);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> T_DIR:</span><br><span class="line">        <span class="comment">// printf(&quot;%s is a directory\n&quot;, path);</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">strlen</span>(path) + DIRSIZ + <span class="number">1</span> + <span class="number">1</span> &gt; <span class="built_in"><span class="keyword">sizeof</span></span>(buf)) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;find: path too long\n&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">strcpy</span>(buf, path);</span><br><span class="line">            p = buf + <span class="built_in">strlen</span>(buf);</span><br><span class="line">            *p++ = <span class="string">&#x27;/&#x27;</span>;</span><br><span class="line">            <span class="keyword">while</span> (<span class="built_in">read</span>(fd, &amp;de, <span class="built_in"><span class="keyword">sizeof</span></span>(de)) == <span class="built_in"><span class="keyword">sizeof</span></span>(de)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (de.inum == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="built_in">memmove</span>(p, de.name, DIRSIZ);</span><br><span class="line">                p[DIRSIZ] = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(de.name, <span class="string">&quot;.&quot;</span>) || !<span class="built_in">strcmp</span>(de.name, <span class="string">&quot;..&quot;</span>))</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="built_in">find</span>(buf, target);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">close</span>(fd);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Usage: find directory filename..\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">find</span>(argv[<span class="number">1</span>], argv[<span class="number">2</span>]);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="xargs"><a href="#xargs" class="headerlink" title="xargs"></a>xargs</h2><p>模拟题。把当前标准输入中的内容存下来，接到 argv 后面，再在子进程中 <code>exec</code> 就可以了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;kernel/types.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;kernel/param.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;user/user.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">512</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// copy args to command ptr</span></span><br><span class="line">    <span class="keyword">char</span> *command[MAXARG];</span><br><span class="line">    argc--;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; argc; ++i) &#123;</span><br><span class="line">        command[i] = argv[i + <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// read std input to buf, and append buf</span></span><br><span class="line">    <span class="keyword">int</span> input_size, argptr;</span><br><span class="line">    <span class="keyword">while</span> ((input_size = <span class="built_in">read</span>(<span class="number">0</span>, buf, <span class="built_in"><span class="keyword">sizeof</span></span>(buf))) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        argc++, argptr = <span class="number">0</span>;</span><br><span class="line">        command[argc - <span class="number">1</span>] = <span class="built_in">malloc</span>(<span class="number">64</span> * <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">char</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; input_size; ++i) &#123;</span><br><span class="line">            <span class="keyword">char</span> ch = buf[i];</span><br><span class="line">            <span class="keyword">if</span> (ch == <span class="string">&#x27; &#x27;</span>) &#123;</span><br><span class="line">                argc++, argptr = <span class="number">0</span>;</span><br><span class="line">                command[argc - <span class="number">1</span>] = <span class="built_in">malloc</span>(<span class="number">64</span> * <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">char</span>));</span><br><span class="line">                <span class="keyword">if</span> (argc &gt; MAXARG) &#123;</span><br><span class="line">                    <span class="built_in">fprintf</span>(<span class="number">2</span>, <span class="string">&quot;xargs: too many args!\n&quot;</span>);</span><br><span class="line">                    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">&#x27;\n&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                command[argc - <span class="number">1</span>][argptr++] = ch;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// use childproc to execute the command follows xargs</span></span><br><span class="line">    <span class="keyword">if</span> (!fork()) &#123;</span><br><span class="line">        <span class="built_in">exec</span>(argv[<span class="number">1</span>], command);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">wait</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>最后 <code>make grade</code> 99 分，原来还需要上传一个完成时间。</p><p><code>echo 5 &gt; time.txt &amp;&amp; make grade</code></p><p><code>make grade</code>，100/100</p><h1 id="syscall"><a href="#syscall" class="headerlink" title="syscall"></a>syscall</h1><p>用时 4h 左右。</p><p>首先是 riscv64 gdb 的安装。直接 <code>riscv64-unknown-elf-gdb</code> 之后是这样：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">riscv64-unknown-elf-gdb: command not found</span><br></pre></td></tr></table></figure><p>先拷贝一份 gdb 源码到本地，再 <code>mkdir build &amp;&amp; cd build</code>.</p><p>执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install libgmp-dev</span><br><span class="line">../configure --prefix=/usr/local --with-python=/usr/bin/python --target=riscv64-unknown-elf --enable-tui=yes</span><br><span class="line">make -j$(nproc)</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><p>完成 <code>riscv</code> 版本 gdb 的安装。</p><p>再执行 <code>riscv64-unknown-elf-gdb</code>，就能启动 gdb 了。</p><p>（P.S. 做完 util 之后觉得 wsl2 太慢太卡了，还是要上 Ubuntu. 但是太久没用 Ubuntu, 到这一步花了我好几个小时 orz）</p><p>折腾完环境终于能进入正题了</p><h2 id="Using-gdb"><a href="#Using-gdb" class="headerlink" title="Using gdb"></a>Using gdb</h2><p>在一个终端启动 <code>make qemu-gdb</code>，记录 <code>tcp::26000</code></p><p>在另一个终端打开 gdb（riscv版或者 <code>gdb-multiarch</code> ）, 并输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">target remote localhost:26000</span><br></pre></td></tr></table></figure><p>完成连接。进入 kernel</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file kernel/kernel</span><br></pre></td></tr></table></figure><p>然后按说明调试.</p><p>或者直接 <code>gdb-multiarch -x .gdbinit</code></p><p>建议先阅读 xv6 books 的第四节。</p><p>问题答案：</p><p>Looking at the backtrace output, which function called <code>syscall</code>?</p><blockquote><p><code>usertrap()</code> in <code>kernel/trap.c</code></p></blockquote><p>What is the value of <code>p-&gt;trapframe-&gt;a7</code> and what does that value represent? (Hint: look <code>user/initcode.S</code>, the first user program xv6 starts.)</p><blockquote><ol><li>sys status. EXEC or EXIT. in start at user/initcode.S, a7 is assigned with SYS_EXEC.</li></ol></blockquote><p>What was the previous mode that the CPU was in?</p><blockquote><p>usermode. check sstatus:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p/t $sstatus</span><br><span class="line"><span class="meta">$</span><span class="bash">5 = 100010</span></span><br></pre></td></tr></table></figure><p>(Here we do as instruction, and if we check ‘p’ we’ll get ‘value has been optimized out’. It’s because creation of *p is after our breakpoint! what a fool is me.)</p></blockquote><p>Write down the assembly instruction the kernel is panicing at. Which register corresponds to the varialable <code>num</code>?</p><blockquote><p>80002078:    00002903              lw    s2,0(zero) # 0 <_entry-0x80000000></p><p>s2.</p></blockquote><p>Why does the kernel crash? Hint: look at figure 3-3 in the text; is address 0 mapped in the kernel address space? Is that confirmed by the value in <code>scause</code> above? (See description of <code>scause</code> in <a href="https://pdos.csail.mit.edu/6.828/2022/labs/n//github.com/riscv/riscv-isa-manual/releases/download/Priv-v1.12/riscv-privileged-20211203.pdf">RISC-V privileged instructions</a>)</p><blockquote><p>check scause, <code>$1 = 13</code>.</p><p>13 represents a load page fault. That’s because we load data from addr 0. 0 is not avaliable. Kernel space begins at 0x80000000.</p></blockquote><p>What is the name of the binary that was running when the kernel paniced? What is its process id (<code>pid</code>)?</p><blockquote><p>initcode.</p><p>pid is 1.</p><p>use p/x *p.</p></blockquote><h2 id="System-call-tracing"><a href="#System-call-tracing" class="headerlink" title="System call tracing"></a>System call tracing</h2><p>看不太懂。。这是要干啥。跟着 hint，找到 <code>syscall.c</code> 下的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fetch the nth 32-bit system call argument.</span></span><br><span class="line"><span class="function"><span class="keyword">void</span></span></span><br><span class="line"><span class="function"><span class="title">argint</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> *ip)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  *ip = argraw(n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取系统调用的第 n 个参数。</p><p>然后还找到有个函数 <code>myproc()</code> 返回当前正在运行的进程的 <code>proc</code> 结构体。</p><p>在 proc 中新建一个掩码变量，获取进行的系统调用号后用掩码与一下就知道现在调用什么了。根据 hint，还要注意 fork 时为子进程也 copy 一下掩码这个变量。</p><p>另外怎么没有地方提起返回值的问题。这里测试程序其实是规定了 <code>trace</code> 返回 0 的。</p><p><a href="[finished system call tracing · Eykenis/xv6-labs-2022@68a932a (github.com">commit</a>](<a href="https://github.com/Eykenis/xv6-labs-2022/commit/68a932a62dd3d357da8e84c9a77d3046da12443f">https://github.com/Eykenis/xv6-labs-2022/commit/68a932a62dd3d357da8e84c9a77d3046da12443f</a>))</p><h2 id="Sysinfo"><a href="#Sysinfo" class="headerlink" title="Sysinfo"></a>Sysinfo</h2><p>该系统调用输出一个 <code>sysinfo</code> 结构体。其中包括空闲内存大小和使用中的进程数量两个信息。</p><p>先将 sysinfotest 加入，会编译失败。去 <code>user.h</code> 声明一下 <code>sysinfo</code> 的结构体和函数。</p><h3 id="xv6-的内存管理"><a href="#xv6-的内存管理" class="headerlink" title="xv6 的内存管理"></a>xv6 的内存管理</h3><p>xv6 将内存以链表的形式将空闲空间组织起来。见 kalloc.c 中对 <code>run</code> 和 <code>kmem</code> 的定义。<code>run</code> 就是一个单链表的定义。</p><p><code>kmem</code> 的三个参数中，<code>freelist</code> 为空闲页链表。我们可以在 <code>kalloc</code> 函数中窥见 <code>kmem</code> 的运作方式。注意到每次 <code>kalloc</code> 都<strong>必须加锁</strong>。因为页表相关属于临界操作。</p><p>我们可以照着写 <code>freememcount</code> 函数用于计算页表空闲大小。虽然这里我们不修改临界资源，但为了避免结果不一致，还是加锁为好。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span></span></span><br><span class="line"><span class="function"><span class="title">freememcount</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  uint64 freepg_cnt = <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">run</span>* <span class="title">r</span>;</span></span><br><span class="line">  </span><br><span class="line">  acquire(&amp;kmem.lock);</span><br><span class="line">  r = kmem.freelist;</span><br><span class="line">  <span class="keyword">while</span> (r) &#123;</span><br><span class="line">    r = r-&gt;next;</span><br><span class="line">    freepg_cnt++;</span><br><span class="line">  &#125;</span><br><span class="line">  release(&amp;kmem.lock);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> freepg_cnt * PGSIZE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后再来看<code>proc.c</code>. 所有的进程都在 <code>struct proc proc[NPROC]</code> 这个全局变量中，我们只需要遍历这个 proc 数组，然后看看状态不为 <code>UNUSED</code> 的有多少个就可以了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span></span></span><br><span class="line"><span class="function"><span class="title">procnum</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">proc</span>* <span class="title">p</span>;</span></span><br><span class="line">  <span class="keyword">int</span> proc_count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (p = proc; p != &amp;proc[NPROC]; p++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (p-&gt;state != UNUSED) &#123;</span><br><span class="line">      proc_count++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> proc_count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在还有一个问题，我们这些操作都是在内核空间做的，我们需要将信息拷贝至用户空间。参考 <code>copyout</code> 函数的实现。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">uint64</span></span><br><span class="line"><span class="function"><span class="title">sys_sysinfo</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  uint64 st;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">sysinfo</span> <span class="title">info</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">proc</span> *<span class="title">p</span> =</span> myproc();</span><br><span class="line"></span><br><span class="line">  argaddr(<span class="number">0</span>, &amp;st); <span class="comment">// first arg in sysinfo() (userspace)</span></span><br><span class="line"></span><br><span class="line">  info.freemem = freememcount();</span><br><span class="line">  info.nproc = procnum();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (copyout(p-&gt;pagetable, st, &amp;info, <span class="keyword">sizeof</span>(info)) &lt; <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/Eykenis/xv6-labs-2022/commit/085f6309180d971023c5ce2b05d57b43ab92e553">commit</a></p><h1 id="Pgtbl"><a href="#Pgtbl" class="headerlink" title="Pgtbl"></a>Pgtbl</h1><p>看了很久的 book</p><h2 id="Speed-up-system-calls"><a href="#Speed-up-system-calls" class="headerlink" title="Speed up system calls"></a>Speed up system calls</h2><p>应该属于进程间共享内存方式的通信。要求在内核和用户程序之间创建一个只读页，然后将 struct syscall 存入只读页中 USYSCALL 映射的地址。</p><p><code>ugetpid()</code> 实现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ugetpid(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">usyscall</span> *<span class="title">u</span> =</span> (struct usyscall *)USYSCALL;</span><br><span class="line">  <span class="keyword">return</span> u-&gt;pid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是说我们要在进程创建时，将进程用户空间 USYSCALL 这个地址位置存入 usyscall 的内容。</p><p>观察 <code>memlayout.h</code>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// riscv.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PGSIZE 4096</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXVA (1L &lt;&lt; (9 + 9 + 9 + 12 - 1))</span></span><br><span class="line"><span class="comment">// memlayout.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TRAMPOLINE (MAXVA - PGSIZE)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TRAPFRAME (TRAMPOLINE - PGSIZE)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> USYSCALL (TRAPFRAME - PGSIZE)</span></span><br></pre></td></tr></table></figure><p>xv6 使用 Sv39 RISC-V 架构，64 位虚拟地址只有低 39 位被使用。</p><p>在转换物理地址的过程中，虚拟地址高 27 位用于定位 PTE。PTE 将指向一个 44 位的带标记位的物理页号，然后虚拟地址的低 12 位为偏移。最后得到一个 56 位的物理地址。</p><p>所以，对于我们的进程，它拥有 2^39^ = 512G 空间，PGSIZE = 4M. 地址空间自顶向下分别为 trampoline(1 页)、trapframe(1 页)、heap, user stack 和 user text and data.</p><p>heap 是自顶向下增长的。所以，我们要将 usyscall 的内容存在堆底也就是进程虚拟地址的第三页。</p><p>hint 中的 <code>mempages</code> 即用于进行 proc 结构体中各个变量和地址空间的映射。</p><p>问题：写完之后 test，发生了 scause，signal=15，为 page fault. 访问页面出错了。</p><p>于是上 printf 调试大法。</p><p>最后发现子进程中 fork 会导致 ugetpid 运行缺页。</p><p>继续排查，发现是 allocproc 函数出了问题，应当在 proc_pagetable 之前就分配好 usyscall 的空间。<strong>因为proc_pagetable() 为进程各项分配页表映射。如果分配映射时 usyscall 还没被分配空间的话，肯定会导致 page fault.</strong> </p><p>又是一个不仔细导致的错误，有点低级。</p><p>再回顾整个 allocproc 过程：</p><ol><li>薅一个空闲进程过来</li><li>为进程内指针分配物理空间（kalloc）</li><li>创建一个页表，进行页表映射，以此创建进程各个项的用户空间地址。</li><li>创建新的上下文。</li></ol><p>问题：</p><blockquote><p>Which other xv6 system call(s) could be made faster using this shared page? Explain how.</p></blockquote><p>fork(). We add a pointer *proc in struct usyscall, then children could access there parent in USYSCALL page.</p><p><a href="https://github.com/Eykenis/xv6-labs-2022/commit/f55b2c4b25f1cf675a27d8ae8ac495f2d3b727db">commit</a></p><h2 id="Print-a-page-table"><a href="#Print-a-page-table" class="headerlink" title="Print a page table"></a>Print a page table</h2><p>主要参考 freewalk 函数。这个 freewalk 用于释放页表映射，过程中访问了各个页表。</p><p>看 freewalk 的时候注意了 freewalk 考虑了 riscv 的多级页表，会进行相应的递归调用。而且遇到 leaf 页表项会 panic. 这说明 freewalk 之前要先释放掉所有 leaf pagetable.</p><p>总之照着写就能写出来了。注意格式。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">recur_vmprint</span><span class="params">(<span class="keyword">pagetable_t</span> pagetable, <span class="keyword">int</span> level)</span></span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">512</span>; ++i) &#123;</span><br><span class="line">    <span class="keyword">pte_t</span> pte = pagetable[i];</span><br><span class="line">    <span class="keyword">if</span> ((pte &amp; PTE_V) &amp;&amp; (pte &amp; (PTE_R|PTE_W|PTE_X)) == <span class="number">0</span>) &#123;</span><br><span class="line">      uint64 child = PTE2PA(pte);</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; level; ++j)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;.. &quot;</span>);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;..%d: pte %p pa %p\n&quot;</span>, i, pte, child);</span><br><span class="line">      recur_vmprint((<span class="keyword">pagetable_t</span>)child, level + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (pte &amp; PTE_V)&#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; level; ++j)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;.. &quot;</span>);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;..%d: pte %p pa %p\n&quot;</span>, i, pte, PTE2PA(pte));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span></span></span><br><span class="line"><span class="function"><span class="title">vmprint</span><span class="params">(<span class="keyword">pagetable_t</span> pagetable)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;page table %p\n&quot;</span>, pagetable);</span><br><span class="line">  recur_vmprint(pagetable, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/Eykenis/xv6-labs-2022/commit/aa9f58f63e69265100b584980b6f1935309e00d9">commit</a></p><p>问题：</p><p>Explain the output of <code>vmprint</code> in terms of Fig 3-4 from the text. What does page 0 contain? What is in page 2? When running in user mode, could the process read/write the memory mapped by page 1? What does the third to last page contain?</p><blockquote><p>page 0 contains text and data seg.</p><p>page 2 contains stack. (page 1 as stack gurad)</p><p><strong>SEE IN <code>exec()</code> IN exec.c</strong></p><p>NO.</p><p>511 to 509: trampoline, trapframe, and usyscall.</p><p>so 509 contains the struct <code>usyscall</code>.</p></blockquote><h2 id="Detect-which-pages-have-been-accessed"><a href="#Detect-which-pages-have-been-accessed" class="headerlink" title="Detect which pages have been accessed"></a>Detect which pages have been accessed</h2><p>alloc: if so, PTE in TLB, PTE_V is true</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">pte_t</span> *</span></span><br><span class="line"><span class="function"><span class="title">walk</span><span class="params">(<span class="keyword">pagetable_t</span> pagetable, uint64 va, <span class="keyword">int</span> alloc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(va &gt;= MAXVA)</span><br><span class="line">    panic(<span class="string">&quot;walk&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> level = <span class="number">2</span>; level &gt; <span class="number">0</span>; level--) &#123;</span><br><span class="line">    <span class="keyword">pte_t</span> *pte = &amp;pagetable[PX(level, va)];</span><br><span class="line">    <span class="keyword">if</span>(*pte &amp; PTE_V) &#123;</span><br><span class="line">      pagetable = (<span class="keyword">pagetable_t</span>)PTE2PA(*pte);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span>(!alloc || (pagetable = (<span class="keyword">pde_t</span>*)kalloc()) == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      <span class="built_in">memset</span>(pagetable, <span class="number">0</span>, PGSIZE);</span><br><span class="line">      *pte = PA2PTE(pagetable) | PTE_V;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &amp;pagetable[PX(<span class="number">0</span>, va)];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PTE_A: RISC-V privileged architecture manual     Figure 4.15</p><p><img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/image-20230525144139109.png" alt="image-20230525144139109"></p><p>Be sure to clear <code>PTE_A</code> after checking if it is set. Otherwise, it won’t be possible to determine if the page was accessed since the last time <code>pgaccess()</code> was called (i.e., the bit will be set forever).</p><p>不是很理解这句？</p><p>或许是因为 pgaccess 本身也会为 PTE_A 置 1，需要清除？</p><h1 id="Traps"><a href="#Traps" class="headerlink" title="Traps"></a>Traps</h1><h2 id="RISC-V-assemply"><a href="#RISC-V-assemply" class="headerlink" title="RISC-V assemply"></a>RISC-V assemply</h2><p>全是问题。了解 RISCV 汇编。</p><p>Which registers contain arguments to functions? For example, which register holds 13 in main’s call to <code>printf</code>?</p><blockquote><p>a0, a1, a2, …</p><p>a2 holds printf.</p></blockquote><p>Where is the call to function <code>f</code> in the assembly code for main? Where is the call to <code>g</code>? (Hint: the compiler may inline functions.)</p><blockquote><p>call no f or g. JUST calculated the result as 12.</p></blockquote><p>At what address is the function <code>printf</code> located?</p><blockquote><p>0x642</p></blockquote><p>What value is in the register <code>ra</code> just after the <code>jalr</code> to <code>printf</code> in <code>main</code>?</p><blockquote><p>0x38 the return address.</p></blockquote><p>Run the following code.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">unsigned int i = 0x00646c72;</span><br><span class="line">printf(&quot;H%x Wo%s&quot;, 57616, &amp;i);</span><br><span class="line">     </span><br></pre></td></tr></table></figure><p>What is the output? <a href="https://www.asciitable.com/">Here’s an ASCII table</a> that maps bytes to characters.</p><p>The output depends on that fact that the RISC-V is little-endian. If the RISC-V were instead big-endian what would you set <code>i</code> to in order to yield the same output? Would you need to change <code>57616</code> to a different value?</p><p><a href="http://www.webopedia.com/TERM/b/big_endian.html">Here’s a description of little- and big-endian</a> and <a href="https://www.rfc-editor.org/ien/ien137.txt">a more whimsical description</a>.</p><blockquote></blockquote><p>In the following code, what is going to be printed after <code>&#39;y=&#39;</code>? (note: the answer is not a specific value.) Why does this happen?</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">printf(&quot;x=%d y=%d&quot;, 3);</span><br></pre></td></tr></table></figure><p>&gt;</p><h2 id="Backtrace"><a href="#Backtrace" class="headerlink" title="Backtrace"></a>Backtrace</h2><p>了解程序栈的构造就很好写了。</p><p>主要还是读 xv6 book.</p><p>按照 hint 写 <code>r_fp()</code> 函数获取当前函数栈帧。</p><p>获取栈帧后，<code>PGROUNDUP</code> 一下获取栈<strong>底</strong>（xv6 的栈结构为向下增长）。当前栈帧 <code>-8</code> 所指向的位置是当前函数的返回地址，而指向的上一个地址是前一个被调用函数的帧地址。于是 <code>fp-8</code> 就可以获得当前函数返回地址，而 <code>fp-16</code> 就可以返回前一个函数帧。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">backtrace</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  uint64 fp, top;</span><br><span class="line">  fp = <span class="built_in">r_fp</span>();</span><br><span class="line">  top = <span class="built_in">PGROUNDUP</span>(fp);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;backtrace:\n&quot;</span>);</span><br><span class="line">  <span class="keyword">while</span> (fp != top)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, *(uint64*)(fp - <span class="number">8</span>));</span><br><span class="line">    fp = *(uint64*)(fp - <span class="number">16</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Alarm"><a href="#Alarm" class="headerlink" title="Alarm"></a>Alarm</h2><h1 id="Copy-on-Write"><a href="#Copy-on-Write" class="headerlink" title="Copy-on-Write"></a>Copy-on-Write</h1><p>这次实验就解决一个问题：</p><p>如何用写时复制技术实现 <code>fork()</code> 。</p><p>先看开头的 solution，它提到我们在这次实验中要做的：内存懒分配。只在内存真的被需要的时候才从子进程复制一份过来。</p><ol><li><code>fork()</code> 为子进程创建一个页表，页表项从子进程的虚拟页指向父进程的物理页。</li><li>子进程和父进程的页表项都标记为 read-only</li><li>标记后，两个进程其中任一尝试写这些页表时，都会触发 page fault.</li><li>page fault 被内核 handler 侦测后，为 faulting process 分配一个物理页，复制原页面内容到新页面，将 PTE 指向这个新页面，并将 PTE 设置为 writable.</li><li>还没完！还有一些 free 相关的问题要解决。当一块物理页被多个进程使用时，我们不能随便 free，只有在最后一个使用这个页面的进程也不再使用时，我们才能 free. 解决办法是计数，类似 C++ 的智能指针。</li></ol><p>子进程内存页不真的分配，只创建一组映射。同时要记录好映射这组物理页的计数。修改 <code>uvmcopy</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span></span></span><br><span class="line"><span class="function"><span class="title">cow_uvmcopy</span><span class="params">(<span class="keyword">pagetable_t</span> old, <span class="keyword">pagetable_t</span> <span class="keyword">new</span>, uint64 sz)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">pte_t</span> *pte;</span><br><span class="line">  uint64 pa, i;</span><br><span class="line">  uint flags;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; sz; i += PGSIZE)&#123;</span><br><span class="line">    <span class="keyword">if</span>((pte = <span class="built_in">walk</span>(old, i, <span class="number">0</span>)) == <span class="number">0</span>)</span><br><span class="line">      <span class="built_in">panic</span>(<span class="string">&quot;uvmcopy: pte should exist&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>((*pte &amp; PTE_V) == <span class="number">0</span>)</span><br><span class="line">      <span class="built_in">panic</span>(<span class="string">&quot;uvmcopy: page not present&quot;</span>);</span><br><span class="line">    pa = <span class="built_in">PTE2PA</span>(*pte);</span><br><span class="line">    *pte = (*pte) &amp; (~PTE_W);</span><br><span class="line">    *pte = (*pte) | PTE_RSWD;</span><br><span class="line">    flags = <span class="built_in">PTE_FLAGS</span>(*pte);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">mappages</span>(<span class="keyword">new</span>, i, PGSIZE, (uint64)pa, flags) != <span class="number">0</span>)&#123;</span><br><span class="line">      <span class="keyword">goto</span> err;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">add_ref</span>(pa); <span class="comment">// add ref count. MIND that it is a criticial operation, so use lock.</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"> err:</span><br><span class="line">  <span class="built_in">uvmunmap</span>(<span class="keyword">new</span>, <span class="number">0</span>, i / PGSIZE, <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;utilities&quot;&gt;&lt;a href=&quot;#utilities&quot; class=&quot;headerlink&quot; title=&quot;utilities&quot;&gt;&lt;/a&gt;utilities&lt;/h1&gt;&lt;p&gt;用时 5h 左右.&lt;/p&gt;
&lt;h2 id=&quot;Boot-xv6&quot;&gt;&lt;a href=&quot;#</summary>
      
    
    
    
    <category term="问道" scheme="https://eykenis.github.io/categories/%E9%97%AE%E9%81%93/"/>
    
    
    <category term="操作系统" scheme="https://eykenis.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>2022 EC-Final 现场赛 游记</title>
    <link href="https://eykenis.github.io/2023/03/29/2022ECFinal/"/>
    <id>https://eykenis.github.io/2023/03/29/2022ECFinal/</id>
    <published>2023-03-29T12:31:44.000Z</published>
    <updated>2023-04-12T14:19:55.124Z</updated>
    
    <content type="html"><![CDATA[<p>想了很久，还是不知道游记该如何动笔。</p><p>本来最近忙得焦头烂额，但是这之中日程好像排进了一个 EC Final，去比一下赛，<del>放松一下也未尝不可</del>。team 相信珂学的其他两人也都忙着面试、准备考研，所以大家这段时间实在是没什么训练，这场比赛确实只能是当作去旅游了。</p><p>无他，先记一下流水账。</p><h2 id="3-24"><a href="#3-24" class="headerlink" title="3.24"></a>3.24</h2><p><img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/image-20230329145026467.png" alt="image-20230329145026467"></p><p>高铁站的麦当劳早餐，30块钱，旅行第一刀。这钱够我在学校吃一天了</p><p>下了高铁找到 sjie 他们，打算先去现场签到，但是他们先去酒店了。我们一支队就去现场签到。签到的时候拍了团体照，但是最后没有拿牌所以照片估计就这样看不到了。。。</p><p><img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/image-20230329150125940.png" alt="image-20230329150125940"></p><blockquote><p>沪爷的学校装修就是好，如果不是非要报个 985，穿上孔乙己的长衫，让自己找工作时多一份筹码，我其实可以有这么多这么多好的选择。</p></blockquote><p><img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/3E1169014E07D167FC620AD0850428D4.jpg" alt="img"></p><p><img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/image-20230329150432433.png" alt="image-20230329150432433"></p><p>目前手里没有合影，过段时间找其他拍了的人要要。。</p><p><img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/A20A11EB8E6D1F4FF64C7664EA105816.jpg" alt="img"></p><p>热身赛。第一次现场赛，没有对比对象，但是印象还是比较好的。我们坐在厕所边上，所以<del>可以两分钟去一次厕所，每去一次回来写一行代码，上着上着就 AC 了</del>。</p><p>热身赛是两道纯签题，然后好像是一道图论题？我没有参加太多做法上的讨论，主要是另外两个队友在找共边最短路。热身赛我们是铜，但很显然一大堆队伍都没有认真打，明日之风直接来都不来了 QAQ，所以这也告诉我们，第二天打铁是再正常不过的事了（</p><p>中午去食堂吃饭但被告知这里只能用校园卡，参赛者只能用午餐券去特定食堂打饭。不过食堂阿姨和同学们也好说话，一个热情的小姐姐就帮我们队一块代点了餐。和后面晚餐券打的饭相比，还是自家学生的伙食好得多！而且肯定是比我学校的伙食强不少的。</p><p><img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/2DE7C9602AAC01E3E8CCCFEBEB14DEF1.jpg" alt="img"></p><p>↑晚餐，感觉一般</p><p>热身赛结束，回去之后我们就回宾馆打音游和打牌了。</p><p><img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/image-20230329151221015.png" alt="image-20230329151221015"></p><p>《关于我的队友是手柄音游大佬这件事》</p><p><img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/image-20230329152821215.png" alt="image-20230329152821215"></p><p>打大富翁，从 7 点好像一直打到 1 点</p><p>（我都拍了些什么东西）</p><h2 id="3-25"><a href="#3-25" class="headerlink" title="3.25"></a>3.25</h2><p><img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/image-20230329153127826.png" alt="image-20230329153127826"></p><p><img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/DFBFD1E17C11FF4048C1DCA9460B8C87.jpg" alt="img"></p><p>然后就是正式赛。压力还是挺大的。我们对面坐的是南邮一队，他们热身赛很轻松地A完三题直接走人，正式赛前这位也坐在我对面清体力。而且我看到了中间队长的 id，没错就是那个 cyx，蓝桥杯全国第一那位，草。把我们放在一堆志愿者的厕所边，让志愿者们看他们拿金，同时看我们打铁，实在是太不人道了！</p><p>我还是一如既往地不擅长快速出签到，但签到正好是我从后面开始读的 M 题，所以我看了眼榜马上丢给队友让他们快速出了。之后就是另一个换根 dp 的 J 题，交了很多发都没过，最后发现是因为多组输入 + <code>memset</code> 没换而 T 掉了，换手动初始化之后很快过。接下来便是坐牢时间。C、F、L 题多开，L 看错题以为又是个签到，没想到最后是一个如此奇怪又暴力的构造。C 题其实我们在开局两个多小时的时候已经出了思路，按数字低往高 DP 就可以了，还是因为训练停掉了的问题，中间出现了若干细节失误，因为没考虑 <code>10000000000 18</code> 这类情况，导致开了 <code>int128</code> 之后因为懒得写输出，最后又转回 <code>ull</code> 了，直接秒 WA，心态崩。找边界条件找很久之后终于发现了，但是这时候最傻逼了来了：我们竟然以为前文提到的边界情况会爆 <code>int128</code>！遂写字符串，果不其然写爆了。最后十分钟才会想起来这个根本不会爆，这种低级错误在其他人眼里妥妥的笑话好吧。赛后才知道我们也有机会开 I 题但榜歪了所以没有人去开。我看了 H 知道是一个暴搜但一直改 C 也没去写。于是打铁。</p><p>虽然没有训练，理所当然地打铁了，但是如果我们在这之前有去年下半年的状态，我觉得是不至于拿不到牌的。至少 C 题能出，I 题能读，F 也能想一想，甚至能玩一玩跳棋 H 和构造 L。可开的题很多，但太不熟练，留下了些许遗憾。</p><p>收拾心情，比赛结束后回酒店继续打牌（</p><p><img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/2A574D96FC0239C26D9B2A7C6C4CD8F9.jpg" alt="img"></p><p>阿瓦隆是个好游戏，不过我智商太低，玩这个 cpu 很容易烧。</p><h2 id="3-26"><a href="#3-26" class="headerlink" title="3.26"></a>3.26</h2><p>25 号的阿瓦隆玩到凌晨1点，睡一觉起来吃个午饭就去闭幕式现场坐着了。于是在工作人员眼皮底下继续阿瓦隆（</p><p><img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/image-20230329192524489.png" alt="image-20230329192524489"></p><p>原本这里在打牌的间隙，我们有一段对话我是想记下来的。但是当天晚上我就忘了一大段，到现在也没有想起来。只记得大概是这样</p><blockquote><p>“下次记得……”</p><p>“没有下次了啊”</p><p>“我们没有下次了，他还有”</p><p>“他还有挺多次的”</p><p>“我也没有下次了”</p></blockquote><p>这让我联想到《轻音少女》中，大家毕业前夕的对话。律也是这样提醒唯，没有下一次校园祭演出了。在座的有大四的，有即将要考研的。他们打完这场 final 或许就要退役了。</p><p>噢，好像想起来了，是说下次记得领牌子时不要去那么早，在那排队也是干等。（笑</p><p>我不禁想问自己，我还有下次吗？我不知道。或许下半年保研结束我会尝试再追一追自己过去没有达到过的成就。ACM 的时光是宝贵的。</p><p>又一次见到了杜老师本人及玉音放送！</p><p><img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/image-20230329192613052.png" alt="image-20230329192613052"></p><p>偷一下一队的铜牌</p><p><img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/image-20230329192634270.png" alt="image-20230329192634270"></p><p>重生之我是菜狗捧杯！蒋老师的时代来临力！</p><p><img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/21239C237F7159B04D2ACF4D467A1280.jpg" alt="img"></p><p>闭幕式结束后去参加晚宴，因为我的一些问题，我们队没有报上晚宴，但是又必须要报了才能去（不太理解），所以最后我和 <font color="#0000ff">HennessyWithSoul</font> 是冒牌其他队的队员名字去的。事实证明有很多人没来，所以我们虽然来了但是现场还是有一些空位。</p><p><img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/749F7AC8E108B39C715260778444CCA2.jpg" alt="img"></p><p>晚宴蒋老师就在对面桌！偷拍</p><p>晚宴的菜式就是一般的家常菜馆，就没有多拍（当然，白嫖是好的</p><p>晚上继续打牌。果然还是大家一起团建最有趣。这次打到2点多，有人要睡，也有人意犹未尽</p><p>顺便我想多玩玩好人，特别是平民，然后摆烂观摩 <font color="#ff0000"> Intercept </font>、<font color="#ff8c00"> nidhs </font>、<font color="#aa00aa"> ryougishikilove </font> 大脑对决。</p><p><img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/4679492875E095486D7A7E10888F94BC.jpg" alt="img"></p><h2 id="3-27"><a href="#3-27" class="headerlink" title="3.27"></a>3.27</h2><p>因为睡太晚，今天直接中午起，下午我们去看《铃芽户缔》。总感觉新海诚太想复刻自己过去的成功，而不愿意做出新尝试了。画风依旧，配乐也依旧（不过好听好看是真的），但剧情我没看太懂。。前面两作可以算是爱情动漫，而这一步可以说和爱情毫无关系吧，不知道为啥最后非要强加一个女主喜欢上男主的情节，有点莫名其妙。如果去掉这个也只是勉强可以，或许是我没看太懂吧。可能以后欣赏不来这类电影了。</p><p>本来来上海是想在电玩城打 maimai 的，这次直接在电影院外面遇上了，不过因为大家的安排最后也没打成。一回宿舍就懒了，明明 maimai 离我那么近，现在好像又不知道要等到啥时候了。。</p><p>所以看完电影后我们是直接去了外滩。</p><p><img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/image-20230329195107570.png" alt="image-20230329195107570"></p><p>可能比黄兴步行街宽一点的南京路步行街</p><p><img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/image-20230329195113903.png" alt="image-20230329195113903"></p><p>晚六点准时鸣钟的万国建筑群</p><p><img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/image-20230329195101756.png" alt="image-20230329195101756"></p><p>外滩，其实还有几张，不过就不放重复了的。ssjie 给我们拍了合照。</p><p>晚上我们8个人（廖爷 <font color ="#ff8c00">Lskkkno1</font> 去找高中同学了）没有协商好吃饭的位置，各想吃各的，所以分成两组4个人了，我们4个走了差不多一个小时的路去吃火锅了。路上、饭店里、回来的路上大家聊了很多对未来的展望，交流了很多很多。</p><p><img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/image-20230329195917662.png" alt="image-20230329195917662"></p><p>（寿喜锅烧和牛蘸生鸡蛋还不错）</p><p>10点回酒店，继续打瓦。已经变成莫甘娜的形状了</p><p><img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/image-20230329200226027.png" alt="image-20230329200226027"></p><h2 id="3-28"><a href="#3-28" class="headerlink" title="3.28"></a>3.28</h2><p>同样地，因为瓦太晚第二天起不来，大家起来时可以当场退房了。订的是晚上的火车，下午去KTV. 但大家都不是来唱歌的。大家都是来打瓦的！（其实我还是想唱会的）</p><p><img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/image-20230329200355597.png" alt="image-20230329200355597"></p><p>五点多锁房后去初号机圣地巡礼</p><p><img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/1ED3DC4395284C81EBC52361D56AD093.jpg" alt="img"></p><p>吃完晚饭，坐上火车，回家。</p><hr><p>这几天我都总觉得有很多想写下来的东西，但是回来之后真的开始打字，却发现写不出太多感想。或许自己该多读一些 paperback 了。或许下半年我还有机会去拼一拼更高的奖项，或许能看到校队里还能有新鲜血液。</p><p>EC Final 结束了。或许只是一次附带比赛和面基的旅游，但也藏着遗憾，和一些其他的什么情感。</p><p>  <font color="#ff8c00">      nidhs    </font>,    <font color="#0000ff">      Langdao_Zhang    </font>,    <font color="#ff8c00">      Sakuyalove    </font>,    <font color="#0000ff">      HennessyWithSoul    </font>,    <font color="#ff0000">      Intercept    </font>,    <font color="#aa00aa">      ryougishikilove    </font>, 似乎都不会/不能继续打下去了。这之后校队估计会冷清许多。</p>]]></content>
    
    
    <summary type="html">算法竞赛就像一个泡泡，外面是残酷的现实</summary>
    
    
    
    <category term="XCPC" scheme="https://eykenis.github.io/categories/XCPC/"/>
    
    
    <category term="XCPC" scheme="https://eykenis.github.io/tags/XCPC/"/>
    
  </entry>
  
  <entry>
    <title>MIT线性代数全笔记</title>
    <link href="https://eykenis.github.io/2023/03/22/MIT18-06-Linear-Algebra/"/>
    <id>https://eykenis.github.io/2023/03/22/MIT18-06-Linear-Algebra/</id>
    <published>2023-03-22T10:30:50.000Z</published>
    <updated>2023-05-25T13:08:13.787Z</updated>
    
    <content type="html"><![CDATA[<p>本文用于记录 MIT 18.06 课程关于线性代数的笔记.</p><h2 id="对线性方程组解的几何理解"><a href="#对线性方程组解的几何理解" class="headerlink" title="对线性方程组解的几何理解"></a>对线性方程组解的几何理解</h2><p>行空间:</p><p>在 $n$ 维空间内将线性方程组横向比较, 可以将每个方程看作一个 $n-1$ 维空间. 将他们在 $n$ 维空间内作图并求交，就可以得到解空间.</p><p>列空间:</p><p>例:</p><script type="math/tex; mode=display">x\begin{bmatrix}2\\-1\end{bmatrix}+y\begin{bmatrix}-1 \\ 2\end{bmatrix}=\begin{bmatrix}0 \\ 3\end{bmatrix}</script><p>将列向量 $(2,-1),(-1,2)$ 画到 $2$ 维平面上, 求出 $x,y$ 的值使得等式成立. 所有满足条件的 $x,y$ 即解向量.</p><h2 id="矩阵消元"><a href="#矩阵消元" class="headerlink" title="矩阵消元"></a>矩阵消元</h2><p>使用高斯消元法将矩阵消为 $U$ 矩阵. 再一步步回代.</p><p>变换矩阵：</p><p>对单位矩阵做初等变换, 再右乘以 $A$, 效果等同于直接对 $A$ 做相同变换.</p><blockquote><p>如果变换矩阵左乘以源矩阵会发生什么?</p><p>会从行变换变为列变换.</p><p>清楚初等变换的概念是分行和列的.</p></blockquote><p>消元变换时对一个单位矩阵作同样变换, 就可以得到一个消元的变换阵.</p><h2 id="矩阵乘法和逆"><a href="#矩阵乘法和逆" class="headerlink" title="矩阵乘法和逆"></a>矩阵乘法和逆</h2><p>分块矩阵：</p><p>只要矩阵分块形式是一致的 (分块后各个部分的分别相乘都合法), 就可以分块相乘.</p><p>逆矩阵：</p><script type="math/tex; mode=display">A^{-1}A=I</script><p>增广矩阵求法：原矩阵左/右接一个单位矩阵，对增广矩阵变换，使原矩阵部分变为单位矩阵，则之前拼接的单位矩阵就会变换为逆矩阵.</p><h2 id="LU-分解"><a href="#LU-分解" class="headerlink" title="LU 分解"></a>LU 分解</h2><p>因为</p><script type="math/tex; mode=display">A=LU</script><p>故求出 $L,U$ 其中一个后, 另一个可以用逆矩阵的方式求出, 因为</p><p>$EA=U\to ELU=E\to L=E^{-1}$</p><h2 id="转置，置换，向量空间"><a href="#转置，置换，向量空间" class="headerlink" title="转置，置换，向量空间"></a>转置，置换，向量空间</h2><p>一些基本性质</p><ul><li>$(AB)^{-1}=B^{-1}A^{-1}$</li><li>$(AB)^T=B^TA^T$</li><li>$(A^T)^{-1}=(A^{-1})^T$</li></ul><p>转置 (transpose) 矩阵是正交矩阵. 因为 $A^TA=I$. 感性上很好理解.</p><p>置换 (permutation) 矩阵, 顾名思义就是只进行行\列互换的初等变换矩阵.</p><p>向量空间的概念类似于群.<br><strong>定义：一个向量空间是由一些向量构成的非空集合。该集合上定义了加和数乘运算。满足运算封闭性。</strong></p><p>和群（特别地，向量空间是一类阿贝尔群）类似, 向量空间具有以下性质:</p><ul><li>运算封闭. 向量空间对 $+$, 数乘 两个运算封闭. (<strong>不包括叉乘！</strong>)</li><li>满足交换律. 对数乘满足结合律和分配律.</li><li>存在逆元. 在向量空间中为相反向量.</li><li>$\forall \vec x,1·{\vec x}=\vec x$</li></ul><p>子空间的概念类似于子群.</p><h2 id="列空间和零空间"><a href="#列空间和零空间" class="headerlink" title="列空间和零空间*"></a>列空间和零空间*</h2><p>列空间即由向量空间某些列构成的空间. 任何列空间一定是整个向量空间的子空间.</p><h3 id="零空间"><a href="#零空间" class="headerlink" title="零空间"></a>零空间</h3><p>零空间并不是指 $(0,…,0)$ 这个向量,</p><p><strong>而是指 $A\vec x=\vec 0$ 的所有解构成的解空间</strong>.</p><h2 id="主变量和特解"><a href="#主变量和特解" class="headerlink" title="主变量和特解"></a>主变量和特解</h2><p>先将一个矩阵进行消元，消元后主元的个数为该矩阵的<strong>秩</strong>。</p><p>在这个 $U$ 矩阵中，有主元的列称为<strong>主列</strong>，其余列为<strong>自由列</strong>。自由列的变量定值后可以解得矩阵的一个特解。</p><p>假设矩阵有 $n$ 个自由列，那么取 $n$ 个<strong>不线性相关</strong>的特解就可以表达出原方程组的通解。</p><h3 id="简化行阶梯形式"><a href="#简化行阶梯形式" class="headerlink" title="简化行阶梯形式"></a>简化行阶梯形式</h3><p>$U$ 在进行列变换（列交换）后可以变为行阶梯形式 $R=\begin{bmatrix}I&amp; F\\0 &amp; 0\end{bmatrix}$.</p><p>把主变量放在左边的列，自由变量放在右边的列。</p><p>然后就可以解出零空间。</p><p>$Rx=0\rarr N=\begin{bmatrix}-F\\I\end{bmatrix}$.</p><h2 id="Ax-b-的可解性与解的结构"><a href="#Ax-b-的可解性与解的结构" class="headerlink" title="$Ax=b$ 的可解性与解的结构"></a>$Ax=b$ 的可解性与解的结构</h2><h2 id="线性相关性、基、维数"><a href="#线性相关性、基、维数" class="headerlink" title="线性相关性、基、维数"></a>线性相关性、基、维数</h2><h3 id="线性相关"><a href="#线性相关" class="headerlink" title="线性相关"></a>线性相关</h3><p>向量组<strong>存在</strong>结果为零向量的组合则称<strong>线性相关</strong>（除开所有向量都数乘 0 的情况）</p><h3 id="张成"><a href="#张成" class="headerlink" title="张成"></a>张成</h3><p>指向量组的所有线性组合的结果生成的空间。</p><h3 id="基"><a href="#基" class="headerlink" title="基"></a>基</h3><p>向量基有以下特点：</p><ol><li>线性无关</li><li>能够生成整个空间</li></ol><p>根据第二个特点，可以知道向量基是和向量空间对应的概念。+</p><h3 id="维数"><a href="#维数" class="headerlink" title="维数"></a>维数</h3><p>基向量的个数，就是这个向量空间的维数。</p><p>而基向量组按列组成的矩阵，它的秩就等于这个向量空间的维数。也就是说矩阵的列空间维数=矩阵的秩。注意是<strong>数量上</strong>相等，这两个概念是不同的。</p><p>而矩阵的零空间的维数，等于矩阵自由变量的个数。因此 $free_variables=n-rank$.</p><h2 id="四个基本子空间"><a href="#四个基本子空间" class="headerlink" title="四个基本子空间"></a>四个基本子空间</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文用于记录 MIT 18.06 课程关于线性代数的笔记.&lt;/p&gt;
&lt;h2 id=&quot;对线性方程组解的几何理解&quot;&gt;&lt;a href=&quot;#对线性方程组解的几何理解&quot; class=&quot;headerlink&quot; title=&quot;对线性方程组解的几何理解&quot;&gt;&lt;/a&gt;对线性方程组解的几何理解&lt;</summary>
      
    
    
    
    <category term="问道" scheme="https://eykenis.github.io/categories/%E9%97%AE%E9%81%93/"/>
    
    
    <category term="数学" scheme="https://eykenis.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>《Effective C++》读书笔记（一）</title>
    <link href="https://eykenis.github.io/2023/03/01/EffectiveCPP/"/>
    <id>https://eykenis.github.io/2023/03/01/EffectiveCPP/</id>
    <published>2023-03-01T07:47:42.000Z</published>
    <updated>2023-03-20T07:02:12.782Z</updated>
    
    <content type="html"><![CDATA[<p>此文用于记录学习时的重点和 comments.</p><h1 id="Accounting-yourself-to-C"><a href="#Accounting-yourself-to-C" class="headerlink" title="Accounting yourself to C++"></a>Accounting yourself to C++</h1><h2 id="条款-1：视-C-为一个语言联邦"><a href="#条款-1：视-C-为一个语言联邦" class="headerlink" title="条款 1：视 C++ 为一个语言联邦"></a>条款 1：视 C++ 为一个语言联邦</h2><p>C++ 统共由四部分组成：</p><ul><li>C</li><li>Object</li><li>STL</li><li>template</li></ul><p>据我目前所知，STL 属于其中唯一一个通过封装形成的，官方的 STL 虽然够泛用了，但在特定场景可能有问题，因此也出现过一些优化版本，例如 EASTL.</p><h2 id="条款-2：使用-const-enum-inline-替换-define"><a href="#条款-2：使用-const-enum-inline-替换-define" class="headerlink" title="条款 2：使用 const, enum, inline 替换 #define"></a>条款 2：使用 const, enum, inline 替换 #define</h2><p>个人经常 #define 来处理变量, 看过很多别人的代码也是这样做的，用的多了，就会发现 define 的内容括号打好很重要，因为毕竟只是简单的文本替换，很容易出现优先级导致的语义错误，例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson k &lt;&lt; 1</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">int</span> k;</span><br><span class="line">cout &lt;&lt; lson &lt;&lt; endl;</span><br></pre></td></tr></table></figure><p>这样是会报错的.</p><p>当然该条目好像讨论的是全局变量赋值.</p><h3 id="define-和-const-enum-等的区别"><a href="#define-和-const-enum-等的区别" class="headerlink" title="define 和 const, enum 等的区别"></a>define 和 const, enum 等的区别</h3><p>让我们先来复习一下 CSAPP 中 C 语言生成程序的过程：</p><ul><li>预处理器</li><li>编译器</li><li>汇编器</li><li>链接器</li></ul><p><code>#define</code> 显然是在预处理阶段完成的，这一阶段所做的全部都是文本编辑，其中<code>#define</code>的所有宏定义被全部转换.</p><p>它的问题有啥呢？</p><ol><li><p>在程序链接过程中，<code>#define</code> 的内容早就被替换了，其所指代的符号自然不可能被添加到符号表中，因此如果这部分的内容出错了，是不会有提示的，单步调试观察变量也无法直接发现该处的问题.</p></li><li><p><strong>define 也可能导致内存滥用.</strong> 如果你使用 <code>#define</code> 定义常量，那么多个位置出现的该量虽然值相同，但在内存中可能使用了多份（它们没有名字，编译器没法负责任地把它们联系起来. 但使用 <code>const</code> 就不可能出现这个问题.</p></li></ol><h2 id="条款-3：尽可能使用-const"><a href="#条款-3：尽可能使用-const" class="headerlink" title="条款 3：尽可能使用 const"></a>条款 3：尽可能使用 const</h2><h3 id="为什么"><a href="#为什么" class="headerlink" title="为什么"></a>为什么</h3><p>让编译器替你找错误。</p><p>（除此以外，全局常量还可以节约一点空间. 它们<strong>可能</strong>不会被分配内存——有地址相关操作时，会分配只读内存给变量）</p><p>但是，const 有很多注意事项</p><hr><p>注意一下 const 指针：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* p = greeting;<span class="comment">// non-const pointer, const data</span></span><br><span class="line"><span class="keyword">char</span>* <span class="keyword">const</span> p = greeting;<span class="comment">// const pointer, non-const data</span></span><br></pre></td></tr></table></figure><p>那么，<code>int const</code> 和 <code>const int</code> 有什么区别呢？</p><p><strong>没区别</strong></p><hr><p>迭代器的本质</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> std::vector&lt;<span class="keyword">int</span>&gt;::iterator iter = vec.<span class="built_in">begin</span>(); <span class="comment">//迭代器本质上是一个指针，而 const iterator&lt;T&gt; 相当于 T* const.</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果要指向一个 const 内容，则使用 const_iterator</span></span><br><span class="line">std::vector&lt;<span class="keyword">int</span>&gt;const_iterator cIter = vec.<span class="built_in">begin</span>();</span><br></pre></td></tr></table></figure><hr><p>常被忽略的：<code>const</code> 修饰原函数返回值的函数，是可以重载的. 这不是只有返回值不同，而是对象不同，一个是普通 <code>class</code>，一个是 <code>const class</code>.</p><hr><p>关于 <code>func() const</code>，该 <code>const</code> 修饰该函数. 如果某个类的成员函数只有 <code>func()</code> 而没有 <code>func() const</code>，那么对于一个 <code>const class</code> 对象，调用 <code>func()</code> 就会出错. </p><p>这是因为函数的实际参数是有一个隐藏的 <code>this</code> 指针的，<code>func()</code> 中的 <code>this</code> 没有 <code>const</code> 修饰符，所以参数列表不匹配，就会报错. 而 <code>func() const</code> 传入的是 <code>const this</code> 指针，自然就可用了。</p><p>所以，<code>func() const</code> 中的 <code>const</code> 相当于修饰 <code>this</code> 指针。</p><hr><p>关于 <code>logical constness</code></p><p>使用 <code>mutable</code> 关键字，可以使得 <code>const</code> 类中的指定 <strong>non-static</strong> 变量可修改.</p><h2 id="条款-4：确定对象被使用前已经被初始化"><a href="#条款-4：确定对象被使用前已经被初始化" class="headerlink" title="条款 4：确定对象被使用前已经被初始化"></a>条款 4：确定对象被使用前已经被初始化</h2><p>内置类型需要自己留意，写手工初始化。</p><p>而 <code>class</code> 就得写构造函数了。但是很多书教初始化有两种写法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// #1</span></span><br><span class="line">A::<span class="built_in">A</span>(type p) &#123; x = p; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// #2</span></span><br><span class="line">A::<span class="built_in">A</span>(type p) : <span class="built_in">x</span>(p) &#123; &#125;</span><br></pre></td></tr></table></figure><p>通常管第二种叫做列表初始化。</p><p>其实这<strong>不对</strong>！</p><p>第一种并不能叫做初始化，而是对未初始化的值进行赋值，第二个才算初始化。</p><h1 id="Constructors-Destructors-and-Assignment-Operators"><a href="#Constructors-Destructors-and-Assignment-Operators" class="headerlink" title="Constructors, Destructors, and Assignment Operators"></a>Constructors, Destructors, and Assignment Operators</h1><h2 id="条款-5：了解-C-默默编写并调用哪些函数"><a href="#条款-5：了解-C-默默编写并调用哪些函数" class="headerlink" title="条款 5：了解 C++ 默默编写并调用哪些函数"></a>条款 5：了解 C++ 默默编写并调用哪些函数</h2><p>如果你的 <code>class</code> 没有写/重载以下内容，编译器会隐式地自己编写：</p><ul><li><p>default 构造函数（只要写了任何形式的构造函数，该函数就不会被创建）</p></li><li><p>copy 构造函数</p></li><li>析构函数</li><li>赋值操作符 <code>=</code></li></ul><p>但，编译器不总是帮你写这些，只有在你没有写，且程序中用到它们时，才会创建。</p><p>除此之外，以下两种情况也不会创建 assignment 操作符重载：</p><ol><li><p>class 的成员变量不可以修改。例如 reference 和 const.</p></li><li><p>父类将 <code>operator =</code> 设置为 <code>private</code>，则子类不会创建。</p></li></ol><h2 id="条款-6：若不想使用编译器自动生成的函数，就该明确拒绝"><a href="#条款-6：若不想使用编译器自动生成的函数，就该明确拒绝" class="headerlink" title="条款 6：若不想使用编译器自动生成的函数，就该明确拒绝"></a>条款 6：若不想使用编译器自动生成的函数，就该明确拒绝</h2><p>编译器可能会自动生成条款 5 中的各种函数，要想拒绝自动生成，只需要将他们声明为 <code>private</code>.</p><p>这样还会有一个问题：成员函数和 <code>friend</code> 友元函数还是可以访问它们。那么，你只需要不定义，而是只给声明即可。这样链接器找不到定义，就会得到一个 linkage error.</p><p>如果你想让这个 linkage error 提前至编译错误，你可以专门写一个 base class，来将不想被使用的函数放入，再让工作的 class 继承它即可。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;此文用于记录学习时的重点和 comments.&lt;/p&gt;
&lt;h1 id=&quot;Accounting-yourself-to-C&quot;&gt;&lt;a href=&quot;#Accounting-yourself-to-C&quot; class=&quot;headerlink&quot; title=&quot;Accounting yo</summary>
      
    
    
    
    <category term="问道" scheme="https://eykenis.github.io/categories/%E9%97%AE%E9%81%93/"/>
    
    
    <category term="C++" scheme="https://eykenis.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>开始新的学习——GAMES202笔记</title>
    <link href="https://eykenis.github.io/2022/12/21/games202/"/>
    <id>https://eykenis.github.io/2022/12/21/games202/</id>
    <published>2022-12-21T05:42:15.000Z</published>
    <updated>2023-04-12T14:13:57.251Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Lecture-02-Recap-of-CG-Basics"><a href="#Lecture-02-Recap-of-CG-Basics" class="headerlink" title="Lecture 02 Recap of CG Basics"></a>Lecture 02 Recap of CG Basics</h1><p>本章为一些关于GAMES101的复习内容。</p><h2 id="渲染管线再复习"><a href="#渲染管线再复习" class="headerlink" title="渲染管线再复习"></a>渲染管线再复习</h2><p>硬件管线流程：顶点处理——三角形处理——光栅化——片元处理——缓冲操作</p><p>顶点处理：确定各顶点在屏幕空间的位置</p><p>三角形处理：确定三角形，确定面片</p><p>光栅化：将三角形像素化</p><p>片元处理：计算着色</p><p>缓冲操作：控制输出，后期处理</p><h2 id="Lecture-03-Real-time-Shadows-1"><a href="#Lecture-03-Real-time-Shadows-1" class="headerlink" title="Lecture 03 Real-time Shadows 1"></a>Lecture 03 Real-time Shadows 1</h2><p>这章首先复习一下在 LearnOpenGL 学过的两 pass 阴影。</p><p><strong>传统阴影有两大问题：走样和自遮挡</strong>。</p><p>阴影缓冲的方式能很好地在其他物体上显示阴影，但并不能处理模型自己挡住自己所产生的阴影。如果要用这种方式合理地产生自阴影，就需要将原来的模型拆解，这样产生的渲染代价是平方倍数增长的。</p><p>其二是走样，阴影缓冲分辨率是有限的，在光源视角看到的单像素位置可能换个角度之后就不再在屏幕上只占一个像素，这就导致了走样，阴影锯齿。这样产生的锯齿在第二个 pass 还没法用抗锯齿技术消除。</p><p><img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/image-20230103134423578.png" alt="image-20230103134423578"></p><p>又是微积分，在图形学还没有接触过太多数学公式的我雾了…</p><h3 id="不等式在-RTR-中的应用"><a href="#不等式在-RTR-中的应用" class="headerlink" title="不等式在 RTR 中的应用"></a>不等式在 RTR 中的应用</h3><p>因为图形学 “看起来是对的那么就是对的” 法则，这些不等式的正确食用方法应该是<strong>把它们当等式用</strong> (approximately equal) 。</p><p><img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/image-20230103134614300.png" alt="image-20230103134614300"></p><p>例如，通过约等式拆分两个函数乘积的积分，可以大大简化运算，提高效率。（式子右边的分母是归一化常数，也即区间长度）</p><p>然后我们拿来简化 PBR 公式：</p><p><img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/image-20230103135325307.png" alt="image-20230103135325307"></p><p>这个公式积分范围越小越准，可以认为等式右边算的是左边的平均值。</p><h3 id="PCSS-Percentage-closer-soft-shadows"><a href="#PCSS-Percentage-closer-soft-shadows" class="headerlink" title="PCSS - Percentage closer soft shadows"></a>PCSS - Percentage closer soft shadows</h3><p>Shadow Mapping 产生的是硬阴影——阴影边界棱角分明，只可能有锯齿。</p><p>而软阴影存在过渡。通过名字可以窥见，PCSS 的软阴影处理方法可能就是离物体越远阴影越透明？</p><p>首先我们需要一个工具——<strong>PCF</strong>.</p><h4 id="PCF-的做法（Percentage-Closer-Filtering）"><a href="#PCF-的做法（Percentage-Closer-Filtering）" class="headerlink" title="PCF 的做法（Percentage Closer Filtering）"></a>PCF 的做法（Percentage Closer Filtering）</h4><p>在 Shadow Map 上，对每个像素进行 Filtering，找其附近 N×N 的像素，创建一个 01 矩阵——比其深度大为 1，深度小为 0.</p><p>然后取一个平均值作为其可见性。根据该可见性决定该处阴影透明度，这样就能在阴影边缘处达到模糊的效果。</p><p>（但这种方法不能消除走样，只会让锯齿变为模糊的锯齿。</p><p>效果：</p><p><img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/image-20230104144641628.png" alt="image-20230104144641628"></p><p>当然暴力也可以解决问题，使用的均值矩阵越大，边缘就越模糊，锯齿也就越不明显。</p><p>该算法的开销也是成倍增长，非常慢。</p><h4 id="优化做法——PCSS"><a href="#优化做法——PCSS" class="headerlink" title="优化做法——PCSS"></a>优化做法——PCSS</h4><ul><li>先得到某个区域内的遮挡物平均深度.</li><li>通过深度决定 filter size（Penumbra esitmation）</li><li>PCF</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Lecture-02-Recap-of-CG-Basics&quot;&gt;&lt;a href=&quot;#Lecture-02-Recap-of-CG-Basics&quot; class=&quot;headerlink&quot; title=&quot;Lecture 02 Recap of CG Basics&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="问道" scheme="https://eykenis.github.io/categories/%E9%97%AE%E9%81%93/"/>
    
    
  </entry>
  
  <entry>
    <title>ICPC沈阳线上赛游记</title>
    <link href="https://eykenis.github.io/2022/11/06/47thShenyang/"/>
    <id>https://eykenis.github.io/2022/11/06/47thShenyang/</id>
    <published>2022-11-06T14:32:24.000Z</published>
    <updated>2022-11-07T02:39:36.436Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><em>究竟什么样的结局，才配得上这一路的颠沛流离？</em></p><p>​                                                            ——当然不是说我，是说 Deft</p></blockquote><p><img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/image-20221107100047734.png" alt="image-20221107100047734"></p><p>曾经想都不太敢想的成绩，今天（11 月 6 号）居然真的达到了。rank54/733，Ag. 如果 A 能调出来真的有可能 Au. 可惜没有沉住气放弃了（后话）。</p><p>9 点起床，看了两把 DRX vs T1，到 10 点多出去吃饭赶往 108. 坐了一会之后，也没想啥，就这样吧。第三年参加 XCPC 了，虽然第一年只是体验卡，第二年最后几乎没有认真训练光膀子上场，今年总算是认真训练了一次，但是半个多月若干次 vp 都铜了，也就对这次比赛不抱太大希望，当作自己的最后一舞，尽情<del>（随便）</del>玩玩吧。</p><p>发题面时看到 D 题题目名：DRX vs T1. 心想这肯定是几天前随便凑的个签到题。果不其然开了之后队友迅速 A 掉了。<br>然后是 C 题，我也没看，盯着 F 脑子里全是打铁，又想到了去年济南，好像一道过不去的坎。构造，构造，构造。但是对着这个构造题脑子里什么思路都没有。开始在草稿纸上乱画，手工打表，然后开始瞎构造，$n×m$ 的矩阵，先构造 $1×m$ 的，然后想一下能不能由此推出来。构造了一个 $1×m$ 的矩阵 $M$ 之后，先尝试性地把 $M$ 重复画了 $n$ 遍，发现答案竟然没有变化！这一构造的充分性已经有了，于是就考虑必要性。手算了各种 $n$，$m$ 值有没有答案后发现，在有答案的情况下这样构造是一定能出的。<br>现在还不是很有信心，和队友讨论思路后继续想构造方法，发现可以指考虑 pure，连续一段相同的数字内部才会发生 pure，而跨过这些之后就全部是 mixed. 推了一个模型，好像是个背包？发现知道答案存在后跑背包好像没啥用，否决掉，于是想了个没有证明的贪心。<br>光脚不怕穿鞋的，打铁就打铁吧，不怕翻车，反正从来就没有不翻过，直接上去写贪心，然后居然 1A，第 19 个过 F 题，我们的排名一度来到 rk22，当时激动得手都发抖了久久不能平静。</p><p><img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/image-20221107100126217.png" alt="image-20221107100126217"></p><p>队友去讨论 L 后我看了一会 A 和 I ，但有点集中不了注意力 和 zzj 交流 A 作法后觉得这不就是个 sb 题么。看到过题人不多于是等队友写 L 并推一下 A 的细节。<br>开场大概三个小时时终于把 L 调出来了，上机写 A。然而 A 看起来 sb ，实际也特别 sb，细节巨多不着手写根本发现不了。最后爆掉，没有考虑完各种区间覆盖的情况，终究还是码力不足。<br>虽然 C D F L 对我们来说或许足够但 A 题确实近在眼前。或许还是心气不够，没有继续向前的勇气，或者是满足了（确实也已经特别满足了），最后半小时在发现多个细节调爆后还是半放弃了。看了会榜分析会不会掉出银牌区，想了各种最坏的情况，当然都是杞人忧天。滚榜最终 rank 54，甚至是银中上。不过这里本次题目区分度不够是要背锅的（<br>这对我来说或许算是一个好的结果，然而我终究是个不想当将军的士兵，一直都不敢去想更高的目标。本以为今年又破铜烂铁了，没想到开局还挺顺利的，估计会是今年的最高 rank 了（……功利 flag 先）。直到昨天银牌都是我不太有信心的，却没想到居然是离我从来不敢想象的 Au 最近的一次。<br>对我来说，这是“选对赛区少打两年”，而对别人来说，或许是“题很好，区分度优秀，下次不要再出了”吧（笑う</p><p>题外话：写着写着就发现自己的随笔文笔是越来越差越来越只会流水账了hhh</p>]]></content>
    
    
    <summary type="html">“人这一生，是不太需要别人建议的。不经历过是不会明白的”</summary>
    
    
    
    
    <category term="XCPC" scheme="https://eykenis.github.io/tags/XCPC/"/>
    
  </entry>
  
  <entry>
    <title>近期 Div 1 及多校/VP题解</title>
    <link href="https://eykenis.github.io/2022/08/25/codeforces-div-1s/"/>
    <id>https://eykenis.github.io/2022/08/25/codeforces-div-1s/</id>
    <published>2022-08-25T11:02:07.000Z</published>
    <updated>2023-05-06T02:31:52.464Z</updated>
    
    <content type="html"><![CDATA[<p>第一要务是收心，不要去在意杂事，不担心以后，最后几个月专心做竞赛，不留下遗憾。</p><h1 id="8-25-8-26-Codeforces-Round-767-Div-1"><a href="#8-25-8-26-Codeforces-Round-767-Div-1" class="headerlink" title="8.25~8.26 Codeforces Round #767 (Div. 1)"></a>8.25~8.26 Codeforces Round #767 (Div. 1)</h1><h2 id="1628A-Meximum-Array"><a href="#1628A-Meximum-Array" class="headerlink" title="1628A Meximum Array"></a>1628A Meximum Array</h2><p>对每个位置分别选。要使得字典序最大，那么第一要务是保证当前选的 $MEX$ 尽可能大。然后，相同值之中，我们选最左的那个，以此来保证在选取 $MEX$ 相同的条件下，整个 $b$ 的长度尽可能长。</p><p>于是我们可以用一个队列按顺序存各个数出现的位置，模拟一下保证这两个条件。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson k &lt;&lt; 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson k &lt;&lt; 1 | 1</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> t = <span class="number">1</span>;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        map&lt;<span class="keyword">int</span>, queue&lt;<span class="keyword">int</span>&gt;&gt; pos;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            cin &gt;&gt; a[i];</span><br><span class="line">            pos[a[i]].<span class="built_in">push</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; b;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> st = i;</span><br><span class="line">            <span class="keyword">int</span> mex = <span class="number">-1</span>;</span><br><span class="line">            <span class="comment">// 寻找 mex+1,直到没有.</span></span><br><span class="line">            <span class="keyword">while</span> (!pos[mex + <span class="number">1</span>].<span class="built_in">empty</span>()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (pos[mex + <span class="number">1</span>].<span class="built_in">front</span>() &lt; st) &#123;</span><br><span class="line">                    pos[mex + <span class="number">1</span>].<span class="built_in">pop</span>();</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (pos[mex + <span class="number">1</span>].<span class="built_in">front</span>() &lt;= i) &#123;</span><br><span class="line">                    <span class="keyword">while</span> (!pos[mex + <span class="number">1</span>].<span class="built_in">empty</span>() &amp;&amp; pos[mex + <span class="number">1</span>].<span class="built_in">front</span>() &lt;= i) &#123;</span><br><span class="line">                        pos[mex + <span class="number">1</span>].<span class="built_in">pop</span>();</span><br><span class="line">                    &#125;</span><br><span class="line">                    mex++;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                i = pos[mex + <span class="number">1</span>].<span class="built_in">front</span>();</span><br><span class="line">                pos[mex + <span class="number">1</span>].<span class="built_in">pop</span>();</span><br><span class="line">                mex++;</span><br><span class="line">            &#125;</span><br><span class="line">            b.<span class="built_in">push_back</span>(mex + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; b.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; b.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            cout &lt;&lt; b[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1628B-Peculiar-Movie-Preferences"><a href="#1628B-Peculiar-Movie-Preferences" class="headerlink" title="1628B Peculiar Movie Preferences"></a>1628B Peculiar Movie Preferences</h2><p>水题，每个字符串的长度都小于等于 3，首先单一个字符串自己组成回文的情况先处理掉，然后剩下的情况字符串数量都 $\geq2$.</p><p>假设我们能够造出一个使用的字符串数量为 $x\geq2$ 的回文串，那么最左边和最右边是一定可以构造成一个回文串的。如果最左边最右边长度相等，那么他们拼起来肯定是回文；如果长度不等，一个是 2，一个是 3，那么最前面两个和最后面两个肯定也相等，总长度 5，还是可以构成回文。</p><p>所以只需要对每个串看前面存不存在与他构成回文的串就行啦，字符串哈希或者 <code>map</code> 即可过。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson k &lt;&lt; 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson k &lt;&lt; 1 | 1</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> t = <span class="number">1</span>;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="comment">// 17576 - 780.</span></span><br><span class="line">        <span class="comment">// 规模最多为 2？？？</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        map&lt;string, <span class="keyword">int</span>&gt; mp;</span><br><span class="line">        map&lt;string, <span class="keyword">int</span>&gt; mp32;</span><br><span class="line">        <span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            string s;</span><br><span class="line">            cin &gt;&gt; s;</span><br><span class="line">            <span class="keyword">if</span> (flag) <span class="keyword">continue</span>;</span><br><span class="line">            mp[s]++;</span><br><span class="line">            <span class="keyword">if</span> (s.<span class="built_in">size</span>() == <span class="number">1</span>) &#123;</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (s.<span class="built_in">size</span>() == <span class="number">2</span> &amp;&amp; s[<span class="number">0</span>] == s[<span class="number">1</span>]) &#123;</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (s.<span class="built_in">size</span>() == <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="built_in">reverse</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>());</span><br><span class="line">                <span class="keyword">if</span> (mp.<span class="built_in">count</span>(s) || mp32.<span class="built_in">count</span>(s)) &#123;</span><br><span class="line">                    flag = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (s.<span class="built_in">size</span>() == <span class="number">3</span>) &#123;</span><br><span class="line">                string tmp;</span><br><span class="line">                tmp += s[<span class="number">1</span>];</span><br><span class="line">                tmp += s[<span class="number">2</span>];</span><br><span class="line">                <span class="built_in">reverse</span>(tmp.<span class="built_in">begin</span>(), tmp.<span class="built_in">end</span>());</span><br><span class="line">                <span class="keyword">if</span> (mp.<span class="built_in">count</span>(tmp)) &#123;</span><br><span class="line">                    flag = <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                tmp.<span class="built_in">clear</span>(); tmp += s[<span class="number">0</span>], tmp += s[<span class="number">1</span>];</span><br><span class="line">                mp32[tmp]++;</span><br><span class="line">                <span class="built_in">reverse</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>());</span><br><span class="line">                <span class="keyword">if</span> (mp.<span class="built_in">count</span>(s)) &#123;</span><br><span class="line">                    flag = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; (flag ? <span class="string">&quot;YES&quot;</span> : <span class="string">&quot;NO&quot;</span>) &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1628C-Grid-Xor"><a href="#1628C-Grid-Xor" class="headerlink" title="1628C Grid Xor"></a>1628C Grid Xor</h2><p>纯构造题…尝试了构造各个位置异或次数为奇数的方法，和不同的组合来容斥求答案的思路，越弄越复杂，但是其实很简单就能够造出每个位置被异或一次的方法……</p><p>按各个位置的奇偶性分别去手画几下即可（国际象棋棋盘染色），奇偶性不同的位置是互不影响的。具体可以参考洛谷上的题解。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson k &lt;&lt; 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson k &lt;&lt; 1 | 1</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1005</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> f1[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> f2[maxn][maxn];</span><br><span class="line"><span class="keyword">bool</span> v[maxn][maxn];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> t = <span class="number">1</span>;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">1000</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">1000</span>; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((i + j) &amp; <span class="number">1</span>) &#123;</span><br><span class="line">                f1[i][j] = <span class="number">1</span>, f2[i][j] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> f2[i][j] = <span class="number">1</span>, f1[i][j] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">                cin &gt;&gt; a[i][j];</span><br><span class="line">                v[i][j] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!f1[i][j]) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span> (i &gt; <span class="number">1</span> &amp;&amp; v[i - <span class="number">1</span>][j]) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span> (j &gt; <span class="number">1</span> &amp;&amp; v[i][j - <span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span> (i &lt; n &amp;&amp; v[i + <span class="number">1</span>][j]) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span> (j &lt; n &amp;&amp; v[i][j + <span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">                v[i - <span class="number">1</span>][j] = v[i][j - <span class="number">1</span>] = v[i + <span class="number">1</span>][j] = v[i][j + <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">                ans ^= a[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!f2[i][j]) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span> (i &gt; <span class="number">1</span> &amp;&amp; v[i - <span class="number">1</span>][j]) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span> (j &gt; <span class="number">1</span> &amp;&amp; v[i][j - <span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span> (i &lt; n &amp;&amp; v[i + <span class="number">1</span>][j]) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span> (j &lt; n &amp;&amp; v[i][j + <span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">                v[i - <span class="number">1</span>][j] = v[i][j - <span class="number">1</span>] = v[i + <span class="number">1</span>][j] = v[i][j + <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">                ans ^= a[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1628D1-Game-on-Sum-Easy-Version"><a href="#1628D1-Game-on-Sum-Easy-Version" class="headerlink" title="1628D1 Game on Sum (Easy Version)"></a>1628D1 Game on Sum (Easy Version)</h2><p>由 $2000$ 数据范围很容易想到需要构造一个 $dp$ 状态。设 $dp_{i,j}$ 表示已经选择了 $i$ 个数字，其中 $j$ 次相加的答案。</p><p>但因为存在二元博弈，这个 $dp$ 既不是最大值也不是最小值。考虑单独的每一步：<br>如果 Alice 给的数较大，那么 Bob 将会选择减。但若 Alice 给的数小，那么 Bob 在次数还没加够时可以选择加。因为 Bob 是在 Alice 给数之后选的，他会将答案最小化。</p><p>所以有</p><script type="math/tex; mode=display">dp_{i,j}=\min\{dp_{i-1,j}-x,dp_{i-1,j-1}+x \}</script><p>那么 Alice 现在可以决定 $x$，她会使得答案尽可能大。在和不变的条件下让二者最小值最大，因为显然有 $dp_{i-1,j}\geq dp_{i-1,j-1}$，且差值一定不大于 $k$，所以我们可以选择一个值使得 $dp_{i-1,j}-x=dp_{i-1,j-1}+x=avr$，这样就是最优的选择。</p><p>所以转移方程为</p><script type="math/tex; mode=display">dp_{i,j}=\frac{dp_{i-1,j}+dp_{i-1,j-1}}{2}</script><p>但要注意有个边界条件是不同的，即 $i=j$ 时，因为 Bob 只能选择加，所以 Alice 会最大化答案为 $ik$.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson k &lt;&lt; 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson k &lt;&lt; 1 | 1</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> dp[maxn][maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fpow</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (k) &#123;</span><br><span class="line">        <span class="keyword">if</span> (k &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            ans = (ans * x) % mod;</span><br><span class="line">        &#125;</span><br><span class="line">        x = (x * x) % mod;</span><br><span class="line">        k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">inv</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">fpow</span>(x, mod - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> t = <span class="number">1</span>;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">int</span> i2 = <span class="built_in">inv</span>(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n, m, k;</span><br><span class="line">        cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            dp[i][i] = i * k % mod;</span><br><span class="line">        &#125;</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == j) <span class="keyword">continue</span>;</span><br><span class="line">                dp[i][j] = ((dp[i - <span class="number">1</span>][j] + dp[i - <span class="number">1</span>][j - <span class="number">1</span>]) * i2) % mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; dp[n][m] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1628D2-Game-on-Sum-Hard-Version"><a href="#1628D2-Game-on-Sum-Hard-Version" class="headerlink" title="1628D2 Game on Sum (Hard Version)"></a>1628D2 Game on Sum (Hard Version)</h2><p>范围扩大，由 D1 解法可知答案只与 $k$ 有关，故我们应该时可以找到一个公式的。</p><p>考虑各个 $dp$ 值对 $dp_{n,m}$ 的贡献，每个 $dp$ 值理应包括：</p><p>若干个 $dp_{1,1}$ 及其 $\frac{1}{2^x}$ 倍，若干个 $dp_{2,2}$ 及其 $\frac{1}{2^x}$ 倍……所有的 $dp$ 值都可以只通过 $dp_{i,i}$ 的贡献推出来。</p><p>那么 $dp_{i,i}$ 对 $dp_{n,m}$ 的贡献，每个来自 $dp_{i,i}$ 的分贡献一定是走的不同的路径，从 $dp_{i,i}$ 走到 $dp_{n,m}$，路径不同，长度相同，所以最后的分贡献值都一样。这是经典的走楼梯组合问题，走法为 $C_{n-i-1}^{m-i}$，每次都贡献了 $\frac{dp_{i,i}}{2^{n-i}}$. 全部求和即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson k &lt;&lt; 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson k &lt;&lt; 1 | 1</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> f[maxn];</span><br><span class="line"><span class="keyword">int</span> pi[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fpow</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (k) &#123;</span><br><span class="line">        <span class="keyword">if</span> (k &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            ans = (ans * x) % mod;</span><br><span class="line">        &#125;</span><br><span class="line">        x = (x * x) % mod;</span><br><span class="line">        k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">inv</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">fpow</span>(x, mod - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pre</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    pi[<span class="number">0</span>] = pi[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        pi[i] = (pi[i - <span class="number">1</span>] * i) % mod;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">C</span><span class="params">(<span class="keyword">int</span> n ,<span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ((pi[n] * <span class="built_in">inv</span>(pi[m]) % mod) * <span class="built_in">inv</span>(pi[n - m])) % mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">pre</span>(maxn - <span class="number">5</span>);</span><br><span class="line">    <span class="keyword">int</span> t = <span class="number">1</span>;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n, m, k;</span><br><span class="line">        cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line">        <span class="keyword">if</span> (m == <span class="number">1</span>) &#123;</span><br><span class="line">            cout &lt;&lt; (<span class="built_in">inv</span>(<span class="built_in">fpow</span>(<span class="number">2</span>, n - <span class="number">1</span>)) * k) % mod &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (n == m) &#123;</span><br><span class="line">            cout &lt;&lt; m * k % mod &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (m == <span class="number">0</span>) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="number">0</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> x = <span class="built_in">C</span>(n - i - <span class="number">1</span>, m - i);</span><br><span class="line">            <span class="keyword">int</span> y = <span class="built_in">fpow</span>(<span class="built_in">inv</span>(<span class="number">2</span>), n - i);</span><br><span class="line">            ans = (ans + (i * ((x * y) % mod)) % mod) % mod;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; ans * k % mod &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="8-27-8-28-吉林省赛复现"><a href="#8-27-8-28-吉林省赛复现" class="headerlink" title="8.27~8.28 吉林省赛复现"></a>8.27~8.28 吉林省赛复现</h1><p>四天三个训练赛，多补补题吧。</p><h2 id="The-15th-Jilin-Provincial-Collegiate-Programming-Contest-I-Nim-Game"><a href="#The-15th-Jilin-Provincial-Collegiate-Programming-Contest-I-Nim-Game" class="headerlink" title="The 15th Jilin Provincial Collegiate Programming Contest I. Nim Game"></a>The 15th Jilin Provincial Collegiate Programming Contest I. Nim Game</h2><p>复习 Nim 博弈，其条件是集合各数异或和为 0 即必败，否则必胜。</p><p>那么嘉然小姐想要赢，必定是集合中存在一个子集，其异或和为 0.</p><p>我们可以用线性基来判断。每次将一个数加入线性基，如果加入时更新了 $a_0$，说明现在有异或和为 0 且非空的子集了。又因为位数不会超过 $32$，所以当至少有 $32$ 个数时，线性基一定会更新到 $a_0$，一定存在一个异或和为 0 的子集，不用判断。小于 $32$ 的暴力判断即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson k &lt;&lt; 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson k &lt;&lt; 1 | 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(3)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r, sum, tag;</span><br><span class="line">&#125;a[maxn &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> num[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    a[k].sum = a[lson].sum + a[rson].sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    a[k].l = l, a[k].r = r;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        a[k].l = l, a[k].r = r;</span><br><span class="line">        a[k].sum = num[l];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(lson, l, mid);</span><br><span class="line">    <span class="built_in">build</span>(rson, mid + <span class="number">1</span>, r);</span><br><span class="line">    <span class="built_in">pushup</span>(k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!a[k].tag) <span class="keyword">return</span>;</span><br><span class="line">    a[lson].sum += a[k].tag * (a[lson].r - a[lson].l + <span class="number">1</span>);</span><br><span class="line">    a[lson].tag += a[k].tag;</span><br><span class="line">    a[rson].sum += a[k].tag * (a[rson].r - a[rson].l + <span class="number">1</span>);</span><br><span class="line">    a[rson].tag += a[k].tag;</span><br><span class="line">    a[k].tag = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a[k].l &gt; r || a[k].r &lt; l) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (a[k].l &gt;= l &amp;&amp; a[k].r &lt;= r) &#123;</span><br><span class="line">        a[k].sum += x * (a[k].r - a[k].l + <span class="number">1</span>);</span><br><span class="line">        a[k].tag += x;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pushdown</span>(k);</span><br><span class="line">    <span class="built_in">add</span>(lson, l, r, x);</span><br><span class="line">    <span class="built_in">add</span>(rson, l, r, x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> b[<span class="number">33</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">32</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!(x &amp; (<span class="number">1</span> &lt;&lt; i))) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (!b[i]) &#123;</span><br><span class="line">            b[i] = x;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        x ^= b[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a[k].l &gt; x || a[k].r &lt; x) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (a[k].l == a[k].r &amp;&amp; a[k].l == x) <span class="keyword">return</span> a[k].sum;</span><br><span class="line">    <span class="built_in">pushdown</span>(k);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">query</span>(lson, x) + <span class="built_in">query</span>(rson, x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) cin &gt;&gt; num[i];</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> op, l, r, x;</span><br><span class="line">        cin &gt;&gt; op &gt;&gt; l &gt;&gt; r;</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">1</span>) &#123;</span><br><span class="line">            cin &gt;&gt; x;</span><br><span class="line">            <span class="built_in">add</span>(<span class="number">1</span>, l, r, x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (r - l + <span class="number">1</span> &gt;= <span class="number">33</span>) &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;Yes&quot;</span> &lt;&lt; endl;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">bool</span> flag = <span class="number">1</span>;</span><br><span class="line">                <span class="built_in">memset</span>(b, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(b));</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= r; ++i) &#123;</span><br><span class="line">                    <span class="keyword">int</span> y = <span class="built_in">query</span>(<span class="number">1</span>, i);</span><br><span class="line">                    y = <span class="built_in">insert</span>(y);</span><br><span class="line">                    <span class="keyword">if</span> (!y) &#123;</span><br><span class="line">                        flag = <span class="number">0</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                cout &lt;&lt; (flag ? <span class="string">&quot;No&quot;</span> : <span class="string">&quot;Yes&quot;</span>) &lt;&lt; endl;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="8-29-8-30-Educational-Codeforces-Round-134"><a href="#8-29-8-30-Educational-Codeforces-Round-134" class="headerlink" title="8.29~8.30 Educational Codeforces Round 134"></a>8.29~8.30 Educational Codeforces Round 134</h1><h2 id="1721D-Maximum-AND"><a href="#1721D-Maximum-AND" class="headerlink" title="1721D Maximum AND"></a>1721D Maximum AND</h2><p>贪心，优先保证高位能异或为 1.</p><p>为了 $a,b$ 异或为1，我们将 $a,b$ 分组。假设现在考虑到了第 $i$ 位，那么 $a$ 中第 $i$ 位为 1 的和 $b$ 中第 $i$ 位为 0 的分一组，反之亦然。如果分完组后，$a_i=1$ 和 $b_i=0$ 的数个数是相同的，说明这个分组是有效的，不会出现多余的数，于是我们分组继续下去就可以。如果出现了分不齐的情况，就说明在保证某几个高位能够达到 $1$ 的条件下，我们是无法保证这一位为 1 的，所以不进行分组，直接判断下一位。</p><p>（场上没有注意将大小为 0 的分组剔除，导致 vector 爆了，还不知道错在哪）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">int</span> xx;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pvv</span> &#123;</span></span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; a, b;</span><br><span class="line">&#125;;</span><br><span class="line">vector&lt;pvv&gt; v, tmp;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        xx = <span class="number">0x7fffffff</span>;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; a, b;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> x;</span><br><span class="line">            cin &gt;&gt; x;</span><br><span class="line">            a.<span class="built_in">push_back</span>(x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> x;</span><br><span class="line">            cin &gt;&gt; x;</span><br><span class="line">            b.<span class="built_in">push_back</span>(x);</span><br><span class="line">        &#125;</span><br><span class="line">        v.<span class="built_in">push_back</span>(&#123;a, b&#125;);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">30</span>; j &gt;= <span class="number">0</span>; --j) &#123;</span><br><span class="line">            tmp.<span class="built_in">clear</span>();</span><br><span class="line">            <span class="keyword">bool</span> flag = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">                pvv a0b1, a1b0;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; v[i].a.<span class="built_in">size</span>(); ++k) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (v[i].a[k] &amp; (<span class="number">1</span> &lt;&lt; j)) a1b0.a.<span class="built_in">push_back</span>(v[i].a[k]);</span><br><span class="line">                    <span class="keyword">else</span> a0b1.a.<span class="built_in">push_back</span>(v[i].a[k]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; v[i].b.<span class="built_in">size</span>(); ++k) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (v[i].b[k] &amp; (<span class="number">1</span> &lt;&lt; j)) a0b1.b.<span class="built_in">push_back</span>(v[i].b[k]);</span><br><span class="line">                    <span class="keyword">else</span> a1b0.b.<span class="built_in">push_back</span>(v[i].b[k]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (a0b1.a.<span class="built_in">size</span>() == a0b1.b.<span class="built_in">size</span>()) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!a0b1.a.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">                        tmp.<span class="built_in">push_back</span>(a0b1);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (!a1b0.a.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">                        tmp.<span class="built_in">push_back</span>(a1b0);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    xx -= (<span class="number">1</span> &lt;&lt; j);</span><br><span class="line">                    flag = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (flag)</span><br><span class="line">                v = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; xx &lt;&lt; endl;</span><br><span class="line">        v.<span class="built_in">clear</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="8-31-9-1-Codeforces-Round-698-Div-1"><a href="#8-31-9-1-Codeforces-Round-698-Div-1" class="headerlink" title="8.31~9.1 Codeforces Round #698 (Div. 1)"></a>8.31~9.1 Codeforces Round #698 (Div. 1)</h1><h2 id="A-Nezzar-and-Board"><a href="#A-Nezzar-and-Board" class="headerlink" title="A. Nezzar and Board"></a>A. Nezzar and Board</h2><p>把所有的数放在数轴上，可以发现任取两个数，通过不断地往集合中加 $2x-y$，最后得到的数的间隔不会大于 $|x-y|$.</p><p>所以通过这两个数能构造出所有以 $x$ 或者 $y$ 为某项，公差为 $\gcd(x,y)$ 的等差数列。</p><p>扩展到所有元素可知，所有元素构造出来的应该是以某个 $a_i$ 为首项，公差为 $\gcd(a_1,a_2,…,a_n)$ 的等差数列。</p><p>先求出 $g=\gcd(a_1,a_2,…,a_n)$，然后枚举各个 $a_i$，看是否 $(k-a_i)\%g=0$.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">// #pragma GCC optimize(3)</span></span><br><span class="line"><span class="comment">// #define endl &#x27;\n&#x27;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson k &lt;&lt; 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson k &lt;&lt; 1 | 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="comment">// k = 2x - y</span></span><br><span class="line">        <span class="comment">// 2(x1a1 + x2a2 + ... + xnan) - (y1a1 + y2a2 + ...)</span></span><br><span class="line">        <span class="comment">// = (2x1 - y1)a1 + (2x2 - y2)a2 + ...</span></span><br><span class="line">        <span class="comment">// x + d = k --&gt; d = m * |x - y|.</span></span><br><span class="line">        <span class="comment">// k - x = d = m * |x - y|</span></span><br><span class="line">        <span class="comment">// (k - x) % |x - y| = 0</span></span><br><span class="line">        <span class="comment">// x, y 从集合中任取。</span></span><br><span class="line">        <span class="comment">// 存在整数列使得 k - ax = x1(a1 - a2) + x2(a2 - a3) + ... + x_&#123;n-1&#125;(a_&#123;n-1&#125; - an)</span></span><br><span class="line">        <span class="comment">// xi \in integer</span></span><br><span class="line">        <span class="comment">// 存在互质的数时一定yes... --&gt; gcd = 1</span></span><br><span class="line">        <span class="keyword">int</span> n, k;</span><br><span class="line">        cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            cin &gt;&gt; a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> g = a[<span class="number">2</span>] - a[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            g = __gcd(a[i] - a[i - <span class="number">1</span>], g);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((k - a[i]) % g == <span class="number">0</span>) &#123;</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; (flag ? <span class="string">&quot;YES&quot;</span> : <span class="string">&quot;NO&quot;</span>) &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Nezzar-and-Binary-String"><a href="#B-Nezzar-and-Binary-String" class="headerlink" title="B. Nezzar and Binary String"></a>B. Nezzar and Binary String</h2><p>意外的简单题，但是卡壳了一会。</p><p>只要逆向考虑就能发现，因为每次操作都是要求 <strong>strictly less</strong> than half of the characters，所以其实倒过来的修改是固定，没有选择的。一开始没注意严格更少，还想了一会二者相等的情况。。</p><p>所以逆向考虑，操作用线段树维护即可，遇到数量相等的情况直接 <code>break</code> 输出 $NO$，最后 $n\log n$ 判断一下最终得到的字符串，再比较一下。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">// #pragma GCC optimize(3)</span></span><br><span class="line"><span class="comment">// #define endl &#x27;\n&#x27;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson k &lt;&lt; 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson k &lt;&lt; 1 | 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> ql[maxn], qr[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r;</span><br><span class="line">    <span class="keyword">int</span> cnt0, cnt1;</span><br><span class="line">    <span class="keyword">int</span> tag;</span><br><span class="line">&#125;a[maxn &lt;&lt; <span class="number">2</span>];</span><br><span class="line">string s, f;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    a[k].cnt0 = a[lson].cnt0 +a[rson].cnt0;</span><br><span class="line">    a[k].cnt1 = a[lson].cnt1 + a[rson].cnt1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    a[k].l = l, a[k].r = r;</span><br><span class="line">    a[k].tag = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        <span class="keyword">if</span> (f[l] == <span class="string">&#x27;0&#x27;</span>) a[k].cnt0 = <span class="number">1</span>, a[k].cnt1 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> a[k].cnt1 = <span class="number">1</span>, a[k].cnt0 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(lson, l, mid);</span><br><span class="line">    <span class="built_in">build</span>(rson, mid + <span class="number">1</span>, r);</span><br><span class="line">    <span class="built_in">pushup</span>(k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a[k].tag == <span class="number">-1</span>) <span class="keyword">return</span>;</span><br><span class="line">    a[lson].cnt0 = (a[lson].r - a[lson].l + <span class="number">1</span>) * (!a[k].tag);</span><br><span class="line">    a[rson].cnt0 = (a[rson].r - a[rson].l + <span class="number">1</span>) * (!a[k].tag);</span><br><span class="line">    a[lson].cnt1 = (a[lson].r - a[lson].l + <span class="number">1</span>) * a[k].tag;</span><br><span class="line">    a[rson].cnt1 = (a[rson].r - a[rson].l + <span class="number">1</span>) * a[k].tag;</span><br><span class="line">    a[lson].tag = a[rson].tag = a[k].tag;</span><br><span class="line">    a[k].tag = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a[k].l &gt; r || a[k].r &lt; l) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (a[k].l &gt;= l &amp;&amp; a[k].r &lt;= r) &#123;</span><br><span class="line">        <span class="keyword">if</span> (x) &#123;</span><br><span class="line">            a[k].tag = <span class="number">1</span>;</span><br><span class="line">            a[k].cnt1 = a[k].r - a[k].l + <span class="number">1</span>;</span><br><span class="line">            a[k].cnt0 = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            a[k].tag = <span class="number">0</span>;</span><br><span class="line">            a[k].cnt0 = a[k].r - a[k].l + <span class="number">1</span>;</span><br><span class="line">            a[k].cnt1 = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pushdown</span>(k);</span><br><span class="line">    <span class="built_in">change</span>(lson, l, r, x);</span><br><span class="line">    <span class="built_in">change</span>(rson, l, r, x);</span><br><span class="line">    <span class="built_in">pushup</span>(k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query0</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a[k].l  &gt; r || a[k].r &lt; l) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (a[k].l &gt;= l &amp;&amp; a[k].r &lt;= r) <span class="keyword">return</span> a[k].cnt0;</span><br><span class="line">    <span class="built_in">pushdown</span>(k);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">query0</span>(lson, l, r) + <span class="built_in">query0</span>(rson, l, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query1</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a[k].l  &gt; r || a[k].r &lt; l) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (a[k].l &gt;= l &amp;&amp; a[k].r &lt;= r) <span class="keyword">return</span> a[k].cnt1;</span><br><span class="line">    <span class="built_in">pushdown</span>(k);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">query1</span>(lson, l, r) + <span class="built_in">query1</span>(rson, l, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n, q;</span><br><span class="line">        cin &gt;&gt; n &gt;&gt; q;</span><br><span class="line">        cin &gt;&gt; s &gt;&gt; f;</span><br><span class="line">        s = <span class="string">&#x27;X&#x27;</span> + s, f = <span class="string">&#x27;X&#x27;</span> + f;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= q; ++i) &#123;</span><br><span class="line">            cin &gt;&gt; ql[i] &gt;&gt; qr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">        <span class="keyword">bool</span> flag = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = q; i &gt;= <span class="number">1</span>; --i) &#123;</span><br><span class="line">            <span class="keyword">int</span> cnt0 = <span class="built_in">query0</span>(<span class="number">1</span>, ql[i], qr[i]);</span><br><span class="line">            <span class="keyword">int</span> cnt1 =  <span class="built_in">query1</span>(<span class="number">1</span>, ql[i], qr[i]);</span><br><span class="line">            <span class="keyword">if</span> (cnt0 == <span class="number">0</span> || cnt1 == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (cnt0 == cnt1) &#123;</span><br><span class="line">                flag = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (cnt0 &lt; cnt1) &#123;</span><br><span class="line">                <span class="built_in">change</span>(<span class="number">1</span>, ql[i], qr[i], <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">change</span>(<span class="number">1</span>, ql[i], qr[i], <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        string x;</span><br><span class="line">        x += <span class="string">&quot;X&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> c = <span class="built_in">query0</span>(<span class="number">1</span>, i, i);</span><br><span class="line">            <span class="keyword">if</span> (c) x += <span class="string">&quot;0&quot;</span>;</span><br><span class="line">            <span class="keyword">else</span> x += <span class="string">&quot;1&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (x != s) flag = <span class="number">0</span>;</span><br><span class="line">        cout &lt;&lt; (flag ? <span class="string">&quot;YES&quot;</span> : <span class="string">&quot;NO&quot;</span>) &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Nezzar-and-Nice-Beatmap"><a href="#C-Nezzar-and-Nice-Beatmap" class="headerlink" title="C. Nezzar and Nice Beatmap"></a>C. Nezzar and Nice Beatmap</h2><p>我还手画有没有不可能的情况呢，一直画不出来。</p><p>结果题解给了一个非常简洁优雅的方法：每次选取未加入点中距离最远的点连起来。</p><p>于是就保证每个角都是锐角……太强了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">// #pragma GCC optimize(3)</span></span><br><span class="line"><span class="comment">// #define endl &#x27;\n&#x27;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson k &lt;&lt; 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson k &lt;&lt; 1 | 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dis</span><span class="params">(point p1, point p2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (p1.x - p2.x) * (p1.x - p2.x) + (p1.y - p2.y) * (p1.y - p2.y);</span><br><span class="line">&#125;</span><br><span class="line">vector&lt;point&gt; v1, v2;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    t = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        v1.<span class="built_in">clear</span>();</span><br><span class="line">        v1.<span class="built_in">resize</span>(n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            cin &gt;&gt; v1[i].x &gt;&gt; v1[i].y;</span><br><span class="line">            v1[i].id = i + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">            cout &lt;&lt; v1[<span class="number">0</span>].id &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">            v2 = v1;</span><br><span class="line">            <span class="keyword">int</span> mxi = <span class="number">1</span>, mxd = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (v1.<span class="built_in">size</span>() == <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; v2.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">                <span class="keyword">int</span> d = <span class="built_in">dis</span>(v2[<span class="number">0</span>], v2[i]);</span><br><span class="line">                <span class="keyword">if</span> (d &gt; mxd) &#123;</span><br><span class="line">                    mxi = i, mxd = d;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            v1.<span class="built_in">clear</span>();</span><br><span class="line">            v1.<span class="built_in">push_back</span>(v2[mxi]);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; v2.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == mxi) <span class="keyword">continue</span>;</span><br><span class="line">                v1.<span class="built_in">push_back</span>(v2[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2022“杭电杯”中国大学生算法设计超级联赛（9）1008-Shortest-Path-in-GCD-Graph"><a href="#2022“杭电杯”中国大学生算法设计超级联赛（9）1008-Shortest-Path-in-GCD-Graph" class="headerlink" title="2022“杭电杯”中国大学生算法设计超级联赛（9）1008 Shortest Path in GCD Graph"></a>2022“杭电杯”中国大学生算法设计超级联赛（9）1008 Shortest Path in GCD Graph</h2><ol><li><p>任何两点间的距离都不大于 $2$，因为 $\gcd(1,i)=1$. 故答案只能是 $1$ 或者 $2$.</p></li><li><p>对于 $a,b$ 的距离，若 $\gcd(a,b)&gt;1$，问题等价于找到满足 $\gcd(a,i)=1,\gcd(b,j)=1$ 的 $i,j$ 数量。</p></li><li>对于 $n\leq10^7$ 条件，任何数的素因子数量都不会超过 $15$ 个（大概 $12$ 个左右）。可以先筛出 $a$ 和 $b$ 的所有素因子，然后计算它们在 $[1,n]$ 内整除的数，再用总数减去即可。</li><li>要求 $a,b$ 的素因子在 $[1,n]$ 内整除的数。假设素因子是 $\{x_1,x_2,…,x_m\}$，例如 $x_1$ 在范围内的倍数有 $\lfloor \frac{n}{x_1} \rfloor$ 个，然后再算 $x_2,x_3,…$ 的，这里 $x_1,x_2$ 的倍数肯定有重合的部分，发现这是一个容斥模型，于是可以二进制枚举容斥，这样单次询问复杂度上限就是 $O(2^{12})$.</li></ol><p><strong>std 的容斥模板是好的（</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(3)</span></span><br><span class="line"><span class="comment">// #define endl &#x27;\n&#x27;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// #define int long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e7</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> st[maxn], primes[maxn / <span class="number">10</span>], f[maxn];</span><br><span class="line"><span class="keyword">int</span> n, q;</span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ola</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (st[i] == <span class="number">0</span>) primes[++cnt] = i, f[i] = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; primes[j] &lt;= n / i; ++j) &#123;</span><br><span class="line">            st[primes[j] * i] = <span class="number">1</span>;</span><br><span class="line">            f[primes[j] * i] = primes[j];</span><br><span class="line">            <span class="keyword">if</span> (i % primes[j] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">set&lt;<span class="keyword">int</span>&gt; myset;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; vec;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (x &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> y = f[x];</span><br><span class="line">        myset.<span class="built_in">insert</span>(y);</span><br><span class="line">        <span class="keyword">while</span> (x % y == <span class="number">0</span>) x /= y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> s, <span class="keyword">int</span> o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s &gt; n) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (x == vec.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        ans += o * (n / s);</span><br><span class="line">        <span class="comment">// ans = (ans + mod) % mod;</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(x + <span class="number">1</span>, s, o);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不可写成乘法. 因为取个数就是要向下取整，不能不舍去.</span></span><br><span class="line">    <span class="keyword">if</span> (s &lt;= n / vec[x]) <span class="built_in">dfs</span>(x + <span class="number">1</span>, s * vec[x], -o);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    myset.<span class="built_in">clear</span>(); vec.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="built_in">add</span>(x), <span class="built_in">add</span>(y);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;xx : myset) vec.<span class="built_in">push_back</span>(xx);</span><br><span class="line">    ans = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">// freopen(&quot;1008.in&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;1008.out&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="comment">// cin &gt;&gt; t;</span></span><br><span class="line">    t = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        cin &gt;&gt; n &gt;&gt; q;</span><br><span class="line">        <span class="built_in">ola</span>(n + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= q; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> u, v;</span><br><span class="line">            cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">            <span class="keyword">if</span> (__gcd(u, v) == <span class="number">1</span>) &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;1 1&quot;</span> &lt;&lt; endl;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">solve</span>(u, v);</span><br><span class="line">            <span class="keyword">if</span> (__gcd(u, v) == <span class="number">2</span>) ans++;</span><br><span class="line">            cout &lt;&lt; <span class="number">2</span> &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="9-2-9-15"><a href="#9-2-9-15" class="headerlink" title="9.2~9.15"></a>9.2~9.15</h1><p>记忆丢失……这段时间补的题懒，没写题解</p><p>（其实是因为没 vp div. 1）</p><h2 id="CCPC网络赛-H-Multiple-Set"><a href="#CCPC网络赛-H-Multiple-Set" class="headerlink" title="CCPC网络赛 H. Multiple Set"></a>CCPC网络赛 H. Multiple Set</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">// #pragma GCC optimize(3)</span></span><br><span class="line"><span class="comment">// #define endl &#x27;\n&#x27;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int __int128</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e7</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> L, R, K;</span><br><span class="line"><span class="keyword">int</span> st[N], primes[N / <span class="number">4</span>], f[N], cnt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ola</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (st[i] == <span class="number">0</span>) primes[cnt++] = i, f[i] = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; primes[j] &lt;= n / i; ++j) &#123;</span><br><span class="line">            st[primes[j] * i] = <span class="number">1</span>;</span><br><span class="line">            f[primes[j] * i] = i;</span><br><span class="line">            <span class="keyword">if</span> (i % primes[j] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">set&lt;<span class="keyword">int</span>&gt; fac;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; vec;</span><br><span class="line"><span class="keyword">bool</span> vis[N / <span class="number">4</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fj</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    fac.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cnt; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; primes[i]) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span> (x % primes[i] == <span class="number">0</span>) &#123;</span><br><span class="line">            fac.<span class="built_in">insert</span>(primes[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (x % primes[i] == <span class="number">0</span>) x /= primes[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">1</span>) fac.<span class="built_in">insert</span>(x);</span><br><span class="line">    vec.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;e : fac) &#123;</span><br><span class="line">        vec.<span class="built_in">push_back</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(vis));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fpow</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (k) &#123;</span><br><span class="line">        <span class="keyword">if</span> (k &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            ans = ans * x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ans &gt; K) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        x = x * x;</span><br><span class="line">        k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> prod, <span class="keyword">int</span> n, <span class="keyword">int</span> lp, <span class="keyword">bool</span> z)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l = (L / prod) + (L % prod &gt; <span class="number">0</span>), r = R / prod;</span><br><span class="line">    <span class="keyword">int</span> fp = <span class="built_in">fpow</span>(<span class="number">2</span>, r - l);</span><br><span class="line">    <span class="keyword">if</span> (fp &gt; <span class="number">0</span> &amp;&amp; z &amp;&amp; K == fp * (l + r) * (r - l + <span class="number">1</span>) * prod / <span class="number">2</span>) ans++, res.<span class="built_in">push_back</span>(prod);</span><br><span class="line">    <span class="keyword">if</span> (lp &gt;= vec.<span class="built_in">size</span>()) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">dfs</span>(prod, n, lp + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; prod * vec[lp] &lt;= K; ++i) &#123;</span><br><span class="line">        prod *= vec[lp];</span><br><span class="line">        <span class="built_in">dfs</span>(prod, n + <span class="number">1</span>, lp + <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">signed</span> t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="built_in">ola</span>(<span class="number">1e7</span> + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> LL, RR, KK;</span><br><span class="line">        cin &gt;&gt; LL &gt;&gt; RR &gt;&gt; KK;</span><br><span class="line">        L = LL, R = RR, K = KK;</span><br><span class="line">        ans = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">fj</span>(K);</span><br><span class="line">        res.<span class="built_in">clear</span>();</span><br><span class="line">        <span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (res.<span class="built_in">size</span>() == <span class="number">0</span>) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;No Solution&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (res.<span class="built_in">size</span>() &gt; <span class="number">1e5</span>) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;Too Many!&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; (<span class="keyword">long</span> <span class="keyword">long</span>)ans &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">sort</span>(res.<span class="built_in">begin</span>(), res.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : res) cout &lt;&lt; (<span class="keyword">long</span> <span class="keyword">long</span>)x &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="9-16-9-17"><a href="#9-16-9-17" class="headerlink" title="9.16~9.17"></a>9.16~9.17</h1><h2 id="【模板】普通平衡树（数据加强版）-（替罪羊树实现）"><a href="#【模板】普通平衡树（数据加强版）-（替罪羊树实现）" class="headerlink" title="【模板】普通平衡树（数据加强版） （替罪羊树实现）"></a>【模板】普通平衡树（数据加强版） （替罪羊树实现）</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e7</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> alpha = <span class="number">0.7</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> ch[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line"><span class="keyword">int</span> val;</span><br><span class="line"><span class="keyword">int</span> sz;</span><br><span class="line">&#125;tree[maxn];</span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">tree[x].sz = tree[tree[x].ch[<span class="number">0</span>]].sz + tree[tree[x].ch[<span class="number">1</span>]].sz + tree[x].cnt;</span><br><span class="line">&#125;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; fp, fn, fv;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">flat</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (tree[p].ch[<span class="number">0</span>]) &#123;</span><br><span class="line"><span class="built_in">flat</span>(tree[p].ch[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> id = fp.<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">if</span> (tree[p].cnt) &#123;</span><br><span class="line">fp.<span class="built_in">push_back</span>(p);</span><br><span class="line">fv.<span class="built_in">push_back</span>(tree[p].val);</span><br><span class="line">fn.<span class="built_in">push_back</span>(tree[p].cnt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (tree[p].ch[<span class="number">1</span>]) &#123;</span><br><span class="line"><span class="built_in">flat</span>(tree[p].ch[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rebuild</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> l = <span class="number">0</span>, <span class="keyword">int</span> r = fp.size() - <span class="number">1</span>)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (l &lt; mid) &#123;</span><br><span class="line">tree[p].ch[<span class="number">0</span>] = fp[(l + mid - <span class="number">1</span>) &gt;&gt; <span class="number">1</span>];</span><br><span class="line"><span class="built_in">rebuild</span>(tree[p].ch[<span class="number">0</span>], l, mid - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> tree[p].ch[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (mid &lt; r) &#123;</span><br><span class="line">tree[p].ch[<span class="number">1</span>] = fp[(mid + <span class="number">1</span> + r) &gt;&gt; <span class="number">1</span>];</span><br><span class="line"><span class="built_in">rebuild</span>(tree[p].ch[<span class="number">1</span>], mid + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> tree[p].ch[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">tree[p].cnt = fn[mid];</span><br><span class="line">tree[p].val = fv[mid];</span><br><span class="line"><span class="built_in">pushup</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">check_and_rebuild</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line"><span class="built_in">pushup</span>(p);</span><br><span class="line"><span class="keyword">double</span> lchp = <span class="number">1.</span> * tree[tree[p].ch[<span class="number">0</span>]].sz / tree[p].sz;</span><br><span class="line"><span class="keyword">if</span> (lchp &gt; alpha || lchp &lt; <span class="number">1</span> - alpha) &#123;</span><br><span class="line">fp.<span class="built_in">clear</span>(), fv.<span class="built_in">clear</span>(), fn.<span class="built_in">clear</span>();</span><br><span class="line"><span class="keyword">int</span> id = <span class="built_in">flat</span>(p);</span><br><span class="line"><span class="built_in">swap</span>(fp[id], fp[(fp.<span class="built_in">size</span>() - <span class="number">1</span>) / <span class="number">2</span>]);</span><br><span class="line"><span class="built_in">rebuild</span>(p);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> __insert(<span class="keyword">int</span> x, <span class="keyword">int</span> p, <span class="keyword">int</span> f, <span class="keyword">bool</span> which) &#123;</span><br><span class="line"><span class="keyword">if</span> (!p) &#123;</span><br><span class="line">p = tree[f].ch[which] = ++cnt;</span><br><span class="line">tree[p].val = x;</span><br><span class="line">tree[p].sz = tree[p].cnt = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">check_and_rebuild</span>(p);</span><br><span class="line"><span class="keyword">if</span> (x == tree[p].val) &#123;</span><br><span class="line">tree[p].cnt++;</span><br><span class="line">tree[p].sz++;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (x &lt; tree[p].val) &#123;</span><br><span class="line">__insert(x, tree[p].ch[<span class="number">0</span>], p, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (x &gt; tree[p].val) &#123;</span><br><span class="line">__insert(x, tree[p].ch[<span class="number">1</span>], p, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushup</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!cnt) &#123;</span><br><span class="line">tree[++cnt].cnt = <span class="number">1</span>;</span><br><span class="line">tree[cnt].val = x;</span><br><span class="line">tree[cnt].sz = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">__insert(x, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> __remove(<span class="keyword">int</span> x, <span class="keyword">int</span> p, <span class="keyword">int</span> f, <span class="keyword">bool</span> which) &#123;</span><br><span class="line"><span class="built_in">check_and_rebuild</span>(p);</span><br><span class="line"><span class="keyword">if</span> (x &lt; tree[p].val) &#123;</span><br><span class="line">__remove(x, tree[p].ch[<span class="number">0</span>], p, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (x &gt; tree[p].val) &#123;</span><br><span class="line">__remove(x, tree[p].ch[<span class="number">1</span>], p, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">tree[p].cnt--;</span><br><span class="line">tree[p].sz--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushup</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="comment">// guarantee it exists</span></span><br><span class="line"><span class="keyword">if</span> (tree[<span class="number">1</span>].val == x) &#123;</span><br><span class="line">tree[<span class="number">1</span>].cnt--;</span><br><span class="line">tree[<span class="number">1</span>].sz--;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">__remove(x, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">countl</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x &lt; tree[p].val) &#123;</span><br><span class="line"><span class="keyword">return</span> tree[p].ch[<span class="number">0</span>] ? <span class="built_in">countl</span>(x, tree[p].ch[<span class="number">0</span>]) : <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (x &gt; tree[p].val) <span class="keyword">return</span> tree[tree[p].ch[<span class="number">0</span>]].sz + tree[p].cnt + (tree[p].ch[<span class="number">1</span>] ? <span class="built_in">countl</span>(x, tree[p].ch[<span class="number">1</span>]) : <span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> tree[tree[p].ch[<span class="number">0</span>]].sz;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">countg</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x &gt; tree[p].val) &#123;</span><br><span class="line"><span class="keyword">return</span> tree[p].ch[<span class="number">1</span>] ? <span class="built_in">countg</span>(x, tree[p].ch[<span class="number">1</span>]) : <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (x &lt; tree[p].val) <span class="keyword">return</span> tree[tree[p].ch[<span class="number">1</span>]].sz + tree[p].cnt + (tree[p].ch[<span class="number">0</span>] ? <span class="built_in">countg</span>(x, tree[p].ch[<span class="number">0</span>]) : <span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> tree[tree[p].ch[<span class="number">1</span>]].sz;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rk</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">countl</span>(x, <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> __kth(<span class="keyword">int</span> k, <span class="keyword">int</span> p) &#123;</span><br><span class="line"><span class="keyword">if</span> (tree[tree[p].ch[<span class="number">0</span>]].sz &gt;= k) &#123;</span><br><span class="line"><span class="keyword">return</span> __kth(k, tree[p].ch[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (tree[tree[p].ch[<span class="number">0</span>]].sz + tree[p].cnt &lt; k) &#123;</span><br><span class="line"><span class="keyword">return</span> __kth(k - tree[tree[p].ch[<span class="number">0</span>]].sz - tree[p].cnt, tree[p].ch[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> tree[p].val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kth</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> __kth(k, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pre</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> r = <span class="built_in">countl</span>(x, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> __kth(r, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">suc</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> r = tree[<span class="number">1</span>].sz - <span class="built_in">countg</span>(x, <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> __kth(r, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// freopen(&quot;test.in&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line">cin &gt;&gt; x;</span><br><span class="line"><span class="built_in">insert</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> last = <span class="number">0</span>, op, x;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">cin &gt;&gt; op &gt;&gt; x;</span><br><span class="line">x ^= last;</span><br><span class="line"><span class="keyword">if</span> (op == <span class="number">1</span>) <span class="built_in">insert</span>(x);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">2</span>) <span class="built_in">remove</span>(x);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">3</span>) &#123;</span><br><span class="line">last = <span class="built_in">rk</span>(x);</span><br><span class="line">ans ^= last;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">4</span>) &#123;</span><br><span class="line">last = <span class="built_in">kth</span>(x);</span><br><span class="line">ans ^= last;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">5</span>) &#123;</span><br><span class="line">last = <span class="built_in">pre</span>(x);</span><br><span class="line">ans ^= last;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">6</span>) &#123;</span><br><span class="line">last = <span class="built_in">suc</span>(x);</span><br><span class="line">ans ^= last;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;第一要务是收心，不要去在意杂事，不担心以后，最后几个月专心做竞赛，不留下遗憾。&lt;/p&gt;
&lt;h1 id=&quot;8-25-8-26-Codeforces-Round-767-Div-1&quot;&gt;&lt;a href=&quot;#8-25-8-26-Codeforces-Round-767-Div-1&quot;</summary>
      
    
    
    
    <category term="XCPC" scheme="https://eykenis.github.io/categories/XCPC/"/>
    
    
    <category term="XCPC" scheme="https://eykenis.github.io/tags/XCPC/"/>
    
  </entry>
  
  <entry>
    <title>BRDF 和 Blinn-Phong</title>
    <link href="https://eykenis.github.io/2022/06/21/BasicShadersImplements/"/>
    <id>https://eykenis.github.io/2022/06/21/BasicShadersImplements/</id>
    <published>2022-06-21T13:43:46.000Z</published>
    <updated>2022-07-09T14:51:29.752Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/20220310232734.png" alt=""></p><h1 id="了解-BRDF-—-标准光照模型"><a href="#了解-BRDF-—-标准光照模型" class="headerlink" title="了解 BRDF — 标准光照模型"></a>了解 BRDF — 标准光照模型</h1><p>BRDF 是真实化渲染一个重要的模型。以下实现的各种渲染方法都将符合 BRDF 的规则。</p><p>首先可以参考这篇论文：<a href="www.cs.princeton.edu/courses/archive/fall06/cos526/tmp/wynn.pdf">A Basic Introduction to BRDF-Based Lighting</a></p><p>(((</p><p>在了解渲染方法之前，你应该首先知晓渲染管线的基本流程。</p><p>标准光照模型 - BRDF (Bi-directional Reflectance  Distribution Function，也称双向反射模型) 是一种广泛用于图形渲染的光照模型。它的基本方法是将进入摄像机的光分为四部分：</p><p><strong>自发光</strong>、<strong>高光反射</strong>、<strong>漫反射</strong> 和 <strong>环境光</strong>.</p><ul><li><strong>自发光</strong> (emissive) 即物体本身向摄像机辐射的光（而非折射/反射）。如果你没有使用<strong>全局光照</strong>技术，自发光并不会让物体看起来在发光，而只是亮度提高了。使用全局光照后，自发光的物体可以影响附近物体的光照。</li><li><strong>高光反射</strong> (specular) 即模型向摄像机完全镜面反射的光强。</li><li><strong>漫反射</strong> (diffuse) 即模型接收到光照后，向所有方向反射的光强。该值与视角无关。</li><li><strong>环境光</strong> (ambient) 除以上三点以外的所有其他光照。这些一般都是间接光照。例如前面提到的全局光照。环境光一般是必须的，如果没有环境光，没有受到光源直线照射的地方将完全黑暗，这是不符合实际的。（在素描中也学过，暗面和阴影的交界处是有些许反光的）</li></ul><p>最后一个片元呈现的颜色就是这四种光的线性和。</p><p>除开双向反射模型以外，还有一种双向透射模型（BTDF），一般用于表现透明材质。二者统称为双向散射模型（BSDF）。</p><h2 id="漫反射光照的兰伯特定律"><a href="#漫反射光照的兰伯特定律" class="headerlink" title="漫反射光照的兰伯特定律"></a>漫反射光照的兰伯特定律</h2><p>兰伯特定律的表述很简单：</p><script type="math/tex; mode=display">I=k_d·{\vec n} ·\vec l</script><p>如上公式， $I$ 为光强，$\vec n, \vec l$ 分别为归一化后的表面法向量和光照方向，如下图所示（图来自《Unity Shader 入门精要》）：</p><p><img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/20220315093831.png" alt="image-20220310215956093"></p><p>其中，$k_d$ 是漫反射系数，由<strong>材质颜色乘以光线强度</strong>得到。</p><p>那么公式的意义实际上就是说漫反射的光强与法线和光源方向夹角的余弦值成正比（因为 $\vec n · \vec l=cos(\vec n, \vec l)$）。这和我们的感性认识——表面的角度偏离光源越远光照越少，是一致的。</p><p>这一定律在各种 Shading methods 中广泛使用。</p><p>下面来看看基于 BRDF 的经验模型是如何实现的。</p><h2 id="Phong-Shading-amp-Gouraud-Shading"><a href="#Phong-Shading-amp-Gouraud-Shading" class="headerlink" title="Phong Shading &amp; Gouraud Shading"></a>Phong Shading &amp; Gouraud Shading</h2><p> 冯（Phong）着色与高洛德（Gouraud）着色都是最经典的经验 Shading. 而且着色算法也是一样的。唯一的不同就是：Phong Shading 是在片元着色器阶段对每一个片元操作的，而 Gouraud Shading 是对顶点操作的。下面根据 BRDF 的四个光照部分来引入这两种 Shading 的公式。</p><h3 id="漫反射"><a href="#漫反射" class="headerlink" title="漫反射"></a>漫反射</h3><p>漫反射部分直接使用 Lambert law 即可：</p><script type="math/tex; mode=display">c_{diffuse}=(c_{light}·m_{diffuse})\max(0,\vec{n}·\vec{l})</script><p>其中，将漫反射颜色 $m_{diffuse}$ 与光照强度 $c_{light}$ 相乘，并保证漫反射取正值，这样可以防止物体在背光处被光源直接照亮。</p><h3 id="高光反射"><a href="#高光反射" class="headerlink" title="高光反射"></a>高光反射</h3><p>还是本文第一张图，Phong 模型通过如下公式计算高光反射：</p><script type="math/tex; mode=display">c_{specular} = (c_{light}·m_{specular})\max(0,\vec{v}·\vec r)^{m_{gloss}}</script><p>其中，$\vec v$ 为视线向量，$\vec r$ 是反射方向向量。</p><p>不过，对于高光的计算，还有另一种经验计算方法—— Blinn 模型，它使用一个新的矢量 $\vec h=normalize(\vec {v + l})$ ，公式为</p><script type="math/tex; mode=display">c_{specular} = (c_{light}·m_{specular})\max(0,\vec{n}·\vec h)^{m_{gloss}}</script><p>其实 Phong 模型和 Blinn 模型高光计算方法都是经验模型，在不同的情况下有不同的表现，不一定 Phong 更加符合实验结果。而 Blinn 的区别主要在于，当视角不动时，其计算的 $\vec h$ 几乎是一个常量，由此节约了性能。而在高速移动的视角下 Phong 模型也许更快。</p><p>总之，使用 Blinn 高光算法的模型一般也称为 Blinn-Phong Shading.</p><h3 id="环境光"><a href="#环境光" class="headerlink" title="环境光"></a>环境光</h3><p>对于简单的 Blinn-Phong 模型，环境光给一个全局常量即可（敷衍就行了）。例如在 Unity Shader 中，你可以把 <code>UNITY_LIGHTMODEL_AMBIENT</code> 拿来当环境光。</p><h3 id="自发光"><a href="#自发光" class="headerlink" title="自发光"></a>自发光</h3><p>和环境光一样，自发光也只使用一个固定常数。</p><p>总之，Blinn-Phong 模型只是一个经验模型，很多地方都做得很简单。和真实的物理光照是不同的，但表现出来的效果可以八九不离十。这也就是某一般路过（误）邓恩（<em>3D Math Primer For Graphics And Game Development</em> 的 writer）提出的图形学第一定律所说：</p><blockquote><p>如果它看起来是对的，那么它就是对的。</p></blockquote><p>如果你将以上过程应用到顶点着色器而不是片元着色器，那么你会得到一个更粗糙的着色效果，也就是 Gouraud Shading.</p><p>下面是不含高光部分的代码实现。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">// Gauraud</span><br><span class="line">v2f vert(a2v v) &#123;</span><br><span class="line">                v2f o;</span><br><span class="line">                o.pos = UnityObjectToClipPos(v.vertex); // MVP transformation</span><br><span class="line">                o.worldNormal = mul(v.normal, (float3x3)unity_WorldToObject);</span><br><span class="line">                o.worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;</span><br><span class="line">                return o;</span><br><span class="line">            &#125;</span><br><span class="line">            fixed4 frag(v2f v) : SV_TARGET0 &#123;</span><br><span class="line"></span><br><span class="line">                fixed3 ambient = UNITY_LIGHTMODEL_AMBIENT.xyz;</span><br><span class="line">                </span><br><span class="line">                fixed3 worldNormal = normalize(v.worldNormal);</span><br><span class="line">                fixed3 worldLightDir = normalize(_WorldSpaceLightPos0.xyz);</span><br><span class="line"></span><br><span class="line">                fixed3 viewDir = normalize(_WorldSpaceCameraPos.xyz - v.worldPos.xyz);</span><br><span class="line">                fixed3 halfDir = normalize(worldLightDir + viewDir);</span><br><span class="line"></span><br><span class="line">                fixed3 diffuse = _LightColor0.rgb * _Color.rgb * saturate(dot(worldNormal, worldLightDir));</span><br><span class="line"></span><br><span class="line">                return fixed4(ambient + diffuse, 1.0);</span><br><span class="line">            &#125;</span><br><span class="line">// Phong</span><br><span class="line">v2f vert(a2v v) &#123;</span><br><span class="line">                v2f o;</span><br><span class="line">                o.pos = UnityObjectToClipPos(v.vertex);</span><br><span class="line"></span><br><span class="line">                fixed3 ambient = UNITY_LIGHTMODEL_AMBIENT.xyz;</span><br><span class="line">                fixed3 worldNormal = normalize(mul(v.normal, (float3x3)unity_WorldToObject));</span><br><span class="line">                fixed3 worldLight = normalize(_WorldSpaceLightPos0.xyz);</span><br><span class="line">                fixed3 diffuse = _LightColor0.rgb * _Diffuse.rgb * saturate(dot(worldNormal, worldLight));</span><br><span class="line">                o.color = ambient + diffuse;</span><br><span class="line">                return o;</span><br><span class="line">            &#125;</span><br><span class="line">            fixed4 frag(v2f v) : SV_TARGET0 &#123;</span><br><span class="line">                return fixed4(v.color, 1.0);</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>高光如何实现呢？</p><p>且回看上方高光公式。简单地加一个高光向量：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fixed3 specular = _LightColor0.rgb * _Specular.rgb * pow(max(0, dot(v.worldNormal.xyz, halfDir)), _Gloss);</span><br></pre></td></tr></table></figure><p>这里采用的是 <code>Blinn</code> 方法， <code>_Specular</code> 是高光的颜色向量。另外，halfdir 的计算：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fixed3 halfDir = normalize(worldLightDir + viewDir);</span><br></pre></td></tr></table></figure><p>最后和 <code>ambient + diffuse</code> 直接相加。</p><h3 id="Half-Lambert"><a href="#Half-Lambert" class="headerlink" title="Half-Lambert"></a>Half-Lambert</h3><p>普通的 Lambert 方法处理的背光面会出现和真实情况相差甚远的情况——整个背光面都是黑的，没有亮度差别。而在实际观察中，即使是背光面也是存在量不同的反光的，只使用一个统一的环境反射光来表现显然不能解决问题。</p><p>问题的出现是因为使用的公式是 <code>saturate(dot(worldNormal, worldLight)</code>，对点积小于 0 的部分直接舍去用 0 代替，背光面出现大量亮度都为 0 的片元。</p><p>所以对 Lambert 进行一个重新取值，公式修改为</p><p><img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/image-20220624102948113.png" alt="image-20220624102948113"></p><p>对比如下：</p><p><img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/image-20220623165408197.png" alt="image-20220623165408197"></p><p><img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/image-20220623165359932.png" alt="image-20220623165359932"></p><p>不管怎样，两种渲染方式都缺少明暗交界线，是经验模型下单光源光照的缺点。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://ekkepic.oss-cn-beijing.aliyuncs.com/img/20220310232734.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;了解-BRDF-—-标准光照模型&quot;&gt;&lt;a href=&quot;#了解-BRDF-—-标</summary>
      
    
    
    
    <category term="问道" scheme="https://eykenis.github.io/categories/%E9%97%AE%E9%81%93/"/>
    
    
  </entry>
  
  <entry>
    <title>读 Operating Systems - Three Easy Pieces</title>
    <link href="https://eykenis.github.io/2022/04/20/OSTEP-Reading/"/>
    <id>https://eykenis.github.io/2022/04/20/OSTEP-Reading/</id>
    <published>2022-04-20T15:56:53.000Z</published>
    <updated>2022-04-24T03:19:39.536Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>前半个学期基本上没怎么碰过三大系统（OS，CS，DB），到了期中复习才意识到应该好好学一学了。所以我打算在接下来的半个学期将 OSTEP 和 CSAPP 好好读一读，特别是 OSTEP<del>（毕竟 CSAPP 很多内容很难啃，不是那么好读，而 OSTEP 全是废话）</del>。</p><p>我将会在<a href="https://github.com/Eykenis/OSTEP-Reading">这里</a>详细地记录自己的读书笔记。一起加油！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;前半个学期基本上没怎么碰过三大系统（OS，CS，DB），到了期中复习才意识到应该好好学一学了。所以我打算在接下来的半个学期将 OSTEP 和</summary>
      
    
    
    
    <category term="问道" scheme="https://eykenis.github.io/categories/%E9%97%AE%E9%81%93/"/>
    
    
    <category term="OS" scheme="https://eykenis.github.io/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>在 ECS 服务器（Ubuntu）上使用 Mirai 机器人</title>
    <link href="https://eykenis.github.io/2022/02/24/Use-Mirai-in-ur-ECS-server/"/>
    <id>https://eykenis.github.io/2022/02/24/Use-Mirai-in-ur-ECS-server/</id>
    <published>2022-02-24T11:01:20.000Z</published>
    <updated>2022-04-22T06:37:43.753Z</updated>
    
    <content type="html"><![CDATA[<p>最近玩了一会 Mirai 机器人框架，在本地的话不说多少占了电脑资源，一直开着也不太好。但耐不住各群群友都想深夜看 bot 发病，正好想起来上学期学校发的 200 元华为云代金券没用，故斥巨资 1.83 RMB 买了一台配置最低的 ECS 服务器。正好，从零开始记录一下安装 Mirai 以及使用的过程。我这里使用的镜像是 Ubuntu 20.04.</p><h2 id="1-登录并安装-Mirai-Console-Loader"><a href="#1-登录并安装-Mirai-Console-Loader" class="headerlink" title="1. 登录并安装 Mirai Console Loader"></a>1. 登录并安装 Mirai Console Loader</h2><p><img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/20220224190641.png" alt=""></p><p>利用华为云自带的 CloudShell 登录到实例。（不过比较推荐 PuTTY）</p><p>为了尽可能地让我们的工作更简单，使用 <a href="https://github.com/iTXTech/">iTXTech</a> 的 iTXTech MCL。其在 github 上自带 <a href="https://github.com/iTXTech/mcl-installer">Installer</a>.</p><p>这里我选择 <a href="https://github.com/iTXTech/mcl-installer/releases/download/v1.0.3/mcl-installer-1.0.3-linux-amd64">mcl-installer-1.0.3-linux-amd64</a>，执行命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/iTXTech/mcl-installer/releases/download/v1.0.3/mcl-installer-1.0.3-linux-amd64</span><br></pre></td></tr></table></figure><p><code>wget</code> 是 linux 系统常用的从 url 下载文件的命令。</p><p>如果下载完成后你想直接启动这个可执行文件是不行的，会提示没有权限。</p><p><img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/20220224195931.png" alt=""></p><p>这个时候，执行以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod u+x mcl-installer-1.0.3-linux-amd64</span><br></pre></td></tr></table></figure><p><code>chmod</code> 是一个修改文件权限的命令。其中 <code>u</code> 表示目标是用户，<code>x</code> 表示执行权限，<code>+</code> 表示给与。</p><p>缺省的安装过程是可接受的（至少对我这个啥也没有的新机是这样），一路回车等待安装完成，Y 和 N 都不用按了（</p><p><img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/20220224200506.png" alt=""></p><p>根据提示，这个时候只需要 <code>./mcl</code> 就可以启动 Mirai Console 了.</p><p>启动后，继续等待安装。</p><p>完成之后重启，再次 <code>./mcl</code>，成功启动。</p><p><img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/20220224200925.png" alt=""></p><h2 id="2-文件迁移到远程机上"><a href="#2-文件迁移到远程机上" class="headerlink" title="2. 文件迁移到远程机上"></a>2. 文件迁移到远程机上</h2><p>现在我们把原来在 本地 Windows 上的插件迁移过去。</p><p>为了确保记录都成功迁移，记得将 plugins、data、conf 三个文件夹都粘贴过来。</p><p>为了能有粘贴功能，我们在本地 Windows 机安装 <a href="[Download PuTTY: latest release (0.76">pscp</a> (greenend.org.uk)](<a href="https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html))，下载完成后将其拷贝到">https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html))，下载完成后将其拷贝到</a> C:\Windows\System32 下。</p><p>打开本地的 PowerShell，输入 <code>pscp</code>，确认 pscp 已经正确安装。</p><p><img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/20220224203057.png" alt=""></p><p>好，现在开始拷贝。输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pscp -r dir name@IP:target</span><br></pre></td></tr></table></figure><p>其中，dir 改为要拷贝的目录，name 为远程主机名，IP 为 IP地址，target 为目标目录。</p><p><img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/20220224203810.png" alt=""></p><p>成功粘贴过来之后，再将这些目录下的东西都拷贝到 mcl 相应的目录中去。（或者你直接 pscp 到目标目录也行）</p><p>等待拷贝全部完成后，再次 <code>./mcl</code> ，发现所有插件都装上了。现在尝试登录机器人。</p><p><img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/20220224204944.png" alt=""></p><p>发现需要验证滑动验证码。没有办法，查看 <a href="https://github.com/project-mirai/mirai-login-solver-selenium">project-mirai/mirai-login-solver-selenium: SliderCaptcha solver (github.com)</a></p><p>读我文档，按照文档所说一步一步来吧 QWQ。总之，登陆成功后， Mirai 又可以正常使用了。</p><hr><p>呃，这下水文章了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近玩了一会 Mirai 机器人框架，在本地的话不说多少占了电脑资源，一直开着也不太好。但耐不住各群群友都想深夜看 bot 发病，正好想起来上学期学校发的 200 元华为云代金券没用，故斥巨资 1.83 RMB 买了一台配置最低的 ECS 服务器。正好，从零开始记录一下安装</summary>
      
    
    
    
    <category term="问道" scheme="https://eykenis.github.io/categories/%E9%97%AE%E9%81%93/"/>
    
    
    <category term="Mirai" scheme="https://eykenis.github.io/tags/Mirai/"/>
    
    <category term="Linux" scheme="https://eykenis.github.io/tags/Linux/"/>
    
    <category term="聊天bot" scheme="https://eykenis.github.io/tags/%E8%81%8A%E5%A4%A9bot/"/>
    
  </entry>
  
  <entry>
    <title>Treap学习笔记及模板</title>
    <link href="https://eykenis.github.io/2021/12/14/Treap%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%8F%8A%E6%A8%A1%E6%9D%BF/"/>
    <id>https://eykenis.github.io/2021/12/14/Treap%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%8F%8A%E6%A8%A1%E6%9D%BF/</id>
    <published>2021-12-14T02:33:32.000Z</published>
    <updated>2023-03-20T07:04:30.313Z</updated>
    
    <content type="html"><![CDATA[<p>Treap是平衡搜索树的一种。所谓 “Treap”，即 “Tree” + “Heap”, 顾名思义，是使用堆方法对搜索树进行平衡的一种数据结构。</p><p>约定该篇文章讨论的二叉搜索树都遵守 “比当前节点值大的节点在右子树，小于等于当前节点值的节点在其左子树” 这一规定。</p><h2 id="Treap维护平衡的方式"><a href="#Treap维护平衡的方式" class="headerlink" title="Treap维护平衡的方式"></a>Treap维护平衡的方式</h2><p>Treap的目的主要是利用堆的性质来平衡原搜索树。因为堆是一棵完全二叉树，深度最优嘛。</p><p>对于一棵普通的二叉搜索树，我们对其每个节点再随机赋上一个优先级权值 $p$. 即对任意节点，多了一个变量 $p=random()$.</p><p>例如，如果我们以小根堆的规则来约束这个平衡树，那么插入和删除两个主要操作就会变成这样：</p><p><strong>插入</strong>：先按照普通平衡树的方式将元素插入到合适位置。然后我们需要向上回溯，在回溯的过程中检查这些节点关于 $p$ 是否符合小根堆的性质。如果当前节点的 $p$ 大于左右子节点 $p$ 的最小值，那么就不符合小根堆的性质。这个时候，如果左子节点的 $p$ 更小，我们就需要左旋，反之需要右旋，以此保证平衡。</p><p>至于旋转的具体操作，即：</p><blockquote><p>以右旋为例：</p><ol><li>将当前节点下放至其左子节点的位置</li><li>令<strong>右子节点的左子节点</strong> 称为当前节点的新的右子节点</li><li>右子节点的左子节点变为当前节点，取代当前节点的位置</li></ol></blockquote><p>删除操作当然是同理了，回溯的时候观察 $p$ 来维护平衡。由于 $p$ 值是随机的， Treap也不是严格的堆结构，所以它是一种期望平衡的<strong>弱平衡</strong>的平衡树，搜索、插入和删除的期望时间复杂度为 $O(\log n)$.</p><p>Treap的优势在于其实现起来非常简单，包含的也就上面这些东西了。</p><h2 id="模板部分"><a href="#模板部分" class="headerlink" title="模板部分"></a>模板部分</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> cnt; <span class="comment">// cnt 表示当前treap内节点总数，用于动态开点</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = XXXXX;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="comment">// 分别表示左右子节点、所在子树的大小、当前节点值以及p值</span></span><br><span class="line">    <span class="keyword">int</span> l, r, size, val, p;</span><br><span class="line">&#125;a[maxn];</span><br></pre></td></tr></table></figure><h3 id="回溯统计"><a href="#回溯统计" class="headerlink" title="回溯统计"></a>回溯统计</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    a[k].size = a[a[k].l].size + a[a[k].r].size + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 右旋</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rrotate</span><span class="params">(<span class="keyword">int</span> &amp;k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tmp = a[k].l;</span><br><span class="line">    a[k].l = a[tmp].r;</span><br><span class="line">    a[tmp].r = k;</span><br><span class="line">    a[tmp].size = a[k].size;</span><br><span class="line">    <span class="built_in">pushup</span>(k);</span><br><span class="line">    k = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 左旋</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">lrotate</span><span class="params">(<span class="keyword">int</span> &amp;k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tmp = a[k].r;</span><br><span class="line">    a[k].r = a[tmp].l;</span><br><span class="line">    a[tmp].l = k;</span><br><span class="line">    a[tmp].size = a[k].size;</span><br><span class="line">    <span class="built_in">pushup</span>(k);</span><br><span class="line">    k = tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> &amp;k, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (k == <span class="number">0</span>) &#123;</span><br><span class="line">        k = ++cnt;</span><br><span class="line">        a[k].val = val;</span><br><span class="line">        a[k].p = <span class="built_in">rand</span>();</span><br><span class="line">        a[k].size = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    a[k].size++;</span><br><span class="line">    <span class="keyword">if</span> (val &gt;= a[k].val) &#123;</span><br><span class="line">        <span class="built_in">ins</span>(a[k].r, val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">ins</span>(a[k].l, val);</span><br><span class="line">    <span class="keyword">if</span> (a[k].l &amp;&amp; a[k].p &gt; a[a[k].l].p) &#123;</span><br><span class="line">        <span class="built_in">rrotate</span>(k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a[k].r &amp;&amp; a[k].p &gt; a[a[k].r].p) &#123;</span><br><span class="line">        <span class="built_in">lrotate</span>(k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pushup</span>(k);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> &amp;k, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    a[k].size--;</span><br><span class="line">    <span class="keyword">if</span> (a[k].val == val) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!a[k].l &amp;&amp; !a[k].r) &#123;</span><br><span class="line">            k = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!a[k].l || !a[k].r) &#123;</span><br><span class="line">            k = a[k].l + a[k].r;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (a[a[k].l].p &lt; a[a[k].r].p) &#123;</span><br><span class="line">            <span class="built_in">rrotate</span>(k);</span><br><span class="line">            <span class="built_in">del</span>(a[k].r, val); <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">lrotate</span>(k);</span><br><span class="line">            <span class="built_in">del</span>(a[k].l, val); <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a[k].val &gt;= val) &#123;</span><br><span class="line">        <span class="built_in">del</span>(a[k].l, val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">del</span>(a[k].r, val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pushup</span>(k);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>例题分割线~</p><p>例题：</p><h3 id="P3369-【模板】普通平衡树"><a href="#P3369-【模板】普通平衡树" class="headerlink" title="P3369 【模板】普通平衡树"></a><a href="https://www.luogu.com.cn/problem/P3369">P3369 【模板】普通平衡树</a></h3><p>其中还要维护查询排名，查询前驱后继等搜索操作。</p><p>当普通平衡树维护就可以啦，比较简单。</p><p>完整代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line"><span class="keyword">int</span> root;</span><br><span class="line"><span class="comment">// 注意按p是小根堆</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r, size, val, p;</span><br><span class="line">&#125;a[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    a[k].size = <span class="number">1</span> + a[a[k].l].size + a[a[k].r].size;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rrotate</span><span class="params">(<span class="keyword">int</span> &amp;k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tmp = a[k].l;</span><br><span class="line">    a[k].l = a[tmp].r;</span><br><span class="line">    a[tmp].r = k;</span><br><span class="line">    a[tmp].size = a[k].size;</span><br><span class="line">    <span class="built_in">pushup</span>(k);</span><br><span class="line">    k = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">lrotate</span><span class="params">(<span class="keyword">int</span> &amp;k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tmp = a[k].r;</span><br><span class="line">    a[k].r = a[tmp].l;</span><br><span class="line">    a[tmp].l = k;</span><br><span class="line">    a[tmp].size = a[k].size;</span><br><span class="line">    <span class="built_in">pushup</span>(k);</span><br><span class="line">    k = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> &amp;k, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (k == <span class="number">0</span>) &#123;</span><br><span class="line">        k = ++cnt;</span><br><span class="line">        a[k].val = val;</span><br><span class="line">        a[k].p = <span class="built_in">rand</span>();</span><br><span class="line">        a[k].size = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    a[k].size++;</span><br><span class="line">    <span class="keyword">if</span> (val &gt;= a[k].val) &#123;</span><br><span class="line">        <span class="built_in">ins</span>(a[k].r, val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">ins</span>(a[k].l, val);</span><br><span class="line">    <span class="keyword">if</span> (a[k].l &amp;&amp; a[k].p &gt; a[a[k].l].p) &#123;</span><br><span class="line">        <span class="built_in">rrotate</span>(k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a[k].r &amp;&amp; a[k].p &gt; a[a[k].r].p) &#123;</span><br><span class="line">        <span class="built_in">lrotate</span>(k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pushup</span>(k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> &amp;k, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    a[k].size--;</span><br><span class="line">    <span class="keyword">if</span> (a[k].val == val) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!a[k].l &amp;&amp; !a[k].r) &#123;</span><br><span class="line">            k = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!a[k].l || !a[k].r) &#123;</span><br><span class="line">            k = a[k].l + a[k].r;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (a[a[k].l].p &lt; a[a[k].r].p) &#123;</span><br><span class="line">            <span class="built_in">rrotate</span>(k);</span><br><span class="line">            <span class="built_in">del</span>(a[k].r, val); <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">lrotate</span>(k);</span><br><span class="line">            <span class="built_in">del</span>(a[k].l, val); <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a[k].val &gt;= val) &#123;</span><br><span class="line">        <span class="built_in">del</span>(a[k].l, val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">del</span>(a[k].r, val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pushup</span>(k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rk</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!k) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (val &gt; a[k].val) &#123;</span><br><span class="line">        <span class="keyword">return</span> a[a[k].l].size + <span class="built_in">rk</span>(a[k].r, val) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">rk</span>(a[k].l, val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> rnk)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (rnk == a[a[k].l].size + <span class="number">1</span>) <span class="keyword">return</span> a[k].val;</span><br><span class="line">    <span class="keyword">if</span> (rnk &gt; a[a[k].l].size + <span class="number">1</span>) <span class="keyword">return</span> <span class="built_in">find</span>(a[k].r, rnk - a[a[k].l].size - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">find</span>(a[k].l, rnk);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query_pre</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!k) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (a[k].val &gt;= val) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">query_pre</span>(a[k].l, val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> tmp = <span class="built_in">query_pre</span>(a[k].r, val);</span><br><span class="line">    <span class="keyword">if</span> (!tmp) <span class="keyword">return</span> a[k].val;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query_suf</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!k) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (a[k].val &lt;= val) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">query_suf</span>(a[k].r, val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> tmp = <span class="built_in">query_suf</span>(a[k].l, val);</span><br><span class="line">    <span class="keyword">if</span> (!tmp) <span class="keyword">return</span> a[k].val;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">int</span> opt, x;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; opt &gt;&gt; x;</span><br><span class="line">        <span class="keyword">if</span> (opt == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">ins</span>(root, x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (opt == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="built_in">del</span>(root, x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (opt == <span class="number">3</span>) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="built_in">rk</span>(root, x) + <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (opt == <span class="number">4</span>) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="built_in">find</span>(root, x) &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (opt == <span class="number">5</span>) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="built_in">query_pre</span>(root, x) &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> cout &lt;&lt; <span class="built_in">query_suf</span>(root, x) &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">最简单的平衡树之一</summary>
    
    
    
    <category term="XCPC" scheme="https://eykenis.github.io/categories/XCPC/"/>
    
    
    <category term="平衡树" scheme="https://eykenis.github.io/tags/%E5%B9%B3%E8%A1%A1%E6%A0%91/"/>
    
    <category term="Treap" scheme="https://eykenis.github.io/tags/Treap/"/>
    
  </entry>
  
  <entry>
    <title>快速傅里叶变换(FFT)及NTT入门笔记</title>
    <link href="https://eykenis.github.io/2021/11/18/%E5%BF%AB%E9%80%9F%E5%82%85%E9%87%8C%E5%8F%B6%E5%8F%98%E6%8D%A2-FFT-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/"/>
    <id>https://eykenis.github.io/2021/11/18/%E5%BF%AB%E9%80%9F%E5%82%85%E9%87%8C%E5%8F%B6%E5%8F%98%E6%8D%A2-FFT-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/</id>
    <published>2021-11-18T13:41:50.000Z</published>
    <updated>2023-03-10T00:39:58.830Z</updated>
    
    <content type="html"><![CDATA[<p>本博客学习于洛谷P3803各路大佬题解，所以你肯定会找到很多相似的地方QWQ</p><h2 id="什么是FFT"><a href="#什么是FFT" class="headerlink" title="什么是FFT"></a>什么是FFT</h2><p><strong>傅里叶变换</strong></p><p>傅里叶说明了：一切函数/波形都可以用有限或无限个弦函数/波形叠加形成。</p><p>例如，现在有一个由三个不同正弦波组成的近似矩形波，将这些波形关于 $x$ 轴平行地放在一起，就可以得到下图：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/97b88cfe9192ba702c13e817170e7a08.png" alt="img"></p><p>其中红色的是合成出来的近似矩形波。</p><p>（当然，图肯定是不太标准的，意思一下就行）</p><p>从 $xOz$ 平面看，我们可以获得各个波的时域信号，也就是 $t-f(t)$ 图像。而从 $zOy$ 平面看，则可以获得各个波的频域信号。</p><p>先不看频域信号中的红色部分，注意其他三个波其实是有排序规则的：按照频率大小排序。也就是说，频率越快， $y$ 越大。且每个频率下的 $z$ 将反映该波的振幅。两种不同的信号包含了不同的信息。</p><p>而傅里叶变换，就是对一个时域信号作变换，生成频域信号。</p><p><strong>离散傅里叶变换（DFT）</strong></p><p>顾名思义，离散傅里叶变换就是在确定时域信号和频域信号都是离散的时候作的傅里叶变换。</p><p>例如，现在有一个多项式函数 $f(x)=\sum_{i=0}^{n}a_ix^i$，那么这个函数其实就是“时域信号”，我们也可以将其表示成点集$\{P_0,P_1,…,P_n\}$，其中 $P_i$ 是函数图像上的某一个点。容易知道 $n$ 个点是可以确定一个 $n-1$ 次多项式的。那么这个点集其实就是“频域信号”。从函数式到点集的变化，就是一种离散傅里叶变换。</p><p>另外，我们称IDFT为DFT的逆运算，即从点集得到函数式的运算。</p><h2 id="为什么需要FFT"><a href="#为什么需要FFT" class="headerlink" title="为什么需要FFT"></a>为什么需要FFT</h2><p>离散型傅里叶变换解决的问题一般是多项式乘法问题。</p><p>最经典的FFT问题即多项式卷积问题：</p><p><a href="https://www.luogu.com.cn/problem/P3803">P3803 【模板】多项式乘法（FFT） - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p><p>给一个 $n$ 次多项式 $F(x)$ 和一个 $m$ 次多项式 $G(x)$，求 $F(x)$ 和 $G(x)$ 的卷积。</p><p>如果直接暴力计算，第一种就是直接展开函数式算，第二种就是执行一次DFT，将函数式转换为点集，通过对 $x$ 相同的点的 $y$ 值相乘，得到目标函数的点集，再通过 DFT 的逆运算 IDFT 转化为答案。</p><p>显然，不管采取哪种方法，一共都有 $m · n$ 项，复杂度为 $O((max\{n, m\})^2)$. 在 $nm\geq 1e9$ 的时候是无法接受的。虽然朴素方法下第二种方法的常数肯定比第一种还要大，但其实我们可以在DFT变换的基础上使用FFT来加速多项式乘法。实际上，FFT的加速原因在于其采用了分治的思想。</p><h2 id="多项式乘法问题"><a href="#多项式乘法问题" class="headerlink" title="多项式乘法问题"></a>多项式乘法问题</h2><h3 id="前置知识-复数根"><a href="#前置知识-复数根" class="headerlink" title="前置知识-复数根"></a>前置知识-复数根</h3><p>考虑欧拉公式</p><script type="math/tex; mode=display">e^{\theta i}= \cos\theta + i\sin\theta</script><p>，容易知道 $e^{2\pi i}=1$.</p><p>不妨令 $w_n=e^{2\pi i\over n}=\sin{2\pi i\over n}+i\cos{2\pi i\over n}$, 则 $w_n^n=1$.</p><p>则称 $w_n$ 为 $n$ 的一个复数z单位根. 容易知道 $n$ 的复数根最多有 $n$ 个，为 $\{w_i|i\in [0,n-1]\}$. 这是因为复数根具有性质 $w_n^{n+k}=w_n^k$.</p><p>另外，还有一个通过消去定理得到的引理：$w_n^k=w_{n\over2}^{k\over2}$.</p><h3 id="使用FFT解决多项式乘法问题"><a href="#使用FFT解决多项式乘法问题" class="headerlink" title="使用FFT解决多项式乘法问题"></a>使用FFT解决多项式乘法问题</h3><p>例题：</p><p><a href="https://www.luogu.com.cn/problem/P3803">P3803 【模板】多项式乘法（FFT）</a></p><p><strong>DFT</strong></p><p>现在要将$F(x)$的表达式转化为点值表示法，那么我们需要取$n$个点。前面已经讨论过，朴素的取法复杂度是 $O(n^2)$ 的，现在我们需要构造一个可以分治的取法：</p><p>设$ F(x)$ 的项数 $n$ 为偶数，并令</p><p>$A(x)=a_0+a_2x+a_4x^2+…+a_nx^{n\over 2}$,</p><p>$B(x)=a_1+a_3x+a_5x^2+…+a_{n-1}x^{\frac{n}{2}-1}$.</p><p>则 $F(x)=A(x^2)+xB(x^2)$.</p><p>代入 $n$ 个单位复数根 $w_n^k, k\in[0, n - 1]$，有</p><p>$F(w_n^k)=A(w_{n}^{2k})+w_n^kB(w_n^{2k})$</p><p>而 $A(w_n^{2k})=a_0+a_2w_n^{2k}+…+a_nw_n^{2k\over n}$</p><p>$=a_0+a_2w_{n\over2}^k+…+a_nw_{n\over2}^{k\over n}$.</p><p>且对 $B(w_n^{2k})$，我们也有相似的结论。</p><p>故</p><p>$F(w_n^k)=A(w_{n\over2}^k)+w_n^kB(w_{n\over2}^{k})\ (k&lt;{n\over2})$.</p><p>考虑 $k\geq {n\over2}$ 的情况，令 $k+{n\over 2}$ 取代原来位置上的 $k$,</p>$F(w_n^{{n\over 2}+k})=A(w_n^{n+2k})+w_n^{{n\over 2}+k}B(w_n^{2k})$,$=A(w_n^{2k})-w_n^{k}B(w_n^{2k})$,$=A(w_{n\over2}^k)-w_n^kB(w_{n\over2}^k)$.那么在求 $F(w_n^k)$ 时，我们可以先求 $A(w_{n\over2}^{k})$ 以及 $B(w_{n\over2}^{k})$，然后再合并出 $F(w_n^k)$. 到这里，分治递归的可行性就十分显然了。由主定理可知复杂度为 $T(n)=T(\frac{n}{2})+O(n)=O(n\log n)$.**IDFT**IDFT 即 DFT 的逆变换。我们的目的是求最终表达式的各个系数，而通过 DFT 得到最终的点值表达式后，我们还需要将其逆向变回系数表达式。其实，这里只需要取 $w'=\overline {w_n^k}$. 即单位根的共轭复数，然后再执行一遍相似的分治，并且最后得到的多项式系数都除以一个 $n $ 就可以了。（不再展开证明 QWQ，了解就好，因为本蒟蒻也不会）CPP:<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// F[]即F(x)，注意n为A(x),B(x)的长度，op为1/-1表示进行的是FFT/IDFT</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI acos(-1.0)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FFT</span><span class="params">(complex&lt;<span class="keyword">double</span>&gt; F[], <span class="keyword">int</span> n, <span class="keyword">int</span> op)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!n) <span class="keyword">return</span>;</span><br><span class="line">    complex&lt;<span class="keyword">double</span>&gt; a[n], b[n];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        a[i] = F[i &lt;&lt; <span class="number">1</span>], b[i] = F[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">FFT</span>(a, n &gt;&gt; <span class="number">1</span>, op), <span class="built_in">FFT</span>(b, n &gt;&gt; <span class="number">1</span>, op);</span><br><span class="line">    <span class="function">complex&lt;<span class="keyword">double</span>&gt; <span class="title">wn</span><span class="params">(cos(PI / n), sin(PI / n) * op)</span>, <span class="title">w</span><span class="params">(<span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        F[i] = a[i] + w * b[i];</span><br><span class="line">        F[i + n] = a[i] - w * b[i];</span><br><span class="line">        w *= wn;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>此为FFT的递归写法，由于单位根的原因需要使用 `double` 数据类型，且需要一个复数结构体，每层分治还要额外开数组，其常数比较大。另外还有一种FFT的迭代写法，常数更小。（需要的可以去别处找，或者我说不定会更？QAQ）****回到该问题，由于需要分治的任何时候都要保证 $n$ 为偶数，故我们需要把 $n,m$ 补成相同的一个 $2$ 的幂次方。项数补全不影响结果，只要让多出来的项系数都为0就行了。故整个流程即：1. 对 $F(x),G(x)$ 分别求 DFT2. 直接将每个点值相乘3. 通过IDFT将点值还原成系数表达式，得到答案对于例题[P3803](https://www.luogu.com.cn/problem/P3803)，AC代码如下：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI acos(-1.0)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// op = 1 ? DFT : IDFT</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">3e6</span> + <span class="number">10</span>;</span><br><span class="line">complex &lt;<span class="keyword">double</span>&gt; F[maxn], G[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fft</span><span class="params">(complex&lt;<span class="keyword">double</span>&gt; f[], <span class="keyword">int</span> n, <span class="keyword">int</span> op)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!n) <span class="keyword">return</span>;</span><br><span class="line">    complex &lt;<span class="keyword">double</span>&gt; a[n], b[n];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; ++k) &#123;</span><br><span class="line">        a[k] = f[k &lt;&lt; <span class="number">1</span>], b[k] = f[k &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">fft</span>(a, n &gt;&gt; <span class="number">1</span>, op), <span class="built_in">fft</span>(b, n &gt;&gt; <span class="number">1</span>, op);</span><br><span class="line">    <span class="function">complex&lt;<span class="keyword">double</span>&gt; <span class="title">wn</span><span class="params">(cos(PI / n), sin(PI / n) * op)</span>, <span class="title">w</span><span class="params">(<span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; ++k, w *= wn) &#123;</span><br><span class="line">        f[k] = a[k] + w * b[k], f[k + n] = a[k] - w * b[k];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;F[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;G[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    m += n, n = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(n &lt;= m) n &lt;&lt;= <span class="number">1</span>; <span class="comment">// 补足系数，保证是2的幂次</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// DFT</span></span><br><span class="line">    <span class="built_in">fft</span>(F, n &gt;&gt; <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">fft</span>(G, n &gt;&gt; <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) F[i] *= G[i];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// IDFT</span></span><br><span class="line">    <span class="built_in">fft</span>(F, n &gt;&gt; <span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%.0f &quot;</span>, <span class="built_in">fabs</span>(F[i].<span class="built_in">real</span>()) / n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>基本上和洛谷上 FlashHu 的题解代码一样...因为我的FFT基本上是从这里理解的## NTT-快速数论变换很多时候，要求的多项式系数并不会有多大，`double` 显得有些浪费空间了，而且很容易产生精度问题。故可以使用另一种 “原根” 替代复数来解决多项式乘法问题，这样就可以避免使用 `double` 以及 `complex<T>`. 如果有系数较大的多项式需要计算且考察 NTT 时，一般会要求对结果取模。### 前置知识-原根在 NTT 算法中，原根是 FFT 中复数的替代品。~~（？又说一遍）~~要理解原根，首先我们需要群论中的若干定义。**循环群**如果一个群 $A$ 的所有元素 $x$ 都是 $a$ 的幂次，即$\forall x\in A, x=a^i(i\in \Z)$，则称 $A$ 是一个循环群，$a$ 是它的生成元。**阶**假设 $e$ 是某个循环群的单位元，则若 $a^p=1$，则 $p$ 的最小值即为 $a$ 的阶，记作 $Ord(a)$.**原根**原根的一般定义是：对于群 $G$, $\exist g\in G$, $Ord(g)=|G|$，则 $g$ 是 $G$ 的原根。现在有一个以加法取模为运算，元素为整数的群，容易知道这是一个循环群，单位元是1. 我们约定，如果这样的一个群的模数是 $p$，则其所在的群是 $G_p$.那么如果我们的问题是这样：求多项式系数，同时多项式系数对一个模数 $p$ 取余，显然系数构成一个群 $G_p$. 设 $n=|G|$，容易知道 $g^{p-1}=1$, 则不妨令 $g_n=g^{\frac{p-1}{n}}$, 有 $g_n^n=1$.从这里我们就看出，$g_n$ 和 FFT 中的 $w_n$ 是有一一对应关系的，所以我们只需要将 FFT 的点值取值修改为 $g_n^0,g_n^1,...g_n^{n-1}$ 即可。至于原根如何求出，我们可以找一个 $p-1$ 的质因子 $q$, 则 $g$ 为原根 $\lrArr$ $g^{\frac{p-1}{q}}\neq 1$ （由欧拉定理可证），将 $p-1$ 的质因子逐个找出再判断一下即可。通常题目会要求 $p=119×2^{23}+1=998244353,\ g=3$.> 据说，因为大多数NTT题目都会取更方便造数据的998244353为模数，这就导致很多题一看模数就知道这题是要做NTT。所以后来许多和NTT无关甚至完全不需要取模的题目也会加上一句“对998244353取模”。理解粗浅，还是老老实实看模板吧。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// op = 1 ? DFT : IDFT</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">3e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> F[maxn], G[maxn];</span><br><span class="line"><span class="keyword">int</span> r[maxn];</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fpow</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(p) &#123;</span><br><span class="line">        <span class="keyword">if</span>(p &amp; <span class="number">1</span>) ans = (ans * a) % mod;</span><br><span class="line">        a = (a * a) % mod;</span><br><span class="line">        p &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ntt</span><span class="params">(<span class="keyword">int</span> f[], <span class="keyword">int</span> n, <span class="keyword">int</span> op)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!n) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(i &lt; r[i]) <span class="built_in">swap</span>(f[i], f[r[i]]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> mid = <span class="number">1</span>; mid &lt; n; mid &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> wn = <span class="built_in">fpow</span>(op == <span class="number">1</span> ? <span class="number">3</span> : <span class="number">332748118</span>, (mod - <span class="number">1</span>) / (mid &lt;&lt; <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j += (mid &lt;&lt; <span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="keyword">int</span> w = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; mid; ++k, w = w * wn % mod) &#123;</span><br><span class="line">                <span class="keyword">int</span> x = f[j + k], y = w * f[j + k + mid] % mod;</span><br><span class="line">                f[j + k] = (x + y) % mod;</span><br><span class="line">                f[j + k + mid] = ((x - y) % mod + mod) % mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;F[i]);</span><br><span class="line">        F[i] = (F[i] + mod) % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        G[i] = (G[i] + mod) % mod;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;G[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    m += n, n = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(n &lt;= m) n &lt;&lt;= <span class="number">1</span>, cnt++; <span class="comment">// 补足系数，保证是2的幂次</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) r[i] = (r[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) | ((i &amp; <span class="number">1</span>) &lt;&lt; (cnt - <span class="number">1</span>));</span><br><span class="line">    <span class="comment">// DFT</span></span><br><span class="line">    <span class="built_in">ntt</span>(F, n, <span class="number">1</span>), <span class="built_in">ntt</span>(G, n, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) F[i] = (F[i] * G[i]) % mod;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// IDFT</span></span><br><span class="line">    <span class="built_in">ntt</span>(F, n, <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">int</span> inv = <span class="built_in">fpow</span>(n, mod - <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld &quot;</span>, (F[i] * inv) % mod);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">打死不学数学FLAG系列...</summary>
    
    
    
    <category term="XCPC" scheme="https://eykenis.github.io/categories/XCPC/"/>
    
    
    <category term="数学" scheme="https://eykenis.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
    <category term="FFT" scheme="https://eykenis.github.io/tags/FFT/"/>
    
    <category term="NTT" scheme="https://eykenis.github.io/tags/NTT/"/>
    
  </entry>
  
  <entry>
    <title>2021ICPC济南记</title>
    <link href="https://eykenis.github.io/2021/11/17/2021ICPC%E6%B5%8E%E5%8D%97%E8%AE%B0/"/>
    <id>https://eykenis.github.io/2021/11/17/2021ICPC%E6%B5%8E%E5%8D%97%E8%AE%B0/</id>
    <published>2021-11-17T03:12:06.000Z</published>
    <updated>2023-04-12T14:41:31.303Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2021-11-14-济南打铁…"><a href="#2021-11-14-济南打铁…" class="headerlink" title="2021.11.14 济南打铁…"></a>2021.11.14 济南打铁…</h2><p>抛开题目本身严重出锅的问题，也是因为自己签到慢的一批还乱WA而导致签到就能拿的铜牌不翼而飞…</p><p>对不起，以后再也不要让本蒟蒻来做签到了qwq（CF签到我2分钟一个，区域赛签到我两小时调不出，真的绝绝子）</p><p>队友死磕D无果，G有思路但时间不够+赛后发现离正解也差得远，C越想越糊，其余题开不动。</p><p>就这样本队第一次出征打铁了。</p><p>感觉在区域赛这方面自己还是一片空白，目前的进度只是学会了很多板子和CF做一做1800以下的题而已。而意识到这些之后，上海站也只剩下十来天了。。。看来得寄希望于明年了。（废物JBer叹气）</p><p>感觉自己是真的废物。。。废到不敢吱声那种。</p><p>以后我就是双铁战神了！（十天以后三铁战神flag）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;2021-11-14-济南打铁…&quot;&gt;&lt;a href=&quot;#2021-11-14-济南打铁…&quot; class=&quot;headerlink&quot; title=&quot;2021.11.14 济南打铁…&quot;&gt;&lt;/a&gt;2021.11.14 济南打铁…&lt;/h2&gt;&lt;p&gt;抛开题目本身严重出锅的问题，</summary>
      
    
    
    
    <category term="XCPC" scheme="https://eykenis.github.io/categories/XCPC/"/>
    
    
  </entry>
  
  <entry>
    <title>Codeforces Round 371 Div. 1</title>
    <link href="https://eykenis.github.io/2021/11/11/Codeforces-Round-371-Div-1/"/>
    <id>https://eykenis.github.io/2021/11/11/Codeforces-Round-371-Div-1/</id>
    <published>2021-11-11T12:57:16.000Z</published>
    <updated>2022-04-22T06:35:17.233Z</updated>
    
    <content type="html"><![CDATA[<h1 id="A-Sonya-and-Queries"><a href="#A-Sonya-and-Queries" class="headerlink" title="A. Sonya and Queries"></a>A. Sonya and Queries</h1><p>由于默认补足前导0，而且必须从低到高匹配，可以直接使用map.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    map&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; mp;</span><br><span class="line">    <span class="keyword">while</span>(t--) &#123;</span><br><span class="line">        <span class="keyword">char</span> op;</span><br><span class="line">        <span class="keyword">int</span> num;</span><br><span class="line">        cin &gt;&gt; op &gt;&gt; num;</span><br><span class="line">        <span class="keyword">if</span>(op == <span class="string">&#x27;?&#x27;</span>) &#123;</span><br><span class="line">            cout &lt;&lt; mp[num] &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; num; i *= <span class="number">10</span>) &#123;</span><br><span class="line">            res += (num &amp; <span class="number">1</span>) * i;</span><br><span class="line">            num /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(op == <span class="string">&#x27;+&#x27;</span>) mp[res]++;</span><br><span class="line">        <span class="keyword">else</span> mp[res]--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="B-Searching-Rectangles"><a href="#B-Searching-Rectangles" class="headerlink" title="B. Searching Rectangles"></a>B. Searching Rectangles</h1><p>一道有点毒瘤的二分交互题。</p><p>由于两个矩形不相交，一定存在一条竖线/横线使得两个矩形分别在线的两侧，通过两次二分找到一条符合条件的线即可。</p><p>找到分割线后，分别在两个区域内询问出一个矩形的上下左右边界，求各个边界也用二分即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> ans[<span class="number">2</span>][<span class="number">4</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x1, <span class="keyword">int</span> y1, <span class="keyword">int</span> x2, <span class="keyword">int</span> y2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tmp;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;? %d %d %d %d\n&quot;</span>, x1, y1, x2, y2);</span><br><span class="line">    <span class="built_in">fflush</span>(stdout);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;tmp);</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">1</span>, r = n;</span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">    <span class="keyword">while</span>(l + <span class="number">1</span> &lt; r) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        x = <span class="built_in">query</span>(<span class="number">1</span>, <span class="number">1</span>, mid, n);</span><br><span class="line">        y = <span class="built_in">query</span>(mid + <span class="number">1</span>, <span class="number">1</span>, n, n);</span><br><span class="line">        <span class="keyword">if</span>(!x &amp;&amp; !y) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(x &amp;&amp; !y) r = mid;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(!x &amp;&amp; y) l = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(x &amp;&amp; y) <span class="keyword">return</span> mid;</span><br><span class="line">    &#125;</span><br><span class="line">    x = <span class="built_in">query</span>(<span class="number">1</span>, <span class="number">1</span>, l, n);</span><br><span class="line">    y = <span class="built_in">query</span>(r, <span class="number">1</span>, n, n);</span><br><span class="line">    <span class="keyword">if</span>(x == <span class="number">1</span> &amp;&amp; y == <span class="number">1</span>) <span class="keyword">return</span> l;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ud</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">1</span>, r = n;</span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">    <span class="keyword">while</span>(l + <span class="number">1</span> &lt; r) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        x = <span class="built_in">query</span>(<span class="number">1</span>, <span class="number">1</span>, n, mid);</span><br><span class="line">        y = <span class="built_in">query</span>(<span class="number">1</span>, mid + <span class="number">1</span>, n, n);</span><br><span class="line">        <span class="keyword">if</span>(!x &amp;&amp; !y) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(x &amp;&amp; !y) r = mid;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(!x &amp;&amp; y) l = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(x &amp;&amp; y) <span class="keyword">return</span> mid;</span><br><span class="line">    &#125;</span><br><span class="line">    x = <span class="built_in">query</span>(<span class="number">1</span>, <span class="number">1</span>, n, l);</span><br><span class="line">    y = <span class="built_in">query</span>(<span class="number">1</span>, r, n, n);</span><br><span class="line">    <span class="keyword">if</span>(x == <span class="number">1</span> &amp;&amp; y == <span class="number">1</span>) <span class="keyword">return</span> l;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">queryRec</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> x1, <span class="keyword">int</span> y1, <span class="keyword">int</span> x2, <span class="keyword">int</span> y2)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//upper_bound</span></span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="comment">// right</span></span><br><span class="line">    <span class="keyword">int</span> l = x1, r = x2;</span><br><span class="line">    <span class="keyword">while</span>(l &lt; r) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        x = <span class="built_in">query</span>(x1, y1, mid, y2);</span><br><span class="line">        <span class="keyword">if</span>(x) r = mid;</span><br><span class="line">        <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ans[id][<span class="number">2</span>] = l;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// left</span></span><br><span class="line">    l = x1, r = x2;</span><br><span class="line">    <span class="keyword">while</span>(l &lt; r) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = ((l + r) &amp; <span class="number">1</span>) ? ((l + r) &gt;&gt; <span class="number">1</span>) + <span class="number">1</span> : ((l + r) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        x = <span class="built_in">query</span>(mid, y1, x2, y2);</span><br><span class="line">        <span class="keyword">if</span>(x) l = mid;</span><br><span class="line">        <span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ans[id][<span class="number">0</span>] = r;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// up</span></span><br><span class="line">    l = y1, r = y2;</span><br><span class="line">    <span class="keyword">while</span>(l &lt; r) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        x = <span class="built_in">query</span>(x1, y1, x2, mid);</span><br><span class="line">        <span class="keyword">if</span>(x) r = mid;</span><br><span class="line">        <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ans[id][<span class="number">3</span>] = l;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// down</span></span><br><span class="line">    l = y1, r = y2;</span><br><span class="line">    <span class="keyword">while</span>(l &lt; r) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = ((l + r) &amp; <span class="number">1</span>) ? ((l + r) &gt;&gt; <span class="number">1</span>) + <span class="number">1</span> : ((l + r) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        x = <span class="built_in">query</span>(x1, mid, x2, y2);</span><br><span class="line">        <span class="keyword">if</span>(x) l = mid;</span><br><span class="line">        <span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ans[id][<span class="number">1</span>] = r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">int</span> u = <span class="built_in">lr</span>();</span><br><span class="line">    <span class="keyword">if</span>(u) &#123;</span><br><span class="line">        <span class="built_in">queryRec</span>(<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, u, n);</span><br><span class="line">        <span class="built_in">queryRec</span>(<span class="number">1</span>, u + <span class="number">1</span>, <span class="number">1</span>, n, n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        u = <span class="built_in">ud</span>();</span><br><span class="line">        <span class="built_in">queryRec</span>(<span class="number">0</span>, <span class="number">1</span>, u + <span class="number">1</span>, n, n);</span><br><span class="line">        <span class="built_in">queryRec</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, n, u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;!&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">1</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">3</span>; ++j) <span class="built_in">printf</span>(<span class="string">&quot; %d&quot;</span>, ans[i][j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">fflush</span>(stdout);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="C-Sonya-and-Problem-Without-a-Legend"><a href="#C-Sonya-and-Problem-Without-a-Legend" class="headerlink" title="C. Sonya and Problem Without a Legend"></a>C. Sonya and Problem Without a Legend</h1><p>要严格单调增，不好求。尝试让每第 $i$ 个元素减掉 $i$, 即加上一个等差数列 $(1, 1)$，减出来的数列求一下其非严格单调递增的结果，再还原就能得到一个严格单调递增的数组。且容易知道减掉后答案是不会变的。</p><p>怎么求这个非严格单调递增数列呢？为了让答案尽可能小，第 $i$ 个元素要么不变（已经符合严格不下降的条件），要么就变成第 $i-1$ 个元素。</p><p>这是因为：如果变得比第 $i-1$ 个元素更大的话，不仅当前答案会增加，对之后的修改也有弊无利。故可以推出：最终的数组中所有元素的值都是原数组的某一个元素值。</p><p>再看 $n\leq 3000$, 考虑 $O(n^2)$ 的动态规划。设 $dp[i][j]$ 表示修改完成前 $i$ 个数，且第 $i$ 个数变成了原数组<strong>第 $j$ 大</strong>的数的答案。</p><p>那么</p><script type="math/tex; mode=display">dp[i][j]=min(dp[i-1][m]) + |a[i]-b[j]|,1 \leq m \leq j</script><p>其中 $b$ 是原数组排序后的数组。</p><p>这个式子是 $O(n^3)$ 的。但其实可以用滚动数组优化掉对 $m$ 的枚举, 伪代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">for i from 1 to n</span><br><span class="line">int res = INF</span><br><span class="line">for j from 1 to n</span><br><span class="line">res = min(res, dp[i - 1][j])</span><br><span class="line">dp[i][j] = res + abs(a[i] - b[j])</span><br></pre></td></tr></table></figure><p><strong>代码</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">3005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn], b[maxn];</span><br><span class="line"><span class="keyword">int</span> dp[maxn][maxn];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) cin &gt;&gt; a[i], a[i] -= i, b[i] = a[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) dp[i][j] = inf;</span><br><span class="line">    <span class="built_in">sort</span>(b + <span class="number">1</span>, b + <span class="number">1</span> + n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) dp[<span class="number">1</span>][i] = <span class="built_in">abs</span>(a[<span class="number">1</span>] - b[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> res = inf;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">            res = <span class="built_in">min</span>(dp[i - <span class="number">1</span>][j], res);</span><br><span class="line">            dp[i][j] = res + <span class="built_in">abs</span>(a[i] - b[j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans = inf;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        ans = <span class="built_in">min</span>(ans, dp[n][i]);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">补ABC题</summary>
    
    
    
    <category term="XCPC" scheme="https://eykenis.github.io/categories/XCPC/"/>
    
    
    <category term="Codeforces" scheme="https://eykenis.github.io/tags/Codeforces/"/>
    
  </entry>
  
  <entry>
    <title>Educational Codeforces Round 115 (Rated for Div. 2)</title>
    <link href="https://eykenis.github.io/2021/11/03/Educational-Codeforces-Round-115-Rated-for-Div-2/"/>
    <id>https://eykenis.github.io/2021/11/03/Educational-Codeforces-Round-115-Rated-for-Div-2/</id>
    <published>2021-11-03T13:28:09.000Z</published>
    <updated>2022-04-22T06:35:52.576Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-Delete-Two-Elements"><a href="#C-Delete-Two-Elements" class="headerlink" title="C. Delete Two Elements"></a>C. Delete Two Elements</h1><p><strong>题意</strong></p><p>删去两个数，使原数组平均值不变，问有多少种不同的删法</p><p><strong>分析</strong></p><p>先算出平均数，再哈希一下求组合数即可。</p><p>$ans+=\sum_{i=1}^{n}num[a[i]]<em>num[2</em>avr-a[i]],a[i]\neq avr \&amp;\&amp; a[i]&lt;avr,$</p><p>$ans+=C_{num[avr]}^{2}$.</p><p><strong>代码</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @file    :deb.cpp</span></span><br><span class="line"><span class="comment">  * @brief   :</span></span><br><span class="line"><span class="comment">  * @date    :2021-10-12</span></span><br><span class="line"><span class="comment">  * @Motto   :Love Sakurai Yamauchi Forever</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fors(i, a, b) for(int i = (a); i &lt;= (b); ++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson k&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson k&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) ((x)&amp;(-(x)))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(a) memset(a, 0, sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DDLC_ESCAPE_PLAN_FAILED ios::sync_with_stdio(false), cin.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> dinf = <span class="number">1e100</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="comment">//const ll linf = 9223372036854775807LL;</span></span><br><span class="line"><span class="comment">// const ll linf = 1e18;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line">map&lt;<span class="keyword">double</span>,<span class="keyword">int</span>&gt; mp;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    DDLC_ESCAPE_PLAN_FAILED;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span>(t--) &#123;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        <span class="keyword">int</span> rhs;</span><br><span class="line">        <span class="keyword">double</span> sum = <span class="number">0</span>;</span><br><span class="line">        fors (i, <span class="number">1</span>, n) &#123; cin &gt;&gt; rhs; mp[rhs]++; sum += rhs;&#125;</span><br><span class="line">        sum /= n;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;x:mp)&#123;</span><br><span class="line">            <span class="keyword">if</span>(x.first &gt; sum) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">if</span>(x.first == sum) ans += (x.second * (x.second - <span class="number">1</span>)) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">else</span> ans += x.second * (mp[<span class="number">2</span> * sum - x.first]);</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">        mp.<span class="built_in">clear</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="D-Training-Session"><a href="#D-Training-Session" class="headerlink" title="D. Training Session"></a>D. Training Session</h1><p><strong>分析</strong></p><p>要求的事件为：3个标题都不同 或 3个标题难度都不同</p><p>考虑对立事件：3个有的标题相同 且 3个有的难度相同</p><p><strong>代码</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @file    :deb.cpp</span></span><br><span class="line"><span class="comment">  * @brief   :</span></span><br><span class="line"><span class="comment">  * @date    :2021-10-12</span></span><br><span class="line"><span class="comment">  * @Motto   :Love Sakurai Yamauchi Forever</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fors(i, a, b) for(int i = (a); i &lt;= (b); ++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson k&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson k&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) ((x)&amp;(-(x)))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(a) memset(a, 0, sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DDLC_ESCAPE_PLAN_FAILED ios::sync_with_stdio(false), cin.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> dinf = <span class="number">1e100</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="comment">//const ll linf = 9223372036854775807LL;</span></span><br><span class="line"><span class="comment">// const ll linf = 1e18;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> ab[maxn], ba[maxn];</span><br><span class="line"><span class="keyword">int</span> a[maxn], b[maxn];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    DDLC_ESCAPE_PLAN_FAILED;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span>(t--) &#123;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        fors(i , <span class="number">1</span>, n) cin &gt;&gt; a[i] &gt;&gt; b[i], ab[a[i]]++, ba[b[i]]++;</span><br><span class="line">        <span class="keyword">int</span> ans = n * (n - <span class="number">1</span>) * (n - <span class="number">2</span>) / <span class="number">6</span>;</span><br><span class="line">        fors(i, <span class="number">1</span>, n) &#123;</span><br><span class="line">            <span class="keyword">int</span> res = ab[a[i]] - <span class="number">1</span>;</span><br><span class="line">            res *= ba[b[i]] - <span class="number">1</span>;</span><br><span class="line">            ans -= res;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">        fors(i, <span class="number">1</span>, n) ab[a[i]]--, ba[b[i]]--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">平凡解题报告</summary>
    
    
    
    <category term="XCPC" scheme="https://eykenis.github.io/categories/XCPC/"/>
    
    
    <category term="Codeforces" scheme="https://eykenis.github.io/tags/Codeforces/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces Round 747 (Div. 2)</title>
    <link href="https://eykenis.github.io/2021/10/09/Codeforces-Round-747-Div-2/"/>
    <id>https://eykenis.github.io/2021/10/09/Codeforces-Round-747-Div-2/</id>
    <published>2021-10-09T01:15:13.000Z</published>
    <updated>2022-04-22T07:00:12.307Z</updated>
    
    <content type="html"><![CDATA[<p>上蓝了！</p><h1 id="A-Consecutive-Sum-Riddle"><a href="#A-Consecutive-Sum-Riddle" class="headerlink" title="A. Consecutive Sum Riddle"></a>A. Consecutive Sum Riddle</h1><p><strong>题意</strong></p><p>给一个$n$，你需要构造一个整数区间$[L,R]$,其和等于$n$<br><strong>分析</strong></p><p>取$[-n+1,n]$即可。</p><h1 id="B-Special-Numbers"><a href="#B-Special-Numbers" class="headerlink" title="B. Special Numbers"></a>B. Special Numbers</h1><p><strong>题意</strong></p><p>给出一个 $n$ , 另一个数 $m$ 如果可以表示成 $n$ 的不同幂次之和，则称 $m$ 是 special 的。现在给出 $n$， 将所有 special 的数升序排序，问第 $k$ 个数是多少。</p><p><strong>分析</strong></p><p>假如一个数是 $n^0+n^1+n^4$ ， 我们不妨用二进制表示，转化为 $10011_{(2)}$ ，也就是说现在给了一个二进制的数，但是其每个位的权值要乘以 $n$. 那么第 $k$ 个数表示成二进制自然就是 $k_{(2)}$ 本身了，模拟快速幂求即可。</p><p><strong>代码</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fors(i, a, b) for(int i = (a); i &lt;= (b); ++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson k&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson k&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) ((x)&amp;(-(x)))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(a) memset(a, 0, sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DDLC_ESCAPE_PLAN_FAILED ios::sync_with_stdio(false), cin.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    DDLC_ESCAPE_PLAN_FAILED;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span>(t--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n, k;</span><br><span class="line">        cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(k) &#123;</span><br><span class="line">            <span class="keyword">if</span>(k &amp; <span class="number">1</span>) &#123;</span><br><span class="line">                ans = (ans + x) % mod;</span><br><span class="line">            &#125;</span><br><span class="line">            x = (x * n) % mod;</span><br><span class="line">            k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="C-Make-Them-Equal"><a href="#C-Make-Them-Equal" class="headerlink" title="C. Make Them Equal"></a>C. Make Them Equal</h1><p><strong>题意</strong></p><p>给一串字符串，你要通过一些操作把它的所有字符全部变成 $c$：</p><p>选择一个数字 $x, 1\leq x\leq n$. 字符串中所有下标 $i$ 中 $i\ mod\ x \neq 0$ 的下标都将被替换为 $c$.</p><p><strong>分析</strong></p><p>首先贪心考虑，如果 $x$ 取 $n$，那么 $[1,n-1]$ 必定全部都可以替换，接下来再取个 $n-1$，把 $n$ 替换即可。故不管怎样，答案最多为2.</p><p>所以只需要考虑答案为1的情况了。这里我们可以直接暴力统计所有不等于 $c$ 的下标的因数，如果不同因数的个数小于 $n$ ，说明一定可以找到一个 $x$ 使得所有字符为 $c$.</p><p><strong>代码</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fors(i, a, b) for(int i = (a); i &lt;= (b); ++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson k&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson k&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) ((x)&amp;(-(x)))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(a) memset(a, 0, sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DDLC_ESCAPE_PLAN_FAILED ios::sync_with_stdio(false), cin.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> dinf = <span class="number">1e100</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="comment">//const ll linf = 9223372036854775807LL;</span></span><br><span class="line"><span class="comment">// const ll linf = 1e18;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">3e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">bool</span> v[maxn];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    DDLC_ESCAPE_PLAN_FAILED;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(t--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        string s; <span class="keyword">char</span> c;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        s += <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">        string tmp;</span><br><span class="line">        cin &gt;&gt; c;</span><br><span class="line">        cin &gt;&gt; tmp;</span><br><span class="line">        s += tmp;</span><br><span class="line">        <span class="keyword">bool</span> flag = <span class="number">1</span>;</span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; pos;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) v[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="keyword">if</span>(s[i] != c) &#123;</span><br><span class="line">            flag = <span class="number">0</span>; pos.<span class="built_in">pb</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="number">0</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;i : pos) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!v[i]) v[i] = <span class="number">1</span>, cnt++;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j * j &lt;= i; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span>(i % j == <span class="number">0</span> &amp;&amp; !v[j]) v[j] = <span class="number">1</span>, cnt++;</span><br><span class="line">                <span class="keyword">if</span>(i % j == <span class="number">0</span> &amp;&amp; !v[i / j]) v[i / j] = <span class="number">1</span>, cnt++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cnt == n) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="number">2</span> &lt;&lt; endl;</span><br><span class="line">            cout &lt;&lt; n &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; n - <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            cout &lt;&lt; <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="keyword">if</span>(!v[i]) &#123;</span><br><span class="line">                cout &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="D-The-Number-of-Imposters"><a href="#D-The-Number-of-Imposters" class="headerlink" title="D. The Number of Imposters"></a>D. The Number of Imposters</h1><p><strong>题意</strong></p><p>有一张 $n$ 个节点的图，每条边都是单向边 $(i,j,c)$ 表示第 $i$ 个人说第 $j$ 个人是个说谎的人/说实话的人。且如果一个人是说谎的人，那他说的一定是假，否则一定是真。</p><p>问这张图最多有几个说实话的人。</p><p><strong>分析</strong></p><p>单向图其实可以直接转化为无向图，这是等价的。 $a$ 说 $b$ 是假的，其实和 $b$ 说 $a$ 假是一样的，可以列真值表证明。</p><p>而且，只要连通图中有一个人的真假确定了，其他人的真假一定也确定了。</p><p>所以，转化为无向图之后再记忆化搜索就可以了，对每个连通块进行 dfs ，$dp[i][0]$ 表示第 $i$ 人说谎的情况下他和他的子节点中说实话的人有多少；$dp[i][1]$ 表示 $i$ 说实话的情况下的答案。</p><p>注意矛盾的情况，搜索过程中每个节点要保存自己的当前真假情况，这样在子节点指回祖先节点时判断一下矛不矛盾就可以了。</p><p>所以对每个连通块搜索的根节点，假设其为实话或者谎话，分别 dfs 两次，取最大值即可。</p><hr><p>其实也可以写的更简单的，但是昨天越写越奇怪，有点没稳住，思路太乱了。</p><p>不仅思路较为冗杂，代码也特别丑qwq</p><p><strong>代码</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fors(i, a, b) for(int i = (a); i &lt;= (b); ++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson k&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson k&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) ((x)&amp;(-(x)))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(a) memset(a, 0, sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DDLC_ESCAPE_PLAN_FAILED ios::sync_with_stdio(false), cin.tie(0)</span></span><br><span class="line"><span class="comment">// #define int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> dinf = <span class="number">1e100</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="comment">//const ll linf = 9223372036854775807LL;</span></span><br><span class="line"><span class="comment">// const ll linf = 1e18;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> dp[maxn][<span class="number">2</span>]; <span class="comment">// i号节点说谎/不说谎的答案</span></span><br><span class="line">vector&lt;pii&gt; e[maxn];</span><br><span class="line"><span class="keyword">bool</span> v[maxn];</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> fa[maxn];</span><br><span class="line"><span class="keyword">int</span> st[maxn]; <span class="comment">// 当前的status 1说谎，2不说谎</span></span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; tmp;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> l)</span> </span>&#123; <span class="comment">// l:0说谎，1不说谎</span></span><br><span class="line">    tmp.<span class="built_in">pb</span>(i);</span><br><span class="line">    st[i] = l + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : e[i]) &#123;</span><br><span class="line">        <span class="keyword">if</span>(st[x.first]) &#123;</span><br><span class="line">            <span class="keyword">if</span>(l == <span class="number">1</span> &amp;&amp; x.second == <span class="number">0</span> &amp;&amp; st[x.first] == <span class="number">2</span>)&#123;</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(l == <span class="number">1</span> &amp;&amp; x.second == <span class="number">1</span> &amp;&amp; st[x.first] == <span class="number">1</span>) &#123;</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(l == <span class="number">0</span> &amp;&amp; x.second == <span class="number">1</span> &amp;&amp; st[x.first] == <span class="number">2</span>) &#123;</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(l == <span class="number">0</span> &amp;&amp; x.second == <span class="number">0</span> &amp;&amp; st[x.first] == <span class="number">1</span>) &#123;</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(l == <span class="number">1</span> &amp;&amp; x.second == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">dfs</span>(x.first, <span class="number">0</span>);</span><br><span class="line">            dp[i][<span class="number">1</span>] += dp[x.first][<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(l == <span class="number">1</span> &amp;&amp; x.second == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">dfs</span>(x.first, <span class="number">1</span>);</span><br><span class="line">            dp[i][<span class="number">1</span>] += dp[x.first][<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(l == <span class="number">0</span> &amp;&amp; x.second == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">dfs</span>(x.first, <span class="number">1</span>);</span><br><span class="line">            dp[i][<span class="number">0</span>] += dp[x.first][<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">dfs</span>(x.first, <span class="number">0</span>);</span><br><span class="line">            dp[i][<span class="number">0</span>] += dp[x.first][<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    DDLC_ESCAPE_PLAN_FAILED;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span>(t--) &#123;</span><br><span class="line">        cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">        flag = <span class="number">0</span>;</span><br><span class="line">        fors(i, <span class="number">1</span>, n) &#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = <span class="number">0</span>, dp[i][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">            fa[i] = i;</span><br><span class="line">            v[i] = <span class="number">0</span>;</span><br><span class="line">            st[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> l, r; string s;</span><br><span class="line">        <span class="keyword">while</span>(m--) &#123;</span><br><span class="line">            cin &gt;&gt; l &gt;&gt; r &gt;&gt; s;</span><br><span class="line">            <span class="keyword">if</span>(s[<span class="number">0</span>] == <span class="string">&#x27;i&#x27;</span>) &#123;</span><br><span class="line">                e[l].<span class="built_in">pb</span>(&#123;r, <span class="number">0</span>&#125;);</span><br><span class="line">                e[r].<span class="built_in">pb</span>(&#123;l, <span class="number">0</span>&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                e[l].<span class="built_in">pb</span>(&#123;r, <span class="number">1</span>&#125;);</span><br><span class="line">                e[r].<span class="built_in">pb</span>(&#123;l, <span class="number">1</span>&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!st[i]) &#123;</span><br><span class="line">                tmp.<span class="built_in">clear</span>();</span><br><span class="line">                <span class="built_in">dfs</span>(i, <span class="number">0</span>);</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;x : tmp) st[x] = <span class="number">0</span>;</span><br><span class="line">                <span class="built_in">dfs</span>(i, <span class="number">1</span>);</span><br><span class="line">                ans += <span class="built_in">max</span>(dp[i][<span class="number">0</span>], dp[i][<span class="number">1</span>]);</span><br><span class="line">                <span class="keyword">if</span>(flag) <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag) cout &lt;&lt; <span class="number">-1</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">else</span> cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">        fors(i, <span class="number">1</span>, n) e[i].<span class="built_in">clear</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="E1-Rubik’s-Cube-Coloring-easy-version"><a href="#E1-Rubik’s-Cube-Coloring-easy-version" class="headerlink" title="E1. Rubik’s Cube Coloring (easy version)"></a>E1. Rubik’s Cube Coloring (easy version)</h1><p>这种E1还是放Div. 3去吧，能当A做了，我不好说。</p><p>属于是送经验了（</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fors(i, a, b) for(int i = (a); i &lt;= (b); ++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson k&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson k&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) ((x)&amp;(-(x)))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(a) memset(a, 0, sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DDLC_ESCAPE_PLAN_FAILED ios::sync_with_stdio(false), cin.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> dinf = <span class="number">1e100</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="comment">//const ll linf = 9223372036854775807LL;</span></span><br><span class="line"><span class="comment">// const ll linf = 1e18;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fpow</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(y) &#123;</span><br><span class="line">        <span class="keyword">if</span>(y &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            ans = (ans * x) % mod;</span><br><span class="line">        &#125;</span><br><span class="line">        x = (x * x) % mod;</span><br><span class="line">        y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    DDLC_ESCAPE_PLAN_FAILED;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    t = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(t--) &#123;</span><br><span class="line">        <span class="keyword">int</span> k;</span><br><span class="line">        cin &gt;&gt; k;</span><br><span class="line">        <span class="keyword">int</span> p = (<span class="number">1LL</span> &lt;&lt; k) - <span class="number">1LL</span>;</span><br><span class="line">        cout &lt;&lt; (<span class="built_in">fpow</span>(<span class="number">4</span>, p - <span class="number">1LL</span>) * <span class="number">6LL</span>) % mod &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">蓝名力</summary>
    
    
    
    <category term="XCPC" scheme="https://eykenis.github.io/categories/XCPC/"/>
    
    
    <category term="Codeforces" scheme="https://eykenis.github.io/tags/Codeforces/"/>
    
  </entry>
  
  <entry>
    <title>luogu</title>
    <link href="https://eykenis.github.io/2021/09/23/luogu/"/>
    <id>https://eykenis.github.io/2021/09/23/luogu/</id>
    <published>2021-09-23T11:51:33.000Z</published>
    <updated>2022-04-22T06:36:31.818Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="9-23"><a href="#9-23" class="headerlink" title="9.23"></a>9.23</h1><h2 id="P2032-扫描"><a href="#P2032-扫描" class="headerlink" title="P2032 扫描"></a><a href="https://www.luogu.com.cn/problem/P2032">P2032 扫描</a></h2><p>单调队列求滑动窗口最大值</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fors(i, a, b) for(int i = (a); i &lt;= (b); ++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson k&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson k&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) ((x)&amp;(-(x)))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(a) memset(a, 0, sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DDLC_ESCAPE_PLAN_FAILED ios::sync_with_stdio(false), cin.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> dinf = <span class="number">1e100</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="comment">//const ll linf = 9223372036854775807LL;</span></span><br><span class="line"><span class="comment">// const ll linf = 1e18;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">deque&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; q;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pu</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a[i] &gt;= q.<span class="built_in">front</span>().first)&#123;</span><br><span class="line">        q.<span class="built_in">clear</span>();</span><br><span class="line">        q.<span class="built_in">push_front</span>(&#123;a[i], i&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(a[i] &gt;= q.<span class="built_in">back</span>().first) q.<span class="built_in">pop_back</span>();</span><br><span class="line">        q.<span class="built_in">push_back</span>(&#123;a[i], i&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    DDLC_ESCAPE_PLAN_FAILED;</span><br><span class="line">    <span class="keyword">int</span> n, k;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    fors(i, <span class="number">1</span>, n)&#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    q.<span class="built_in">push_front</span>(&#123;a[<span class="number">1</span>], <span class="number">1</span>&#125;);</span><br><span class="line">    fors(i, <span class="number">2</span>, k)&#123;</span><br><span class="line">        <span class="built_in">pu</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; q.<span class="built_in">front</span>().first &lt;&lt; endl;</span><br><span class="line">    fors(i, k + <span class="number">1</span>, n)&#123;</span><br><span class="line">        <span class="keyword">while</span>(q.<span class="built_in">front</span>().second &lt; <span class="number">1</span> - k + i)&#123;</span><br><span class="line">            q.<span class="built_in">pop_front</span>(); </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">pu</span>(i);</span><br><span class="line">        cout &lt;&lt; q.<span class="built_in">front</span>().first &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="P1440-求m区间内的最小值"><a href="#P1440-求m区间内的最小值" class="headerlink" title="P1440 求m区间内的最小值"></a><a href="https://www.luogu.com.cn/problem/P1440#submit">P1440 求m区间内的最小值</a></h2><p>单调队列の双倍经验</p><p>注意要卡常（不开LL，用快读，printf）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fors(i, a, b) for(int i = (a); i &lt;= (b); ++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson k&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson k&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) ((x)&amp;(-(x)))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(a) memset(a, 0, sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DDLC_ESCAPE_PLAN_FAILED ios::sync_with_stdio(false), cin.tie(0)</span></span><br><span class="line"><span class="comment">// #define int long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> dinf = <span class="number">1e100</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="comment">//const ll linf = 9223372036854775807LL;</span></span><br><span class="line"><span class="comment">// const ll linf = 1e18;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">deque&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; q;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pu</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        q.<span class="built_in">push_front</span>(&#123;a[i], i&#125;);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(a[i] &lt;= q.<span class="built_in">front</span>().first)&#123;</span><br><span class="line">        q.<span class="built_in">clear</span>();</span><br><span class="line">        q.<span class="built_in">push_front</span>(&#123;a[i], i&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(a[i] &lt;= q.<span class="built_in">back</span>().first) q.<span class="built_in">pop_back</span>();</span><br><span class="line">        q.<span class="built_in">push_back</span>(&#123;a[i], i&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">rd</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> data = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> f = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch &lt; <span class="string">&#x27;0&#x27;</span>||ch &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">            f = <span class="number">-1</span>;</span><br><span class="line">        ch = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch &gt;= <span class="string">&#x27;0&#x27;</span>&amp;&amp;ch &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        data = (data&lt;&lt;<span class="number">3</span>) + (data&lt;&lt;<span class="number">1</span>) + ch - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        ch = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f * data; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// DDLC_ESCAPE_PLAN_FAILED;</span></span><br><span class="line">    <span class="keyword">int</span> n, k;</span><br><span class="line">    n = <span class="built_in">rd</span>(), k = <span class="built_in">rd</span>();</span><br><span class="line">    fors(i, <span class="number">1</span>, n)&#123;</span><br><span class="line">        a[i] = <span class="built_in">rd</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;0\n&quot;</span>);</span><br><span class="line">    q.<span class="built_in">push_front</span>(&#123;a[<span class="number">1</span>], <span class="number">1</span>&#125;);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, q.<span class="built_in">front</span>().first);</span><br><span class="line">    fors(i, <span class="number">2</span>, n - <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">while</span>(!q.<span class="built_in">empty</span>() &amp;&amp; q.<span class="built_in">front</span>().second &lt; <span class="number">1</span> - k + i)&#123;</span><br><span class="line">            q.<span class="built_in">pop_front</span>(); </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">pu</span>(i);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, q.<span class="built_in">front</span>().first);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="P1886-滑动窗口"><a href="#P1886-滑动窗口" class="headerlink" title="P1886 滑动窗口"></a><a href="https://www.luogu.com.cn/problem/P1886">P1886 滑动窗口</a></h2><p>三倍经验，滑动窗口也可以写得更简洁。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line">deque&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; mx, mn;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; x, y;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, k;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">        <span class="keyword">while</span>(!mx.<span class="built_in">empty</span>() &amp;&amp; a[i] &gt;= mx.<span class="built_in">back</span>().first) mx.<span class="built_in">pop_back</span>();</span><br><span class="line">        <span class="keyword">while</span>(!mx.<span class="built_in">empty</span>() &amp;&amp; mx.<span class="built_in">front</span>().second &lt; i - k + <span class="number">1</span>) mx.<span class="built_in">pop_front</span>();</span><br><span class="line">        mx.<span class="built_in">push_back</span>(&#123;a[i], i&#125;);</span><br><span class="line">        <span class="keyword">while</span>(!mn.<span class="built_in">empty</span>() &amp;&amp; a[i] &lt;= mn.<span class="built_in">back</span>().first) mn.<span class="built_in">pop_back</span>();</span><br><span class="line">        <span class="keyword">while</span>(!mn.<span class="built_in">empty</span>() &amp;&amp; mn.<span class="built_in">front</span>().second &lt; i - k + <span class="number">1</span>) mn.<span class="built_in">pop_front</span>();</span><br><span class="line">        mn.<span class="built_in">push_back</span>(&#123;a[i], i&#125;);</span><br><span class="line">        <span class="keyword">if</span>(i &gt;= k) x.<span class="built_in">push_back</span>(mx.<span class="built_in">front</span>().first), y.<span class="built_in">push_back</span>(mn.<span class="built_in">front</span>().first);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; x.<span class="built_in">size</span>(); ++i) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, y[i]); <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; y.<span class="built_in">size</span>(); ++i) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, x[i]); <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="P3143-USACO16OPEN-Diamond-Collector-S"><a href="#P3143-USACO16OPEN-Diamond-Collector-S" class="headerlink" title="P3143 [USACO16OPEN]Diamond Collector S"></a><a href="https://www.luogu.com.cn/problem/P3143">P3143 [USACO16OPEN]Diamond Collector S</a></h2><p>双指针，注意题目要求两个区间不能重叠，故要左右分别枚举，再遍历更新答案。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">50005</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="keyword">int</span> L[maxn] = &#123;<span class="number">0</span>&#125;, R[maxn] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, k;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) cin &gt;&gt; a[i];</span><br><span class="line">    <span class="built_in">sort</span>(a, a + n);</span><br><span class="line">    <span class="keyword">int</span> r = <span class="number">0</span>, l = n - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">        <span class="keyword">while</span>(r &lt; n &amp;&amp; a[r] - a[i] &lt;= k) r++;</span><br><span class="line">        R[i] = r - i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i)&#123;</span><br><span class="line">        <span class="keyword">while</span>(l &gt;= <span class="number">0</span> &amp;&amp; a[i] - a[l] &lt;= k) l--;</span><br><span class="line">        L[i] = i - l;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>, lmax = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, lmax + R[i]);</span><br><span class="line">        lmax = <span class="built_in">max</span>(L[i], lmax);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="9-25"><a href="#9-25" class="headerlink" title="9.25"></a>9.25</h1><p>打了网络赛才发现，自己的数学就是一坨⑩，让人完全看不下去。学！</p><h2 id="P1143-进制转换"><a href="#P1143-进制转换" class="headerlink" title="P1143 进制转换"></a><a href="https://www.luogu.com.cn/problem/P1143">P1143 进制转换</a></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fors(i, a, b) for(int i = (a); i &lt;= (b); ++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson k&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson k&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) ((x)&amp;(-(x)))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(a) memset(a, 0, sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DDLC_ESCAPE_PLAN_FAILED ios::sync_with_stdio(false), cin.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> dinf = <span class="number">1e100</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="comment">//const ll linf = 9223372036854775807LL;</span></span><br><span class="line"><span class="comment">// const ll linf = 1e18;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    DDLC_ESCAPE_PLAN_FAILED;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    t = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        string s;</span><br><span class="line">        cin &gt;&gt; s;</span><br><span class="line">        <span class="keyword">int</span> to;</span><br><span class="line">        cin &gt;&gt; to;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i] &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; s[i] &lt;= <span class="string">&#x27;Z&#x27;</span>)&#123;</span><br><span class="line">                ans = ans * n + s[i] - <span class="string">&#x27;A&#x27;</span> + <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> ans = ans * n + s[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        string fin;</span><br><span class="line">        <span class="keyword">while</span>(ans)&#123;</span><br><span class="line">            <span class="keyword">int</span> res = ans % to;</span><br><span class="line">            <span class="keyword">if</span>(res &gt;= <span class="number">10</span>) res = res - <span class="number">10</span> + <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">            <span class="keyword">else</span> res += <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            fin += res;</span><br><span class="line">            ans /= to;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">reverse</span>(fin.<span class="built_in">begin</span>(), fin.<span class="built_in">end</span>());</span><br><span class="line">        cout &lt;&lt; fin &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="P1469-找筷子"><a href="#P1469-找筷子" class="headerlink" title="P1469 找筷子"></a><a href="https://www.luogu.com.cn/problem/P1469">P1469 找筷子</a></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">int</span> x, ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(n--) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x), ans ^= x;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="P1100-高低位交换"><a href="#P1100-高低位交换" class="headerlink" title="P1100 高低位交换"></a><a href="https://www.luogu.com.cn/problem/P1100">P1100 高低位交换</a></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> x;</span><br><span class="line">    cin &gt;&gt; x;</span><br><span class="line">    cout &lt;&lt; (x &lt;&lt; <span class="number">16</span>) + (x &gt;&gt; <span class="number">16</span>) &lt;&lt; endl; </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="P1017-NOIP2000-提高组-进制转换"><a href="#P1017-NOIP2000-提高组-进制转换" class="headerlink" title="P1017 [NOIP2000 提高组] 进制转换"></a><a href="https://www.luogu.com.cn/problem/P1017">P1017 [NOIP2000 提高组] 进制转换</a></h2><p>余数可能出现负数，将其加上进制数，将商减去进制数即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x, to;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;to);</span><br><span class="line">    string ans;</span><br><span class="line">    <span class="keyword">int</span> r = x;</span><br><span class="line">    <span class="keyword">while</span>(x)&#123;</span><br><span class="line">        <span class="keyword">int</span> res = x % to;</span><br><span class="line">        <span class="keyword">if</span>(res &lt; <span class="number">0</span>) res -= to, x += to;</span><br><span class="line">        <span class="keyword">if</span>(res &gt;= <span class="number">10</span>) res = res - <span class="number">10</span> + <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span> res = res + <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        ans += res;</span><br><span class="line">        x /= to;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">reverse</span>(ans.<span class="built_in">begin</span>(), ans.<span class="built_in">end</span>());</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d=%s(base%d)&quot;</span>, r, ans.<span class="built_in">c_str</span>(), to);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="P1866-编号-洛谷"><a href="#P1866-编号-洛谷" class="headerlink" title="P1866 编号 - 洛谷"></a><a href="https://www.luogu.com.cn/problem/P1866">P1866 编号 - 洛谷</a></h2><p>高中最简单的排列组合方法之一——优限法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">55</span>;</span><br><span class="line"><span class="keyword">int</span> m[maxn];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;N);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;m[i]);</span><br><span class="line">    <span class="built_in">sort</span>(m + <span class="number">1</span>, m + <span class="number">1</span> + N);</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i)&#123;</span><br><span class="line">        ans = (ans * (m[i] - i + <span class="number">1</span>)) % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="P2822-NOIP2016-提高组-组合数问题"><a href="#P2822-NOIP2016-提高组-组合数问题" class="headerlink" title="P2822 [NOIP2016 提高组] 组合数问题"></a><a href="https://www.luogu.com.cn/problem/P2822">P2822 [NOIP2016 提高组] 组合数问题</a></h2><p>二维前缀和</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> t, k;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2005</span>;</span><br><span class="line"><span class="keyword">int</span> c[maxn][maxn] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> pre[maxn][maxn] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">prework</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    c[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    pre[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2000</span>; ++i)&#123;</span><br><span class="line">        c[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        pre[i][<span class="number">0</span>] = (<span class="number">1</span> % k == <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">2000</span>; ++j)&#123;</span><br><span class="line">            c[i][j] = c[i - <span class="number">1</span>][j - <span class="number">1</span>] + c[i - <span class="number">1</span>][j];</span><br><span class="line">            c[i][j] %= k;</span><br><span class="line">            pre[i][j] = pre[i - <span class="number">1</span>][j] + pre[i][j - <span class="number">1</span>] - pre[i - <span class="number">1</span>][j - <span class="number">1</span>] + (j &lt;= i &amp;&amp; c[i][j] == <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; t &gt;&gt; k;</span><br><span class="line">    <span class="built_in">prework</span>();</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> n, m;</span><br><span class="line">        cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">        <span class="keyword">if</span>(n &lt; m) m = n;</span><br><span class="line">        cout &lt;&lt; pre[n][m] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="P2789-直线交点数"><a href="#P2789-直线交点数" class="headerlink" title="P2789 直线交点数"></a><a href="https://www.luogu.com.cn/problem/P2789">P2789 直线交点数</a></h2><p>注意构造好的搜索方式</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">bool</span> f[<span class="number">100005</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!f[r]) f[r] = <span class="number">1</span>, ans++;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> s = p; s; --s)&#123;</span><br><span class="line">        <span class="built_in">dfs</span>(p - s, r + (p - s) * s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="built_in">dfs</span>(n, <span class="number">0</span>);</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="P3913-车的攻击"><a href="#P3913-车的攻击" class="headerlink" title="P3913 车的攻击"></a><a href="https://www.luogu.com.cn/problem/P3913">P3913 车的攻击</a></h2><p>容斥</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line">unordered_map&lt;<span class="keyword">int</span>, <span class="keyword">bool</span>&gt; r, c;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; ++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> x, y;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">        r[x] = <span class="number">1</span>, c[y] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; (r.<span class="built_in">size</span>() + c.<span class="built_in">size</span>()) * n - r.<span class="built_in">size</span>() * c.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="P2638-安全系统"><a href="#P2638-安全系统" class="headerlink" title="P2638 安全系统"></a><a href="https://www.luogu.com.cn/problem/P2638#submit">P2638 安全系统</a></h2><p>组合数学只会瞎搞</p><p>隔板法，请</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int unsigned long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> n, a, b;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">55</span>;</span><br><span class="line"><span class="keyword">int</span> c[maxn][maxn] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">prework</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    c[<span class="number">1</span>][<span class="number">0</span>] = c[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    c[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">50</span>; ++i)&#123;</span><br><span class="line">        c[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; ++j)&#123;</span><br><span class="line">            c[i][j] = c[i - <span class="number">1</span>][j - <span class="number">1</span>] + c[i - <span class="number">1</span>][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">prework</span>();</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= a; ++i)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= b; ++j)&#123;</span><br><span class="line">            ans += c[n + i - <span class="number">1</span>][n - <span class="number">1</span>] * c[n + j - <span class="number">1</span>][n - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="9-26"><a href="#9-26" class="headerlink" title="9.26"></a>9.26</h1><h2 id="P1029-NOIP2001-普及组-最大公约数和最小公倍数问题"><a href="#P1029-NOIP2001-普及组-最大公约数和最小公倍数问题" class="headerlink" title="P1029 [NOIP2001 普及组] 最大公约数和最小公倍数问题"></a><a href="https://www.luogu.com.cn/problem/P1029">P1029 [NOIP2001 普及组] 最大公约数和最小公倍数问题</a></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">    cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">    <span class="comment">// 找x*y的因子</span></span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> u = x * y;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i * i &lt;= u; ++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(u % i) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">int</span> r1 = i, r2 = u / i;</span><br><span class="line">        <span class="keyword">int</span> p = __gcd(r1, r2);</span><br><span class="line">        <span class="keyword">if</span>(p != x || u / p != y) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span>(r1 == r2) ans++;</span><br><span class="line">        <span class="keyword">else</span> ans += <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="P1072-NOIP2009-提高组-Hankson-的趣味题"><a href="#P1072-NOIP2009-提高组-Hankson-的趣味题" class="headerlink" title="P1072 [NOIP2009 提高组] Hankson 的趣味题"></a><a href="https://www.luogu.com.cn/problem/P1072">P1072 [NOIP2009 提高组] Hankson 的趣味题</a></h2><p>菜</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// #define int long long</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b==<span class="number">0</span>?a:<span class="built_in">gcd</span>(b,a%b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a0, a1, b0, b1;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>, &amp;a0, &amp;a1, &amp;b0, &amp;b1);</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i * i &lt;= b1; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(b1 % i) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(i%a1==<span class="number">0</span>&amp;&amp;<span class="built_in">gcd</span>(i/a1,a0/a1)==<span class="number">1</span>&amp;&amp;<span class="built_in">gcd</span>(b1/b0,b1/i)==<span class="number">1</span>) ans++;</span><br><span class="line">            <span class="keyword">int</span> y = b1 / i;</span><br><span class="line">            <span class="keyword">if</span>(i == y) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(y%a1==<span class="number">0</span>&amp;&amp;<span class="built_in">gcd</span>(y/a1,a0/a1)==<span class="number">1</span>&amp;&amp;<span class="built_in">gcd</span>(b1/b0,b1/y)==<span class="number">1</span>) ans++;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="P1908-逆序对"><a href="#P1908-逆序对" class="headerlink" title="P1908 逆序对"></a><a href="https://www.luogu.com.cn/problem/P1908">P1908 逆序对</a></h2><p>就多练</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="keyword">int</span> tmp[maxn];</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(r == l) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">merge</span>(l, mid), <span class="built_in">merge</span>(mid + <span class="number">1</span>, r);</span><br><span class="line">    <span class="keyword">int</span> p1 = l, p2 = mid + <span class="number">1</span>, p3 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(p1 &lt;= mid || p2 &lt;= r)&#123;</span><br><span class="line">        <span class="keyword">if</span>((p1 &gt; mid) || (p2 &lt;= r &amp;&amp; a[p1] &gt; a[p2])) tmp[p3++] = a[p2++], ans += mid - p1 + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> tmp[p3++] = a[p1++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = l; i &lt;= r; ++i)&#123;</span><br><span class="line">        a[i] = tmp[i - l];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;a[i]);</span><br><span class="line">    <span class="built_in">merge</span>(<span class="number">1</span>, n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="P1966-NOIP2013-提高组-火柴排队"><a href="#P1966-NOIP2013-提高组-火柴排队" class="headerlink" title="P1966 [NOIP2013 提高组] 火柴排队"></a><a href="https://www.luogu.com.cn/problem/P1966#submit">P1966 [NOIP2013 提高组] 火柴排队</a></h2><p>先找出数学性质，知道可以让其中一组不动，另一组中每个火柴二分找到第一组中和自己最接近的高度的位置，然后按这个位置归并计数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e8</span> - <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> val, idx, midx;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> node&amp; x)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> val &lt; x.val;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> ==(<span class="keyword">const</span> <span class="keyword">int</span>&amp; x)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> val == x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;a[maxn], b[maxn], tmp[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bs</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">1</span>, r = n;</span><br><span class="line">    <span class="keyword">while</span>(l &lt; r)&#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(a[mid].val &gt;= x)&#123;</span><br><span class="line">            r = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(r == l) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">merge</span>(l, mid), <span class="built_in">merge</span>(mid + <span class="number">1</span>, r);</span><br><span class="line">    <span class="keyword">int</span> p1 = l, p2 = mid + <span class="number">1</span>, p3 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(p1 &lt;= mid || p2 &lt;= r)&#123;</span><br><span class="line">        <span class="keyword">if</span>(p1 &gt; mid || (p2 &lt;= r &amp;&amp; b[p2].midx &lt; b[p1].midx)) tmp[p3++] = b[p2++], ans += mid - p1 + <span class="number">1</span>, ans %= mod;</span><br><span class="line">        <span class="keyword">else</span> tmp[p3++] = b[p1++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = l; i &lt;= r; ++i) b[i] = tmp[i - l];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]), a[i].idx = i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;b[i]), b[i].idx = i;</span><br><span class="line">    <span class="built_in">sort</span>(a + <span class="number">1</span>, a + <span class="number">1</span> + n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> r = <span class="built_in">bs</span>(b[i].val);</span><br><span class="line">        b[i].midx = a[r].idx;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">merge</span>(<span class="number">1</span>, n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="9-29"><a href="#9-29" class="headerlink" title="9.29"></a>9.29</h1><p>前两天满课太难受了…都在补CF的题，感觉补CF的题效率有点低，一补就是一晚上还补不到几题。</p><p>看到CDQ分治本来想直接学，但发现树状数组没学，再往前又发现倍增的思想也不熟……我的知识还是没成体系啊</p><h2 id="P3374-【模板】树状数组-1"><a href="#P3374-【模板】树状数组-1" class="headerlink" title="P3374 【模板】树状数组 1"></a><a href="https://www.luogu.com.cn/problem/P3374">P3374 【模板】树状数组 1</a></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) x&amp;(-(x))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn], c[maxn];</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> k)</span></span>&#123; <span class="comment">// 单点加k</span></span><br><span class="line">    <span class="keyword">while</span>(x &lt;= n)&#123;</span><br><span class="line">        c[x] += k;</span><br><span class="line">        x += <span class="built_in">lowbit</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = x; i &lt;= n; i += <span class="built_in">lowbit</span>(i))&#123;</span><br><span class="line">        c[i] += y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123; <span class="comment">// sum of 1...x</span></span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x &gt;= <span class="number">1</span>)&#123;</span><br><span class="line">        ans += c[x];</span><br><span class="line">        x -= <span class="built_in">lowbit</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">intsum</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>(r) - <span class="built_in">sum</span>(l - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">int</span> z;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;z);</span><br><span class="line">        <span class="built_in">update</span>(i, z, n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> x, k;</span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;z, &amp;x, &amp;k);</span><br><span class="line">        <span class="keyword">if</span>(z == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="built_in">add</span>(x, k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">intsum</span>(x, k));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="P3368-【模板】树状数组-2"><a href="#P3368-【模板】树状数组-2" class="headerlink" title="P3368 【模板】树状数组 2"></a><a href="https://www.luogu.com.cn/problem/P3368">P3368 【模板】树状数组 2</a></h2><p>差分一下，就能把<strong>单点修改+区间查询</strong>变成<strong>单点查询+区间修改</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) x&amp;(-(x))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn], b[maxn], c[maxn];</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(x &lt;= n)&#123;</span><br><span class="line">        c[x] += k;</span><br><span class="line">        x += <span class="built_in">lowbit</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x &gt;= <span class="number">1</span>)&#123;</span><br><span class="line">        ans += c[x];</span><br><span class="line">        x -= <span class="built_in">lowbit</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) b[i] = a[i] - a[i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">add</span>(i, b[i]);</span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> z, x, y, k;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;z);</span><br><span class="line">        <span class="keyword">if</span>(z == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;x, &amp;y, &amp;k);</span><br><span class="line">            <span class="built_in">add</span>(x, k), <span class="built_in">add</span>(y + <span class="number">1</span>, -k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">sum</span>(x));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不过复习一下之后就回想起来，树状数组也确实很好理解，难怪是普及题啊</p><h2 id="P2345-USACO04OPEN-MooFest-G"><a href="#P2345-USACO04OPEN-MooFest-G" class="headerlink" title="P2345 [USACO04OPEN]MooFest G"></a><a href="https://www.luogu.com.cn/problem/P2345">P2345 [USACO04OPEN]MooFest G</a></h2><p>排序离散化后树状数组直接解，但是还没想清楚CDQ分治应该怎么做</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) ((x)&amp;(-(x)))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e4</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> v, x, id;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> node&amp; y)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x &lt; y.x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;a[maxn];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> node&amp; x, <span class="keyword">const</span> node&amp; y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x.v &lt; y.v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> c[maxn], s[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(x &lt;= n)&#123;</span><br><span class="line">        c[x] += k;</span><br><span class="line">        x += <span class="built_in">lowbit</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">adds</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(x &lt;= n)&#123;</span><br><span class="line">        s[x] += k;</span><br><span class="line">        x += <span class="built_in">lowbit</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x &gt;= <span class="number">1</span>)&#123;</span><br><span class="line">        ans += c[x];</span><br><span class="line">        x -= <span class="built_in">lowbit</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sums</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x &gt;= <span class="number">1</span>)&#123;</span><br><span class="line">        ans += s[x];</span><br><span class="line">        x -= <span class="built_in">lowbit</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>, &amp;a[i].v, &amp;a[i].x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(a + <span class="number">1</span>, a + <span class="number">1</span> + n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) a[i].id = i;</span><br><span class="line">    <span class="built_in">sort</span>(a + <span class="number">1</span>, a + <span class="number">1</span> + n, cmp);</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="built_in">sum</span>(a[i].id - <span class="number">1</span>);</span><br><span class="line">        ans += a[i].v * (cnt * a[i].x - <span class="built_in">sums</span>(a[i].id - <span class="number">1</span>));</span><br><span class="line">        cnt = <span class="built_in">sum</span>(n) - <span class="built_in">sum</span>(a[i].id);</span><br><span class="line">        ans += a[i].v * (<span class="built_in">sums</span>(n) - <span class="built_in">sums</span>(a[i].id) - cnt * a[i].x);</span><br><span class="line">        <span class="built_in">add</span>(a[i].id, <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">adds</span>(a[i].id, a[i].x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="P2926-USACO08DEC-Patting-Heads-S"><a href="#P2926-USACO08DEC-Patting-Heads-S" class="headerlink" title="P2926 [USACO08DEC]Patting Heads S"></a><a href="https://www.luogu.com.cn/problem/P2926">P2926 [USACO08DEC]Patting Heads S</a></h2><p>题意讲反了，本来一点也不难吧</p><p>不过都一样，求因子复杂度$O(\sqrt n)$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> ans[<span class="number">100005</span>];</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="keyword">int</span> d[<span class="number">100005</span>];</span><br><span class="line"><span class="comment">// vector&lt;int&gt; v[maxn];</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">        d[i] = x;</span><br><span class="line">        <span class="comment">// v[x].push_back(i);</span></span><br><span class="line">        a[x]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j * j &lt;= d[i]; ++j)&#123;</span><br><span class="line">            <span class="keyword">if</span>(d[i] % j) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(a[j])&#123;</span><br><span class="line">                ans[i] += a[j];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(j == d[i]) ans[i]--;</span><br><span class="line">            <span class="keyword">if</span>(j == d[i] / j) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(a[d[i] / j])&#123;</span><br><span class="line">                ans[i] += a[d[i] / j];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(d[i] / j == d[i]) ans[i]--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="10-1"><a href="#10-1" class="headerlink" title="10.1"></a>10.1</h1><p>国庆假期的学习计划：</p><p>目前需要学的知识点：</p><p><strong>CDQ分治，主席树（可持久化线段树）</strong></p><p>然后就是打牛客的国庆派对，补题，看看还有哪些可学的知识点</p><p>还有个任务就是上蓝名</p><h1 id="10-4"><a href="#10-4" class="headerlink" title="10.4"></a>10.4</h1><h2 id="P3810-【模板】三维偏序（陌上花开）"><a href="#P3810-【模板】三维偏序（陌上花开）" class="headerlink" title="P3810 【模板】三维偏序（陌上花开）"></a><a href="https://www.luogu.com.cn/problem/P3810">P3810 【模板】三维偏序（陌上花开）</a></h2><p>看cdq的概念解读，各种解释，OI wiki，总是不提怎么归并处理，怎么解决影响问题。真做了题，才算是祛魅，也不是多么复杂的算法嘛（CDQ套CDQ警告）</p><p>知乎上的洛谷日报对基础CDQ讲的很透彻，点赞。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fors(i, a, b) for(int i = (a); i &lt;= (b); ++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson k&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson k&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) ((x)&amp;(-(x)))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(a) memset(a, 0, sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DDLC_ESCAPE_PLAN_FAILED ios::sync_with_stdio(false), cin.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> dinf = <span class="number">1e100</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="comment">//const ll linf = 9223372036854775807LL;</span></span><br><span class="line"><span class="comment">// const ll linf = 1e18;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> z[maxn];</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> cnt[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span>(x &lt;= m) &#123;</span><br><span class="line">z[x] += k;</span><br><span class="line">x += <span class="built_in">lowbit</span>(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(x &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">ans += z[x];</span><br><span class="line">x -= <span class="built_in">lowbit</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> a, b, c, id;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> node&amp; x)<span class="keyword">const</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(a != x.a) <span class="keyword">return</span> a &lt; x.a;</span><br><span class="line"><span class="keyword">if</span>(c != x.c) <span class="keyword">return</span> c &lt; x.c;</span><br><span class="line"><span class="keyword">return</span> b &lt; x.b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;s[maxn], tmp[maxn];</span><br><span class="line">map&lt; pair &lt;pii, <span class="keyword">int</span>&gt;, <span class="keyword">int</span>&gt; mp;</span><br><span class="line"><span class="keyword">int</span> ans[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pre</span><span class="params">()</span> </span>&#123;</span><br><span class="line">fors(i, <span class="number">1</span>, n) &#123;</span><br><span class="line">cnt[i] += mp[<span class="built_in">make_pair</span>(<span class="built_in">make_pair</span>(s[i].a, s[i].b), s[i].c)];</span><br><span class="line">ans[i] += cnt[i] - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cdq</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(r == l) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="built_in">cdq</span>(l, mid);</span><br><span class="line"><span class="built_in">cdq</span>(mid + <span class="number">1</span>, r);</span><br><span class="line"><span class="comment">// 统计答案并按b排序</span></span><br><span class="line"><span class="comment">// (c)建树状数组</span></span><br><span class="line"><span class="keyword">int</span> p1 = l, p2 = mid + <span class="number">1</span>, p3 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (p1 &lt;= mid || p2 &lt;= r) &#123;</span><br><span class="line"><span class="keyword">if</span> (p1 &gt; mid || (p2 &lt;= r &amp;&amp; s[p1].b &gt; s[p2].b)) &#123;</span><br><span class="line">ans[s[p2].id] += <span class="built_in">sum</span>(s[p2].c);</span><br><span class="line">tmp[p3++] = s[p2++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">add</span>(s[p1].c, cnt[s[p1].id]);</span><br><span class="line"><span class="comment">// ans[s[p2].id] += sum(s[p2].c - 1);</span></span><br><span class="line">tmp[p3++] = s[p1++];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= mid; ++i) <span class="built_in">add</span>(s[i].c, -cnt[s[i].id]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= r; ++i) &#123;</span><br><span class="line">s[i] = tmp[i - l];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> f[maxn];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">DDLC_ESCAPE_PLAN_FAILED;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line">t = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (t--)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">int</span> all = n;</span><br><span class="line">fors (i, <span class="number">1</span>, n) &#123;</span><br><span class="line">cin &gt;&gt; s[i].a &gt;&gt; s[i].b &gt;&gt; s[i].c, s[i].id = i;</span><br><span class="line">mp[&#123;&#123;s[i].a, s[i].b&#125;, s[i].c&#125;]++;</span><br><span class="line"><span class="keyword">if</span> (mp[&#123;&#123;s[i].a, s[i].b&#125;, s[i].c&#125;] &gt; <span class="number">1</span>) &#123;</span><br><span class="line">i--, n--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pre</span>();</span><br><span class="line"><span class="built_in">sort</span> (s + <span class="number">1</span>, s + <span class="number">1</span> + n);</span><br><span class="line"><span class="built_in">cdq</span>(<span class="number">1</span>, n);</span><br><span class="line">fors (i, <span class="number">1</span>, n) &#123;</span><br><span class="line">f[ans[i]] += cnt[i];</span><br><span class="line">&#125;</span><br><span class="line">fors (i, <span class="number">1</span>, all) &#123;</span><br><span class="line">cout &lt;&lt; f[i - <span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="P2717-寒假作业"><a href="#P2717-寒假作业" class="headerlink" title="P2717 寒假作业"></a><a href="https://www.luogu.com.cn/problem/P2717">P2717 寒假作业</a></h2><p>转化一下，求平均数$\geq k$的子段$\Lrarr$每个数减去$k$后求平均数$\geq 0$的子段。</p><p>再接着转化，把原数组改为前缀和数组，则求$(0,n)$内$pre[j]-pre[i]&gt;=0$的点对，也即求$(0,n)$内的顺序对数目，和求逆序对一样分治即可。</p><p>所以不需要用cdq（（</p><p>如果cdq的话，貌似要尺取。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fors(i, a, b) for(int i = (a); i &lt;= (b); ++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson k&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson k&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) ((x)&amp;(-(x)))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(a) memset(a, 0, sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DDLC_ESCAPE_PLAN_FAILED ios::sync_with_stdio(false), cin.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> dinf = <span class="number">1e100</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="comment">//const ll linf = 9223372036854775807LL;</span></span><br><span class="line"><span class="comment">// const ll linf = 1e18;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn], tmp[maxn];</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(r == l) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="built_in">solve</span>(l, mid); <span class="built_in">solve</span>(mid + <span class="number">1</span>, r);</span><br><span class="line"><span class="keyword">int</span> p1 = l, p2 = mid + <span class="number">1</span>, p3 = l;</span><br><span class="line"><span class="keyword">while</span>(p1 &lt;= mid || p2 &lt;= r) &#123;</span><br><span class="line"><span class="keyword">if</span>(p1 &gt; mid || (p2 &lt;= r &amp;&amp; a[p1] &lt;= a[p2])) &#123;</span><br><span class="line">ans += mid - p1 + <span class="number">1</span>;</span><br><span class="line">tmp[p3++] = a[p2++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">tmp[p3++] = a[p1++];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = l; i &lt;= r; ++i) a[i] = tmp[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">DDLC_ESCAPE_PLAN_FAILED;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">fors(i, <span class="number">1</span>, n) cin &gt;&gt; a[i], a[i] -= k;</span><br><span class="line">fors(i, <span class="number">1</span>, n) a[i] = a[i - <span class="number">1</span>] + a[i];</span><br><span class="line"><span class="built_in">solve</span>(<span class="number">0</span>, n);</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="10-6"><a href="#10-6" class="headerlink" title="10.6"></a>10.6</h1><h2 id="P3919-【模板】可持久化线段树-1（可持久化数组）"><a href="#P3919-【模板】可持久化线段树-1（可持久化数组）" class="headerlink" title="P3919 【模板】可持久化线段树 1（可持久化数组）"></a><a href="https://www.luogu.com.cn/problem/P3919">P3919 【模板】可持久化线段树 1（可持久化数组）</a></h2><p>任务完成！我学会了CDQ和主席树！（至少模板题过了呜呜呜）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @file    :deb.cpp</span></span><br><span class="line"><span class="comment">  * @brief   :</span></span><br><span class="line"><span class="comment">  * @date    :2021-10-06</span></span><br><span class="line"><span class="comment">  * @Motto   :Love Sakurai Yamauchi Forever</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fors(i, a, b) for(int i = (a); i &lt;= (b); ++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson k&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson k&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) ((x)&amp;(-(x)))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(a) memset(a, 0, sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DDLC_ESCAPE_PLAN_FAILED ios::sync_with_stdio(false), cin.tie(0)</span></span><br><span class="line"><span class="comment">// #define int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> dinf = <span class="number">1e100</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="comment">//const ll linf = 9223372036854775807LL;</span></span><br><span class="line"><span class="comment">// const ll linf = 1e18;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="comment">// 可持久化数组版</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span> + <span class="number">1</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> rt, lc, rc, sum; <span class="comment">// 区间和..</span></span><br><span class="line">&#125;a[maxn * <span class="number">24</span>];</span><br><span class="line"><span class="keyword">int</span> cnt; <span class="comment">// 记录版本数</span></span><br><span class="line"><span class="keyword">int</span> x[maxn]; <span class="comment">// 初始数组</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> &amp;rt, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    rt = ++cnt;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        a[rt].sum = x[l];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(a[rt].lc, l, mid);</span><br><span class="line">    <span class="built_in">build</span>(a[rt].rc, mid + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> &amp;rt, <span class="keyword">int</span> f, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x, <span class="keyword">int</span> val)</span> </span>&#123; <span class="comment">// 节点编号，来源版本，左边界，有边界，下标，要改的值</span></span><br><span class="line">    rt = ++cnt;</span><br><span class="line">    a[rt].lc = a[f].lc, a[rt].rc = a[f].rc, a[rt].sum = a[f].sum;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        a[rt].sum = val;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &lt;= mid) &#123;</span><br><span class="line">        <span class="built_in">update</span>(a[rt].lc, a[f].lc, l, mid, x, val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">update</span>(a[rt].rc, a[f].rc, mid + <span class="number">1</span>, r, x, val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x)</span> </span>&#123; <span class="comment">// 节点编号，左右边界，要查的下标</span></span><br><span class="line">    <span class="keyword">if</span> (r == l) &#123;</span><br><span class="line">        <span class="keyword">return</span> a[rt].sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(x &lt;= mid) <span class="keyword">return</span> <span class="built_in">query</span>(a[rt].lc, l, mid, x);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">query</span>(a[rt].rc, mid + <span class="number">1</span>, r, x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    DDLC_ESCAPE_PLAN_FAILED;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    fors (i, <span class="number">1</span>, n) cin &gt;&gt; x[i];</span><br><span class="line">    <span class="built_in">build</span> (a[<span class="number">0</span>].rt, <span class="number">1</span>, n);</span><br><span class="line">    fors (j, <span class="number">1</span>, m) &#123;</span><br><span class="line">        <span class="keyword">int</span> v, loc, value, op;</span><br><span class="line">        cin &gt;&gt; v &gt;&gt; op;</span><br><span class="line">        <span class="keyword">if</span>(op == <span class="number">1</span>) &#123;</span><br><span class="line">            cin &gt;&gt; loc &gt;&gt; value;</span><br><span class="line">            <span class="built_in">update</span>(a[j].rt, a[v].rt, <span class="number">1</span>, n, loc, value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            cin &gt;&gt; loc;</span><br><span class="line">            cout &lt;&lt; <span class="built_in">query</span>(a[v].rt, <span class="number">1</span>, n, loc) &lt;&lt; endl;</span><br><span class="line">            a[j].rt = a[v].rt;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="10-8"><a href="#10-8" class="headerlink" title="10.8"></a>10.8</h1><h2 id="P3396-哈希冲突"><a href="#P3396-哈希冲突" class="headerlink" title="P3396 哈希冲突"></a><a href="https://www.luogu.com.cn/problem/P3396">P3396 哈希冲突</a></h2><p>根号算法，思想和分块高度重合，但个人认为不是分块（</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">150000</span> + <span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> mp[<span class="number">1005</span>][<span class="number">1005</span>]; <span class="comment">// 模i意义下第j个池的和</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) cin &gt;&gt; a[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j * j &lt;= n; ++j) &#123;</span><br><span class="line">            <span class="keyword">int</span> p = i % j;</span><br><span class="line">            mp[j][p] += a[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">char</span> cmd; <span class="keyword">int</span> x, y;</span><br><span class="line">    <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">        cin &gt;&gt; cmd &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        <span class="keyword">if</span>(cmd == <span class="string">&#x27;C&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i * i &lt;= n; ++i) &#123;</span><br><span class="line">                <span class="keyword">int</span> p = x % i;</span><br><span class="line">                mp[i][p] -= a[x];</span><br><span class="line">                mp[i][p] += y;</span><br><span class="line">            &#125;</span><br><span class="line">            a[x] = y;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (x * x &lt;= n) &#123;</span><br><span class="line">                cout &lt;&lt; mp[x][y] &lt;&lt; endl;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span> (y &gt;= x) &#123;</span><br><span class="line">                    cout &lt;&lt; <span class="number">0</span> &lt;&lt; endl;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = y; i &lt;= n; i += x) &#123;</span><br><span class="line">                    ans += a[i];</span><br><span class="line">                &#125;</span><br><span class="line">                cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="10-11"><a href="#10-11" class="headerlink" title="10.11"></a>10.11</h1><h2 id="P3379-【模板】最近公共祖先（LCA）"><a href="#P3379-【模板】最近公共祖先（LCA）" class="headerlink" title="P3379 【模板】最近公共祖先（LCA）"></a><a href="https://www.luogu.com.cn/problem/P3379">P3379 【模板】最近公共祖先（LCA）</a></h2><p>蒟蒻开始学倍增，赶快把不会的知识点都补了，希望未来几个月能组个正常的队（有腿抱最好了qwq，所以要加油）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fors(i, a, b) for(int i = (a); i &lt;= (b); ++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson k&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson k&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) ((x)&amp;(-(x)))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(a) memset(a, 0, sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DDLC_ESCAPE_PLAN_FAILED ios::sync_with_stdio(false), cin.tie(0)</span></span><br><span class="line"><span class="comment">// #define int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> dinf = <span class="number">1e100</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="comment">//const ll linf = 9223372036854775807LL;</span></span><br><span class="line"><span class="comment">// const ll linf = 1e18;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> n, m, s;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5e6</span> + <span class="number">10</span>;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; e[maxn];</span><br><span class="line"><span class="keyword">int</span> dep[maxn];</span><br><span class="line"><span class="keyword">int</span> fa[maxn][<span class="number">31</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span> <span class="params">(<span class="keyword">int</span> now, <span class="keyword">int</span> f, <span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : e[now]) &#123;</span><br><span class="line">        <span class="keyword">if</span>(x != f) &#123;</span><br><span class="line">            fa[x][<span class="number">0</span>] = now;</span><br><span class="line">            dep[x] = d;</span><br><span class="line">            <span class="built_in">dfs</span>(x, now, d + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> lg[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fd</span> <span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = lg[n] + <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(fa[x][i] != fa[y][i]) &#123;</span><br><span class="line">            x = fa[x][i], y = fa[y][i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fa[x][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> c=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(c&lt;<span class="string">&#x27;0&#x27;</span>||c&gt;<span class="string">&#x27;9&#x27;</span>)&#123;<span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;c=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span>(c&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;c&lt;=<span class="string">&#x27;9&#x27;</span>) x=x*<span class="number">10</span>+c-<span class="string">&#x27;0&#x27;</span>,c=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// cin &gt;&gt; n &gt;&gt; m &gt;&gt; s;</span></span><br><span class="line">    n = <span class="built_in">read</span>(); m = <span class="built_in">read</span>(); s = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">    <span class="keyword">int</span> p = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(i == (<span class="number">1</span> &lt;&lt; p)) &#123;</span><br><span class="line">            p++;</span><br><span class="line">            lg[i] = lg[i - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> lg[i] = lg[i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        x = <span class="built_in">read</span>(); y = <span class="built_in">read</span>();</span><br><span class="line">        e[x].<span class="built_in">pb</span>(y), e[y].<span class="built_in">pb</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(s, <span class="number">-1</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= lg[n] + <span class="number">1</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">            fa[j][i] = fa[fa[j][i - <span class="number">1</span>]][i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        x = <span class="built_in">read</span>(); y = <span class="built_in">read</span>();</span><br><span class="line">        <span class="keyword">if</span> (dep[x] &lt; dep[y]) <span class="built_in">swap</span>(x, y);</span><br><span class="line">        <span class="keyword">while</span> (dep[x] &gt; dep[y]) &#123;</span><br><span class="line">            x = fa[x][(<span class="keyword">int</span>)lg[dep[x] - dep[y]]];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(x == y) cout &lt;&lt; x &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">else</span> cout &lt;&lt; <span class="built_in">fd</span>(x, y) &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="10-12"><a href="#10-12" class="headerlink" title="10.12"></a>10.12</h1><h2 id="P1613-跑路"><a href="#P1613-跑路" class="headerlink" title="P1613 跑路"></a><a href="https://www.luogu.com.cn/problem/P1613">P1613 跑路</a></h2><p>忘了C++11好像不支持堆变量自动初始化，害的白wa了好几次qwq</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">// #define int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">55</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">bool</span> e[maxn][maxn][<span class="number">70</span>];</span><br><span class="line"><span class="keyword">int</span> f[maxn][maxn];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">int</span> u, v;</span><br><span class="line">    <span class="built_in">memset</span>(e, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(e));</span><br><span class="line">    <span class="built_in">memset</span>(f, <span class="number">10</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(f));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;u, &amp;v);</span><br><span class="line">        e[u][v][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        f[u][v] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">64</span>; ++j) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">1</span>; x &lt;= n; ++x) &#123;</span><br><span class="line">                <span class="keyword">if</span>(!e[i][x][j - <span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">1</span>; y &lt;= n; ++y) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (e[x][y][j - <span class="number">1</span>]) &#123;</span><br><span class="line">                        e[i][y][j] = <span class="number">1</span>;</span><br><span class="line">                        f[i][y] = <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; ++k) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">                f[i][j] = <span class="built_in">min</span>(f[i][j], f[i][k] + f[k][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, f[<span class="number">1</span>][n]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="P5002-专心OI-找祖先"><a href="#P5002-专心OI-找祖先" class="headerlink" title="P5002 专心OI - 找祖先"></a><a href="https://www.luogu.com.cn/problem/P5002">P5002 专心OI - 找祖先</a></h2><p>一道递归组合题，和LCA其实没关系</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> n, r, m;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e4</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; e[maxn];</span><br><span class="line"><span class="keyword">int</span> sz[maxn]; <span class="comment">// 以i为根节点的子树大小</span></span><br><span class="line"><span class="keyword">int</span> ans[maxn]; <span class="comment">// 记忆答案</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> f)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : e[i]) &#123;</span><br><span class="line">        <span class="keyword">if</span>(x == f) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(x, i);</span><br><span class="line">        sz[i] += sz[x];</span><br><span class="line">    &#125;</span><br><span class="line">    sz[i]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fpow</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(y) &#123;</span><br><span class="line">        <span class="keyword">if</span>(y &amp; <span class="number">1</span>) ans = (ans * x) % mod;</span><br><span class="line">        x = (x * x) % mod;</span><br><span class="line">        y &gt;&gt;= <span class="number">1ll</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> an = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : e[i]) &#123;</span><br><span class="line">        <span class="keyword">if</span>(sz[x] &gt; sz[i]) <span class="keyword">continue</span>;</span><br><span class="line">        an = (an + (s * sz[x]) % mod) % mod;</span><br><span class="line">        s = (s + sz[x]) % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    an = (an * <span class="number">2</span>) % mod;</span><br><span class="line">    an = (an + <span class="number">2</span> * sz[i] - <span class="number">1</span>) % mod;</span><br><span class="line">    ans[i] = an;</span><br><span class="line">    <span class="keyword">return</span> an;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(ans, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(ans));</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%lld&quot;</span>, &amp;n, &amp;r, &amp;m);</span><br><span class="line">    <span class="keyword">int</span> a, b;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">        e[a].<span class="built_in">push_back</span>(b);</span><br><span class="line">        e[b].<span class="built_in">push_back</span>(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(r, <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;a);</span><br><span class="line">        <span class="keyword">if</span>(ans[a]) <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans[a]);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">get</span>(a));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="P3402-可持久化并查集"><a href="#P3402-可持久化并查集" class="headerlink" title="P3402 可持久化并查集"></a><a href="https://www.luogu.com.cn/problem/P3402">P3402 可持久化并查集</a></h2><p>按照题解写的启发式合并，貌似跑的飞快。。（$\leq 200ms$）</p><p>按秩合并应该更快吧</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> rt, lc, rc;</span><br><span class="line">&#125;a[maxn &lt;&lt; <span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> dep[maxn &lt;&lt; <span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> fa[maxn &lt;&lt; <span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> &amp;rt, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    rt = ++cnt;</span><br><span class="line">    <span class="keyword">if</span>(l == r) &#123;</span><br><span class="line">        fa[rt] = l;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(a[rt].lc, l, mid);</span><br><span class="line">    <span class="built_in">build</span>(a[rt].rc, mid + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">join</span><span class="params">(<span class="keyword">int</span> &amp;rt, <span class="keyword">int</span> x1, <span class="keyword">int</span> x2, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> f)</span> </span>&#123; <span class="comment">// 将x1的父亲修改为x2</span></span><br><span class="line">    rt = ++cnt;</span><br><span class="line">    <span class="keyword">if</span>(l == r) &#123;</span><br><span class="line">        fa[rt] = x2;</span><br><span class="line">        dep[rt] = dep[f];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    a[rt].lc = a[f].lc, a[rt].rc = a[f].rc;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(x1 &lt;= mid) <span class="built_in">join</span>(a[rt].lc, x1, x2, l, mid, a[f].lc);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">join</span>(a[rt].rc, x1, x2, mid + <span class="number">1</span>, r, a[f].rc);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x)</span> </span>&#123; <span class="comment">// x的直属父亲</span></span><br><span class="line">    <span class="keyword">if</span>(l == r) &#123;</span><br><span class="line">        <span class="keyword">return</span> rt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(x &lt;= mid) <span class="keyword">return</span> <span class="built_in">query</span>(a[rt].lc, l, mid, x);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">query</span>(a[rt].rc, mid + <span class="number">1</span>, r, x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l == r) &#123;</span><br><span class="line">        dep[rt]++; <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(x &lt;= mid) <span class="built_in">add</span>(a[rt].lc, l, mid, x);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">add</span>(a[rt].rc, mid + <span class="number">1</span>, r, x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findfa</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> x)</span> </span>&#123; <span class="comment">// 版本i中x的祖先</span></span><br><span class="line">    <span class="keyword">int</span> fx = <span class="built_in">query</span>(a[i].rt, <span class="number">1</span>, n, x);</span><br><span class="line">    <span class="keyword">if</span>(fa[fx] == x) <span class="keyword">return</span> fx;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">findfa</span>(i, fa[fx]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dep, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(dep));</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="built_in">build</span>(a[<span class="number">0</span>].rt, <span class="number">1</span>, n);</span><br><span class="line">    <span class="keyword">int</span> opt, k, x, y;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;opt);</span><br><span class="line">        <span class="keyword">if</span> (opt == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">            a[i].rt = a[i - <span class="number">1</span>].rt;</span><br><span class="line">            <span class="keyword">int</span> fx = <span class="built_in">findfa</span>(i, x), fy = <span class="built_in">findfa</span>(i, y);</span><br><span class="line">            <span class="keyword">if</span>(fa[fx] == fa[fy]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(dep[fx] &gt; dep[fy]) <span class="built_in">swap</span>(fx, fy);</span><br><span class="line">            <span class="built_in">join</span>(a[i].rt, fa[fx], fa[fy], <span class="number">1</span>, n, a[i - <span class="number">1</span>].rt);</span><br><span class="line">            <span class="keyword">if</span>(dep[fx] == dep[fy]) <span class="built_in">add</span>(a[i].rt, <span class="number">1</span>, n, fa[fy]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (opt == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;k);</span><br><span class="line">            a[i].rt = a[k].rt;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (opt == <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">            a[i].rt = a[i - <span class="number">1</span>].rt;</span><br><span class="line">            <span class="keyword">int</span> fx = <span class="built_in">findfa</span>(i, x), fy = <span class="built_in">findfa</span>(i, y);</span><br><span class="line">            <span class="keyword">if</span>(fa[fx] == fa[fy]) <span class="built_in">printf</span>(<span class="string">&quot;1\n&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;0\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="10-16"><a href="#10-16" class="headerlink" title="10.16"></a>10.16</h1><h2 id="P2801-教主的魔法"><a href="#P2801-教主的魔法" class="headerlink" title="P2801 教主的魔法"></a><a href="https://www.luogu.com.cn/problem/P2801">P2801 教主的魔法</a></h2><p>再次说明我的大题coding能力就跟坨⑩一样。。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @file    :debug.cpp</span></span><br><span class="line"><span class="comment">  * @brief   :</span></span><br><span class="line"><span class="comment">  * @date    :2021-10-16</span></span><br><span class="line"><span class="comment">  * @Motto   :Love Sakurai Yamauchi Forever</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fors(i, a, b) for(int i = (a); i &lt;= (b); ++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson k&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson k&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) ((x)&amp;(-(x)))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(a) memset(a, 0, sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DDLC_ESCAPE_PLAN_FAILED ios::sync_with_stdio(false), cin.tie(0)</span></span><br><span class="line"><span class="comment">// #define int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> dinf = <span class="number">1e100</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="comment">//const ll linf = 9223372036854775807LL;</span></span><br><span class="line"><span class="comment">// const ll linf = 1e18;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> blc[maxn]; <span class="comment">// i在第几块内</span></span><br><span class="line"><span class="keyword">int</span> rb[maxn / <span class="number">1000</span> + <span class="number">100</span>] = &#123;<span class="number">0</span>&#125;, lb[maxn / <span class="number">1000</span> + <span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="keyword">int</span> d[maxn]; <span class="comment">// 排序后的</span></span><br><span class="line"><span class="keyword">int</span> n, q;</span><br><span class="line"><span class="keyword">int</span> sn;</span><br><span class="line"><span class="keyword">int</span> tag[maxn / <span class="number">1000</span> + <span class="number">100</span>]; <span class="comment">// 整块tag，用于整块操作的数据维护,表示整个区间都被加上了tag[i]</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(blc[l] == blc[r]) &#123;</span><br><span class="line">fors(i, l, r) a[i] += w;</span><br><span class="line">fors(i, l, r) d[i] = a[i];</span><br><span class="line"><span class="built_in">sort</span>(d + lb[blc[l]], d + <span class="number">1</span> + rb[blc[l]]);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">fors(i, l, rb[blc[l]]) &#123;</span><br><span class="line">a[i] += w;</span><br><span class="line">&#125; fors(i, lb[blc[l]], rb[blc[l]]) d[i] = a[i];</span><br><span class="line"><span class="built_in">sort</span>(d + lb[blc[l]], d + rb[blc[l]] + <span class="number">1</span>);</span><br><span class="line">fors(i, lb[blc[r]], r) &#123;</span><br><span class="line">a[i] += w;</span><br><span class="line">&#125; fors(i, lb[blc[r]], rb[blc[r]]) d[i] = a[i];</span><br><span class="line"><span class="built_in">sort</span>(d + lb[blc[r]], d + rb[blc[r]] + <span class="number">1</span>);</span><br><span class="line">fors(i, blc[l] + <span class="number">1</span>, blc[r] - <span class="number">1</span>) &#123;</span><br><span class="line">tag[i] += w;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lbound</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> c, <span class="keyword">int</span> i)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(blc[l] == blc[r]) &#123;</span><br><span class="line">fors(i, l, r) <span class="keyword">if</span>(a[i] + tag[blc[i]] &gt;= c) ans++;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line">fors(i, l, rb[blc[l]]) &#123;</span><br><span class="line"><span class="keyword">if</span>(a[i] + tag[blc[i]] &gt;= c) ans++;</span><br><span class="line">&#125;</span><br><span class="line">fors(i, lb[blc[r]], r) &#123;</span><br><span class="line"><span class="keyword">if</span>(a[i] + tag[blc[i]] &gt;= c) ans++;</span><br><span class="line">&#125;</span><br><span class="line">fors(i, blc[l] + <span class="number">1</span>, blc[r] - <span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">// int p = lower_bound(d + lb[i], d + rb[i] + 1, c - tag[i]) - d;</span></span><br><span class="line"></span><br><span class="line">ans += <span class="built_in">lbound</span>(lb[i], rb[i], c, i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lbound</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> c, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> ll = l, rr = r, ans = <span class="number">0</span>, mid;</span><br><span class="line"><span class="keyword">while</span>(ll &lt;= rr) &#123;</span><br><span class="line">mid = (ll + rr) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(d[mid] + tag[i] &gt;= c) rr = mid - <span class="number">1</span>, ans = rb[i] - mid + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> ll = mid + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cread</span><span class="params">(<span class="keyword">char</span> &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(x != <span class="string">&#x27;M&#x27;</span> &amp;&amp;x != <span class="string">&#x27;A&#x27;</span>) x = <span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 某个快读模板qwq</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(Tp &amp;x)</span></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">char</span> ch=<span class="number">1</span>;<span class="keyword">int</span> fh;</span><br><span class="line">    <span class="keyword">while</span>(ch!=<span class="string">&#x27;-&#x27;</span>&amp;&amp;(ch&gt;<span class="string">&#x27;9&#x27;</span>||ch&lt;<span class="string">&#x27;0&#x27;</span>))&#123;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)&#123;</span><br><span class="line">        fh=<span class="number">-1</span>;ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;<span class="keyword">else</span> fh=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+ch-<span class="string">&#x27;0&#x27;</span>;ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    x*=fh;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// freopen(&quot;in.txt&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;out.txt&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line"><span class="built_in">read</span>(n); <span class="built_in">read</span>(q);</span><br><span class="line">fors(i, <span class="number">1</span>, n) &#123; <span class="built_in">read</span>(a[i]); d[i] = a[i]; &#125;</span><br><span class="line">sn = <span class="built_in">sqrt</span>(n);</span><br><span class="line"><span class="keyword">int</span> bid;</span><br><span class="line">bid = n / sn;</span><br><span class="line"><span class="keyword">if</span>(n % sn) bid++;</span><br><span class="line">fors(i ,<span class="number">1</span>, n) &#123;</span><br><span class="line">blc[i] = (i - <span class="number">1</span>) / sn + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">fors(i, <span class="number">1</span>, bid) &#123;</span><br><span class="line">lb[i] = (i - <span class="number">1</span>) * sn + <span class="number">1</span>;</span><br><span class="line">rb[i] = i * sn;</span><br><span class="line">&#125;</span><br><span class="line">rb[bid] = n;</span><br><span class="line">fors(i, <span class="number">1</span>, bid) &#123;</span><br><span class="line"><span class="built_in">sort</span>(d + lb[i], d + rb[i] + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> x;</span><br><span class="line"><span class="keyword">int</span> l, r, w;</span><br><span class="line">fors(i, <span class="number">1</span>, q) &#123;</span><br><span class="line"><span class="built_in">cread</span>(x);</span><br><span class="line"><span class="built_in">read</span>(l);</span><br><span class="line"><span class="built_in">read</span>(r);</span><br><span class="line"><span class="built_in">read</span>(w);</span><br><span class="line"><span class="keyword">if</span>(x == <span class="string">&#x27;M&#x27;</span>) <span class="built_in">add</span>(l, r, w);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">query</span>(l, r, w));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="P4135-作诗"><a href="#P4135-作诗" class="headerlink" title="P4135 作诗"></a><a href="https://www.luogu.com.cn/problem/P4135">P4135 作诗</a></h2><p>分块+预处理</p><p>很好的紫题</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> n, c, m;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">355</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="keyword">int</span> f[N][N] = &#123;<span class="number">0</span>&#125;; <span class="comment">// 从i到j（块），有多少个数出现了偶数次</span></span><br><span class="line"><span class="keyword">int</span> s[N][maxn] = &#123;<span class="number">0</span>&#125;; <span class="comment">// 前i块中j出现了多少次</span></span><br><span class="line"><span class="keyword">int</span> blc[N];</span><br><span class="line"><span class="keyword">int</span> l[N], r[N];</span><br><span class="line"><span class="keyword">int</span> mp[maxn] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;c, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    <span class="keyword">int</span> ll, rr;</span><br><span class="line">    <span class="keyword">int</span> sn = <span class="built_in">sqrt</span>(n);</span><br><span class="line">    <span class="keyword">int</span> tot = n / sn; <span class="keyword">if</span>(n % sn) tot++;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        blc[i] = (i - <span class="number">1</span>) / sn + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tot; ++i) &#123;</span><br><span class="line">        l[i] = (i - <span class="number">1</span>) * sn + <span class="number">1</span>;</span><br><span class="line">        r[i] = i * sn;</span><br><span class="line">    &#125;</span><br><span class="line">    r[tot] = n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tot; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= c; ++j) s[i][j] = s[i - <span class="number">1</span>][j];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = l[i]; j &lt;= r[i]; ++j) &#123;</span><br><span class="line">            s[i][a[j]]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tot; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// unordered_map&lt;int, int&gt; mp;</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &lt;= tot; ++j) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = l[j]; k &lt;= r[j]; ++k) &#123;</span><br><span class="line">                mp[a[k]]++;</span><br><span class="line">                <span class="keyword">if</span> (mp[a[k]] &gt; <span class="number">1</span> &amp;&amp; (mp[a[k]] &amp; <span class="number">1</span>)) ans--;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (!(mp[a[k]] &amp; <span class="number">1</span>)) ans++;</span><br><span class="line">            &#125;</span><br><span class="line">            f[i][j] = ans;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= c; ++j) mp[j] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> aa = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= m; ++k) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;ll, &amp;rr);</span><br><span class="line">        ll = (ll + aa) % n + <span class="number">1</span>;</span><br><span class="line">        rr = (rr + aa) % n + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (ll &gt; rr) <span class="built_in">swap</span>(ll, rr);</span><br><span class="line">        <span class="comment">// unordered_map&lt;int, int&gt; mp;</span></span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (blc[ll] == blc[rr]) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = ll; i &lt;= rr; ++i) &#123;</span><br><span class="line">                mp[a[i]]++;</span><br><span class="line">                <span class="keyword">if</span> (mp[a[i]] &gt; <span class="number">1</span> &amp;&amp; (mp[a[i]] &amp; <span class="number">1</span>)) ans--;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (!(mp[a[i]] &amp; <span class="number">1</span>)) ans++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">            aa = ans;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = ll; i &lt;= rr; ++i) mp[a[i]]--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> ans = f[blc[ll] + <span class="number">1</span>][blc[rr] - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = ll; i &lt;= r[blc[ll]]; ++i) &#123;</span><br><span class="line">                mp[a[i]]++;</span><br><span class="line">                <span class="keyword">int</span> res = (mp[a[i]] + s[blc[rr] - <span class="number">1</span>][a[i]] - s[blc[ll]][a[i]]);</span><br><span class="line">                <span class="keyword">if</span>(res &gt; <span class="number">1</span> &amp;&amp; (res &amp; <span class="number">1</span>)) ans--;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(!(res &amp; <span class="number">1</span>)) ans++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = l[blc[rr]]; i &lt;= rr; ++i) &#123;</span><br><span class="line">                mp[a[i]]++;</span><br><span class="line">                <span class="keyword">int</span> res = (mp[a[i]] + s[blc[rr] - <span class="number">1</span>][a[i]] - s[blc[ll]][a[i]]);</span><br><span class="line">                <span class="keyword">if</span>(res &gt; <span class="number">1</span> &amp;&amp; (res &amp; <span class="number">1</span>)) ans--;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(!(res &amp; <span class="number">1</span>)) ans++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = ll; i &lt;= r[blc[ll]]; ++i) mp[a[i]]--;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = l[blc[rr]]; i &lt;= rr; ++i) mp[a[i]]--;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">            aa = ans;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="P4168-Violet-蒲公英"><a href="#P4168-Violet-蒲公英" class="headerlink" title="P4168 [Violet]蒲公英"></a><a href="https://www.luogu.com.cn/problem/P4168">P4168 [Violet]蒲公英</a></h2><p>区间众数问题</p><p>和上面的P4135一样也是个好题</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">4e4</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">205</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> val, id, des;</span><br><span class="line">&#125;Node[maxn];</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp1</span><span class="params">(<span class="keyword">const</span> node&amp; x, <span class="keyword">const</span> node&amp; y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x.val == y.val ? x.id &lt; y.id : x.val &lt; y.val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp2</span><span class="params">(<span class="keyword">const</span> node &amp;x, <span class="keyword">const</span> node&amp; y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x.id &lt; y.id;</span><br><span class="line">&#125;</span><br><span class="line">unordered_map&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; src;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">descrete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">sort</span>(Node + <span class="number">1</span>, Node + <span class="number">1</span> + n, cmp1);</span><br><span class="line">    Node[<span class="number">1</span>].des = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(Node[i].val == Node[i - <span class="number">1</span>].val) Node[i].des = Node[i - <span class="number">1</span>].des;</span><br><span class="line">        <span class="keyword">else</span> Node[i].des = Node[i - <span class="number">1</span>].des + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(Node + <span class="number">1</span>, Node + <span class="number">1</span> + n, cmp2);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!src.<span class="built_in">count</span>(Node[i].des)) src[Node[i].des] = Node[i].val;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) a[i] = Node[i].des;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> blc[maxn];</span><br><span class="line"><span class="keyword">int</span> l[N], r[N];</span><br><span class="line"><span class="keyword">int</span> tot;</span><br><span class="line"><span class="keyword">int</span> d[N][N] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> f[N][maxn] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> mp[maxn] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">prework</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sn = <span class="built_in">sqrt</span>(n);</span><br><span class="line">    tot = n / sn; <span class="keyword">if</span>(n % sn) tot++;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) blc[i] = (i - <span class="number">1</span>) / sn + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tot; ++i) &#123;</span><br><span class="line">        l[i] = (i - <span class="number">1</span>) * sn + <span class="number">1</span>;</span><br><span class="line">        r[i] = i * sn;</span><br><span class="line">    &#125;</span><br><span class="line">    r[tot] = n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tot; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>, ans;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &lt;= tot; ++j) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = l[j]; k &lt;= r[j]; ++k) &#123;</span><br><span class="line">                mp[a[k]]++;</span><br><span class="line">                <span class="comment">// cnt = max(cnt, mp[a[k]]);</span></span><br><span class="line">                <span class="keyword">if</span>(mp[a[k]] &gt; cnt) &#123;</span><br><span class="line">                    cnt = mp[a[k]];</span><br><span class="line">                    ans = a[k];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(mp[a[k]] == cnt) ans = <span class="built_in">min</span>(ans, a[k]);</span><br><span class="line">            &#125;</span><br><span class="line">            d[i][j] = ans;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) mp[j] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tot; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) f[i][j] = f[i - <span class="number">1</span>][j];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = l[i]; j &lt;= r[i]; ++j) &#123;</span><br><span class="line">            f[i][a[j]]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;Node[i].val), Node[i].id = i;</span><br><span class="line">    <span class="built_in">descrete</span>();</span><br><span class="line">    <span class="built_in">prework</span>();</span><br><span class="line">    <span class="keyword">int</span> lans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> ll, rr;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> o = <span class="number">1</span>; o &lt;= m; ++o) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;ll, &amp;rr);</span><br><span class="line">        ll = (ll + lans - <span class="number">1</span>) % n + <span class="number">1</span>;</span><br><span class="line">        rr = (rr + lans - <span class="number">1</span>) % n + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(ll &gt; rr) <span class="built_in">swap</span>(ll, rr);</span><br><span class="line">        <span class="keyword">int</span> ans, cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(blc[ll] == blc[rr]) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = ll; i &lt;= rr; ++i) &#123;</span><br><span class="line">                mp[a[i]]++;</span><br><span class="line">                <span class="keyword">if</span>(mp[a[i]] &gt; cnt) &#123;</span><br><span class="line">                    cnt = mp[a[i]];</span><br><span class="line">                    ans = a[i];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(mp[a[i]] == cnt) ans = <span class="built_in">min</span>(ans, a[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, src[ans]);</span><br><span class="line">            lans = src[ans];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = ll; i &lt;= rr; ++i) mp[a[i]]--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            ans = d[blc[ll] + <span class="number">1</span>][blc[rr] - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">int</span> cnt = f[blc[rr] - <span class="number">1</span>][ans] - f[blc[ll]][ans];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = ll; i &lt;= r[blc[ll]]; ++i) &#123;</span><br><span class="line">                mp[a[i]]++;</span><br><span class="line">                <span class="keyword">int</span> res = f[blc[rr] - <span class="number">1</span>][a[i]] - f[blc[ll]][a[i]] + mp[a[i]];</span><br><span class="line">                <span class="comment">// ans = max(ans, res);</span></span><br><span class="line">                <span class="keyword">if</span>(res &gt; cnt) &#123;</span><br><span class="line">                    cnt = res;</span><br><span class="line">                    ans = a[i];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(res == cnt) ans = <span class="built_in">min</span>(ans, a[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = l[blc[rr]]; i &lt;= rr; ++i) &#123;</span><br><span class="line">                mp[a[i]]++;</span><br><span class="line">                <span class="keyword">int</span> res = f[blc[rr] - <span class="number">1</span>][a[i]] - f[blc[ll]][a[i]] + mp[a[i]];</span><br><span class="line">                <span class="comment">// ans = max(ans, res);</span></span><br><span class="line">                <span class="keyword">if</span>(res &gt; cnt) &#123;</span><br><span class="line">                    cnt = res;</span><br><span class="line">                    ans = a[i];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(res == cnt) ans = <span class="built_in">min</span>(ans, a[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, src[ans]);</span><br><span class="line">            lans = src[ans];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = ll; i &lt;= r[blc[ll]]; ++i) mp[a[i]]--;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = l[blc[rr]]; i &lt;= rr; ++i) mp[a[i]]--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="10-18"><a href="#10-18" class="headerlink" title="10.18"></a>10.18</h1><h2 id="P4097-HEOI2013-Segment"><a href="#P4097-HEOI2013-Segment" class="headerlink" title="P4097 [HEOI2013]Segment"></a><a href="https://www.luogu.com.cn/problem/P4097">P4097 [HEOI2013]Segment</a></h2><p>说是李超线段树，但感觉用一般的维护方法也可以写，只不过常数大了一点（还是老老实实<del>抄</del>记了一遍模板）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson k&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson k&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pdi pair<span class="meta-string">&lt;double, int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">39989</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line"><span class="keyword">double</span> K[maxn], b[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x_, <span class="keyword">int</span> y_, <span class="keyword">int</span> x__, <span class="keyword">int</span> y__)</span> </span>&#123;</span><br><span class="line">++cnt;</span><br><span class="line"><span class="keyword">if</span> (x_ == x__) &#123;</span><br><span class="line">K[cnt] = <span class="number">0</span>, b[cnt] = <span class="built_in">max</span>(y_, y__);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">K[cnt] = <span class="number">1.0</span> * (y__ - y_) / (x__ - x_);</span><br><span class="line">b[cnt] = y_ - K[cnt] * x_;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> x * K[i] + b[i]; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> cl, <span class="keyword">int</span> cr, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> mid = (cl + cr) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> rr = a[k];</span><br><span class="line"><span class="keyword">if</span>(r &lt; cl || l &gt; cr) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">double</span> resu = <span class="built_in">cal</span>(u, mid);</span><br><span class="line"><span class="keyword">double</span> resv = <span class="built_in">cal</span>(a[k], mid);</span><br><span class="line"><span class="keyword">if</span>(l &lt;= cl &amp;&amp; r &gt;= cr) &#123;</span><br><span class="line"><span class="keyword">if</span>(cl == cr) &#123;</span><br><span class="line"><span class="keyword">if</span>(resu &gt; resv) a[k] = u; <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(K[a[k]] &lt; K[u]) &#123;</span><br><span class="line"><span class="keyword">if</span>(resu &gt; resv) &#123;</span><br><span class="line">a[k] = u;</span><br><span class="line"><span class="comment">// 修改可能区间</span></span><br><span class="line"><span class="built_in">change</span>(lson, cl, mid, l, r, rr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">change</span>(rson, mid + <span class="number">1</span>, cr, l, r, u);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(K[a[k]] &gt; K[u]) &#123;</span><br><span class="line"><span class="keyword">if</span>(resu &gt; resv) &#123;</span><br><span class="line">a[k] = u;</span><br><span class="line"><span class="built_in">change</span>(rson, mid + <span class="number">1</span>, cr, l, r, rr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">change</span>(lson, cl, mid, l, r, u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(b[u] &gt; b[a[k]]) a[k] = u;</span><br><span class="line">&#125; <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">change</span>(lson, cl, mid, l, r, u);</span><br><span class="line"><span class="built_in">change</span>(rson, mid + <span class="number">1</span>, cr, l, r, u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">pdi <span class="title">Max</span><span class="params">(pdi x, pdi y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x.first &lt; y.first) <span class="keyword">return</span> y;</span><br><span class="line"><span class="keyword">if</span>(x.first &gt; y.first) <span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">return</span> x.second &lt; y.second ? x : y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">pdi <span class="title">query</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(r &lt; d || d &lt; l) <span class="keyword">return</span> &#123;<span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">double</span> res = <span class="built_in">cal</span>(a[k], d);</span><br><span class="line"><span class="keyword">if</span>(l == r) <span class="keyword">return</span> &#123;res, a[k]&#125;;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Max</span>(&#123;res, a[k]&#125;, <span class="built_in">Max</span>(<span class="built_in">query</span>(lson, l, mid, d), <span class="built_in">query</span>(rson, mid + <span class="number">1</span>, r, d))); </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> lans = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">pro</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (x + lans - <span class="number">1</span> + b) % b + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">int</span> op, x_, y_, x__, y__;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;op);</span><br><span class="line"><span class="keyword">if</span>(op == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>, &amp;x_, &amp;y_, &amp;x__, &amp;y__);</span><br><span class="line">x_ = <span class="built_in">pro</span>(x_, N);</span><br><span class="line">y_ = <span class="built_in">pro</span>(y_, mod);</span><br><span class="line">x__ = <span class="built_in">pro</span>(x__, N);</span><br><span class="line">y__ = <span class="built_in">pro</span>(y__, mod);</span><br><span class="line"><span class="keyword">if</span>(x_ &gt; x__) &#123;</span><br><span class="line"><span class="built_in">swap</span>(x_, x__);</span><br><span class="line"><span class="built_in">swap</span>(y_, y__);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">add</span>(x_, y_, x__, y__);</span><br><span class="line"><span class="built_in">change</span>(<span class="number">1</span>, <span class="number">1</span>, N, x_, x__, cnt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x_);</span><br><span class="line">x_ = <span class="built_in">pro</span>(x_, N);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, lans = <span class="built_in">query</span>(<span class="number">1</span>, <span class="number">1</span>, N, x_).second);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="10-28"><a href="#10-28" class="headerlink" title="10.28"></a>10.28</h1><h2 id="CF242E-XOR-on-Segment"><a href="#CF242E-XOR-on-Segment" class="headerlink" title="CF242E XOR on Segment"></a><a href="https://www.luogu.com.cn/problem/CF242E">CF242E XOR on Segment</a></h2><p>按位运算，分别维护每一位就可以维护整个异或和了，属于是白给紫题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits/stdc++.h&gt;</span><br><span class="line">#define lson k &lt;&lt; 1</span><br><span class="line">#define rson k &lt;&lt; 1 | 1</span><br><span class="line">typedef long long ll;</span><br><span class="line">using namespace std;</span><br><span class="line">const int maxn = 1e5 + 10;</span><br><span class="line">struct node &#123;</span><br><span class="line">    int l, r, tag; // 该区间是否异或过1</span><br><span class="line">    ll s;</span><br><span class="line">&#125;a[25][maxn * 4];</span><br><span class="line">int num[maxn];</span><br><span class="line">inline void pushup(int k, int c) &#123;</span><br><span class="line">    a[c][k].s = a[c][lson].s + a[c][rson].s;</span><br><span class="line">    a[c][k].tag = 0;</span><br><span class="line">&#125;</span><br><span class="line">void build(int k, int c, int l, int r) &#123;</span><br><span class="line">    a[c][k].l = l, a[c][k].r = r;</span><br><span class="line">    if(l == r) &#123;</span><br><span class="line">        a[c][k].s = (num[l] &gt;&gt; (c - 1ll)) &amp; 1ll;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    int mid = (l + r) &gt;&gt; 1ll;</span><br><span class="line">    build(lson, c, l, mid);</span><br><span class="line">    build(rson, c, mid + 1, r);</span><br><span class="line">    pushup(k, c);</span><br><span class="line">&#125;</span><br><span class="line">void pushdown(int k, int c) &#123;</span><br><span class="line">    if(!a[c][k].tag) return;</span><br><span class="line">    a[c][lson].s = a[c][lson].r - a[c][lson].l + 1 - a[c][lson].s;</span><br><span class="line">    a[c][rson].s = a[c][rson].r - a[c][rson].l + 1 - a[c][rson].s;</span><br><span class="line">    a[c][lson].tag ^= 1, a[c][rson].tag ^= 1;</span><br><span class="line">    a[c][k].tag = 0;</span><br><span class="line">&#125;</span><br><span class="line">void add(int k, int c, int l, int r) &#123;</span><br><span class="line">    if(a[c][k].l &gt; r || a[c][k].r &lt; l) return;</span><br><span class="line">    if(a[c][k].l &gt;= l &amp;&amp; a[c][k].r &lt;= r) &#123;</span><br><span class="line">        a[c][k].s = a[c][k].r - a[c][k].l + 1 - a[c][k].s;</span><br><span class="line">        a[c][k].tag ^= 1;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    pushdown(k, c);</span><br><span class="line">    add(lson, c, l, r);</span><br><span class="line">    add(rson, c, l, r);</span><br><span class="line">    pushup(k, c);</span><br><span class="line">&#125;</span><br><span class="line">ll query(int k, int c, int l, int r) &#123;</span><br><span class="line">    if(a[c][k].l &gt; r || a[c][k].r &lt; l) return 0;</span><br><span class="line">    if(a[c][k].l &gt;= l &amp;&amp; a[c][k].r &lt;= r) return a[c][k].s;</span><br><span class="line">    pushdown(k, c);</span><br><span class="line">    return query(lson, c, l, r) + query(rson, c, l, r);</span><br><span class="line">&#125;</span><br><span class="line">signed main () </span><br><span class="line">&#123;</span><br><span class="line">    int n;</span><br><span class="line">    scanf(&quot;%d&quot;, &amp;n);</span><br><span class="line">    for (int i = 1; i &lt;= n; ++i) scanf(&quot;%d&quot;, &amp;num[i]);</span><br><span class="line">    for (int i = 1; i &lt;= 24; ++i) build(1, i, 1, n);</span><br><span class="line">    int op, l, r, k;</span><br><span class="line">    int m;</span><br><span class="line">    scanf(&quot;%d&quot;, &amp;m);</span><br><span class="line">    while (m--) &#123;</span><br><span class="line">        scanf(&quot;%d%d%d&quot;, &amp;op, &amp;l, &amp;r);</span><br><span class="line">        if(op == 1) &#123;</span><br><span class="line">            ll ans = 0;</span><br><span class="line">            for (int i = 1; i &lt;= 24; ++i) ans += query(1, i, l, r) * (1ll &lt;&lt; (i - 1));</span><br><span class="line">            printf(&quot;%lld\n&quot;, ans);</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            scanf(&quot;%d&quot;, &amp;k);</span><br><span class="line">            if(k == 0) continue;</span><br><span class="line">            for (int i = 1; i &lt;= 24; ++i) &#123;</span><br><span class="line">                if(k &amp; 1) add(1, i, l, r);</span><br><span class="line">                k &gt;&gt;= 1;</span><br><span class="line">                if(!k) break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="11-4"><a href="#11-4" class="headerlink" title="11.4"></a>11.4</h1><h2 id="P2122-还教室"><a href="#P2122-还教室" class="headerlink" title="P2122 还教室"></a><a href="https://www.luogu.com.cn/problem/P2122">P2122 还教室</a></h2><p>维护区间方差与平均值，实际上维护区间的和以及平方和就可以了。</p><p>另：<strong>11-04 21:16:20 洛谷AC150题纪念。</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson k &lt;&lt; 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson k &lt;&lt; 1 | 1</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r, sum, tag, sqr;</span><br><span class="line">&#125;a[maxn &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> num[maxn];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    a[k].sum = a[lson].sum + a[rson].sum;</span><br><span class="line">    a[k].sqr = a[lson].sqr + a[rson].sqr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    a[k].l = l, a[k].r = r;</span><br><span class="line">    a[k].tag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l == r) &#123;</span><br><span class="line">        a[k].sum = num[l];</span><br><span class="line">        a[k].sqr = num[l] * num[l];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(lson, l, mid);</span><br><span class="line">    <span class="built_in">build</span>(rson, mid + <span class="number">1</span>, r);</span><br><span class="line">    <span class="built_in">pushup</span>(k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushtag</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    a[k].sqr += a[k].sum * <span class="number">2</span> * x + x * x * (a[k].r - a[k].l + <span class="number">1</span>);</span><br><span class="line">    a[k].sum += (a[k].r - a[k].l + <span class="number">1</span>) * x;</span><br><span class="line">    a[k].tag += x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a[k].tag) &#123;</span><br><span class="line">        <span class="built_in">pushtag</span>(lson, a[k].tag);</span><br><span class="line">        <span class="built_in">pushtag</span>(rson, a[k].tag);</span><br><span class="line">        a[k].tag = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a[k].l &gt; r || a[k].r &lt; l) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(a[k].l &gt;= l &amp;&amp; a[k].r &lt;= r) &#123;</span><br><span class="line">        <span class="built_in">pushtag</span>(k, x);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pushdown</span>(k);</span><br><span class="line">    <span class="built_in">add</span>(lson, l, r, x);</span><br><span class="line">    <span class="built_in">add</span>(rson, l, r, x);</span><br><span class="line">    <span class="built_in">pushup</span>(k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">querysum</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a[k].l &gt; r || a[k].r &lt; l) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(a[k].l &gt;= l &amp;&amp; a[k].r &lt;= r) <span class="keyword">return</span> a[k].sum;</span><br><span class="line">    <span class="built_in">pushdown</span>(k);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">querysum</span>(lson, l, r) + <span class="built_in">querysum</span>(rson, l, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">querysqr</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a[k].l &gt; r || a[k].r &lt; l) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(a[k].l &gt;= l &amp;&amp; a[k].r &lt;= r) <span class="keyword">return</span> a[k].sqr;</span><br><span class="line">    <span class="built_in">pushdown</span>(k);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">querysqr</span>(lson, l, r) + <span class="built_in">querysqr</span>(rson, l, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) cin &gt;&gt; num[i];</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    <span class="keyword">int</span> op, l, r, d;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(m--) &#123;</span><br><span class="line">        cin &gt;&gt; op &gt;&gt; l &gt;&gt; r;</span><br><span class="line">        <span class="keyword">if</span>(op == <span class="number">1</span>) &#123;</span><br><span class="line">            cin &gt;&gt; d;</span><br><span class="line">            <span class="built_in">add</span>(<span class="number">1</span>, l, r, d);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> res = <span class="built_in">querysum</span>(<span class="number">1</span>, l, r);</span><br><span class="line">            <span class="keyword">if</span>(res == <span class="number">0</span>) &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;0/1&quot;</span> &lt;&lt; endl;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> ret = __gcd(res, r - l + <span class="number">1</span>);</span><br><span class="line">            cout &lt;&lt; res / ret &lt;&lt; <span class="string">&#x27;/&#x27;</span> &lt;&lt; (r - l + <span class="number">1</span>) / ret &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> res1 = <span class="built_in">querysum</span>(<span class="number">1</span>, l, r);</span><br><span class="line">            <span class="keyword">int</span> res2 = <span class="built_in">querysqr</span>(<span class="number">1</span>, l, r);</span><br><span class="line">            <span class="keyword">int</span> ret;</span><br><span class="line">            <span class="keyword">int</span> fz = res2 * (r - l + <span class="number">1</span>) - res1 * res1;</span><br><span class="line">            <span class="keyword">int</span> fm = (r - l + <span class="number">1</span>) * (r - l + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(fz == <span class="number">0</span>) &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;0/1&quot;</span> &lt;&lt; endl;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ret = __gcd(fz, fm);</span><br><span class="line">            cout &lt;&lt; fz / ret &lt;&lt; <span class="string">&#x27;/&#x27;</span> &lt;&lt; fm / ret &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="11-9"><a href="#11-9" class="headerlink" title="11.9"></a>11.9</h1><h2 id="P4145-上帝造题的七分钟-2-花神游历各国"><a href="#P4145-上帝造题的七分钟-2-花神游历各国" class="headerlink" title="P4145 上帝造题的七分钟 2 / 花神游历各国"></a><a href="https://www.luogu.com.cn/problem/P4145">P4145 上帝造题的七分钟 2 / 花神游历各国</a></h2><p>看上去好像没法维护平方根数据结构，实际上 $10^{12}$ 内的数最多开方不到10次就成1了，遇到全为1的区间时停止修改即可。记这个最大次数为 $X$, 用线段树/树状数组维护的复杂度都是$O(Xn\log m)$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson k &lt;&lt; 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson k &lt;&lt; 1 | 1</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r, sum;</span><br><span class="line">&#125;a[maxn &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> num[maxn];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    a[k].sum = a[lson].sum + a[rson].sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    a[k].l = l, a[k].r = r;</span><br><span class="line">    <span class="keyword">if</span>(l == r) &#123;</span><br><span class="line">        a[k].sum = num[l];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(lson, l, mid);</span><br><span class="line">    <span class="built_in">build</span>(rson, mid + <span class="number">1</span>, r);</span><br><span class="line">    <span class="built_in">pushup</span>(k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a[k].l &gt; r || a[k].r &lt; l) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(a[k].r - a[k].l + <span class="number">1</span> == a[k].sum) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(a[k].l == a[k].r) &#123;</span><br><span class="line">        a[k].sum = <span class="built_in">sqrt</span>(a[k].sum);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">change</span>(lson, l, r);</span><br><span class="line">    <span class="built_in">change</span>(rson, l, r);</span><br><span class="line">    <span class="built_in">pushup</span>(k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a[k].l &gt; r || a[k].r &lt; l) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(a[k].l &gt;= l &amp;&amp; a[k].r &lt;= r) <span class="keyword">return</span> a[k].sum;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">query</span>(lson, l, r) + <span class="built_in">query</span>(rson, l, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;in.txt&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;out.txt&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) cin &gt;&gt; num[i];</span><br><span class="line">    cin &gt;&gt; m;</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    <span class="keyword">int</span> op, l, r;</span><br><span class="line">    <span class="keyword">while</span>(m--) &#123;</span><br><span class="line">        cin &gt;&gt; op &gt;&gt; l &gt;&gt; r;</span><br><span class="line">        <span class="keyword">if</span>(l &gt; r) <span class="built_in">swap</span>(l, r);</span><br><span class="line">        <span class="keyword">if</span>(op == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">change</span>(<span class="number">1</span>, l, r);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            cout &lt;&lt; <span class="built_in">query</span>(<span class="number">1</span>, l, r) &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="11-18"><a href="#11-18" class="headerlink" title="11.18"></a>11.18</h1><h2 id="P3803-【模板】多项式乘法（FFT）"><a href="#P3803-【模板】多项式乘法（FFT）" class="headerlink" title="P3803 【模板】多项式乘法（FFT）"></a><a href="https://www.luogu.com.cn/problem/P3803">P3803 【模板】多项式乘法（FFT）</a></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI acos(-1.0)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// op = 1 ? DFT : IDFT</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">3e6</span> + <span class="number">10</span>;</span><br><span class="line">complex &lt;<span class="keyword">double</span>&gt; F[maxn], G[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fft</span><span class="params">(complex&lt;<span class="keyword">double</span>&gt; f[], <span class="keyword">int</span> n, <span class="keyword">int</span> op)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!n) <span class="keyword">return</span>;</span><br><span class="line">    complex &lt;<span class="keyword">double</span>&gt; a[n], b[n];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; ++k) &#123;</span><br><span class="line">        a[k] = f[k &lt;&lt; <span class="number">1</span>], b[k] = f[k &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">fft</span>(a, n &gt;&gt; <span class="number">1</span>, op), <span class="built_in">fft</span>(b, n &gt;&gt; <span class="number">1</span>, op);</span><br><span class="line">    <span class="function">complex&lt;<span class="keyword">double</span>&gt; <span class="title">wn</span><span class="params">(cos(PI / n), sin(PI / n) * op)</span>, <span class="title">w</span><span class="params">(<span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; ++k, w *= wn) &#123;</span><br><span class="line">        f[k] = a[k] + w * b[k], f[k + n] = a[k] - w * b[k];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;F[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;G[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    m += n, n = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(n &lt;= m) n &lt;&lt;= <span class="number">1</span>; <span class="comment">// 补足系数，保证是2的幂次</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// DFT</span></span><br><span class="line">    <span class="built_in">fft</span>(F, n &gt;&gt; <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">fft</span>(G, n &gt;&gt; <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) F[i] *= G[i];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// IDFT</span></span><br><span class="line">    <span class="built_in">fft</span>(F, n &gt;&gt; <span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%.0f &quot;</span>, <span class="built_in">fabs</span>(F[i].<span class="built_in">real</span>()) / n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>11.21的NTT写法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI acos(-1.0)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// op = 1 ? DFT : IDFT</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">3e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> F[maxn], G[maxn];</span><br><span class="line"><span class="keyword">int</span> r[maxn];</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fpow</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(p) &#123;</span><br><span class="line">        <span class="keyword">if</span>(p &amp; <span class="number">1</span>) ans = (ans * a) % mod;</span><br><span class="line">        a = (a * a) % mod;</span><br><span class="line">        p &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ntt</span><span class="params">(<span class="keyword">int</span> f[], <span class="keyword">int</span> n, <span class="keyword">int</span> op)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!n) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(i &lt; r[i]) <span class="built_in">swap</span>(f[i], f[r[i]]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> mid = <span class="number">1</span>; mid &lt; n; mid &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> wn = <span class="built_in">fpow</span>(op == <span class="number">1</span> ? <span class="number">3</span> : <span class="number">332748118</span>, (mod - <span class="number">1</span>) / (mid &lt;&lt; <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j += (mid &lt;&lt; <span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="keyword">int</span> w = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; mid; ++k, w = w * wn % mod) &#123;</span><br><span class="line">                <span class="keyword">int</span> x = f[j + k], y = w * f[j + k + mid] % mod;</span><br><span class="line">                f[j + k] = (x + y) % mod;</span><br><span class="line">                f[j + k + mid] = ((x - y) % mod + mod) % mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;F[i]);</span><br><span class="line">        F[i] = (F[i] + mod) % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        G[i] = (G[i] + mod) % mod;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;G[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    m += n, n = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(n &lt;= m) n &lt;&lt;= <span class="number">1</span>, cnt++; <span class="comment">// 补足系数，保证是2的幂次</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) r[i] = (r[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) | ((i &amp; <span class="number">1</span>) &lt;&lt; (cnt - <span class="number">1</span>));</span><br><span class="line">    <span class="comment">// DFT</span></span><br><span class="line">    <span class="built_in">ntt</span>(F, n, <span class="number">1</span>), <span class="built_in">ntt</span>(G, n, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) F[i] = (F[i] * G[i]) % mod;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// IDFT</span></span><br><span class="line">    <span class="built_in">ntt</span>(F, n, <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">int</span> inv = <span class="built_in">fpow</span>(n, mod - <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld &quot;</span>, (F[i] * inv) % mod);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="11-23"><a href="#11-23" class="headerlink" title="11.23"></a>11.23</h1><h2 id="P3389-【模板】高斯消元法"><a href="#P3389-【模板】高斯消元法" class="headerlink" title="P3389 【模板】高斯消元法"></a><a href="https://www.luogu.com.cn/problem/P3389">P3389 【模板】高斯消元法</a></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">105</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">double</span> a[maxn][maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n + <span class="number">1</span>; ++j) &#123;</span><br><span class="line">            cin &gt;&gt; a[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> mx = i;</span><br><span class="line">        <span class="comment">// 选出该列最大系数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">fabs</span>(a[j][i]) &gt; <span class="built_in">fabs</span>(a[mx][i])) &#123;</span><br><span class="line">                mx = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n + <span class="number">1</span>; ++j) &#123;</span><br><span class="line">            <span class="built_in">swap</span>(a[i][j], a[mx][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!a[i][i]) &#123;</span><br><span class="line">            <span class="comment">// Solution not </span></span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;No Solution&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span>(j != i) &#123;</span><br><span class="line">                <span class="keyword">double</span> tmp = a[j][i] / a[i][i];</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = i + <span class="number">1</span>; k &lt;= n + <span class="number">1</span>; ++k) &#123;</span><br><span class="line">                    a[j][k] -= a[i][k] * tmp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        cout &lt;&lt; a[i][n + <span class="number">1</span>] / a[i][i] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="11-25"><a href="#11-25" class="headerlink" title="11.25"></a>11.25</h1><h2 id="CF438D-The-Child-and-Sequence"><a href="#CF438D-The-Child-and-Sequence" class="headerlink" title="CF438D The Child and Sequence"></a><a href="https://www.luogu.com.cn/problem/CF438D">CF438D The Child and Sequence</a></h2><p>类似P4145，每个点被修改的次数有限，可以适当暴力</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson k &lt;&lt; 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson k &lt;&lt; 1 | 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r, sum, mx, add;</span><br><span class="line">&#125;a[maxn &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> num[maxn];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    a[k].sum = a[lson].sum + a[rson].sum;</span><br><span class="line">    a[k].mx = <span class="built_in">max</span>(a[lson].mx, a[rson].mx);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    a[k].l = l, a[k].r = r;</span><br><span class="line">    <span class="keyword">if</span>(l == r) &#123;</span><br><span class="line">        a[k].sum = num[l];</span><br><span class="line">        a[k].mx = num[l];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(lson, l, mid);</span><br><span class="line">    <span class="built_in">build</span>(rson, mid + <span class="number">1</span>, r);</span><br><span class="line">    <span class="built_in">pushup</span>(k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    a[lson].sum += a[k].add;</span><br><span class="line">    a[rson].sum += a[k].add;</span><br><span class="line">    a[lson].mx += a[k].add;</span><br><span class="line">    a[rson].mx += a[k].add;</span><br><span class="line">    a[lson].add += a[k].add;</span><br><span class="line">    a[rson].add += a[k].add;</span><br><span class="line">    a[k].add = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mod</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a[k].l &gt; r || a[k].r &lt; l) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(a[k].mx &lt; p) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(a[k].l == a[k].r) &#123;</span><br><span class="line">        a[k].sum %= p;</span><br><span class="line">        a[k].mx = a[k].sum;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pushdown</span>(k);</span><br><span class="line">    <span class="built_in">mod</span>(lson, l, r, p);</span><br><span class="line">    <span class="built_in">mod</span>(rson, l, r, p);</span><br><span class="line">    <span class="built_in">pushup</span>(k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> l, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a[k].l &gt; l || a[k].r &lt; l) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(a[k].l == a[k].r) &#123;</span><br><span class="line">        a[k].sum = x;</span><br><span class="line">        a[k].mx = x;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pushdown</span>(k);</span><br><span class="line">    <span class="built_in">change</span>(lson, l, x);</span><br><span class="line">    <span class="built_in">change</span>(rson, l, x);</span><br><span class="line">    <span class="built_in">pushup</span>(k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a[k].l &gt; r || a[k].r &lt; l) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(a[k].l &gt;= l &amp;&amp; a[k].r &lt;= r) &#123;</span><br><span class="line">        <span class="keyword">return</span> a[k].sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pushdown</span>(k);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">query</span>(lson, l, r) + <span class="built_in">query</span>(rson, l, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;num[i]);</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    <span class="keyword">int</span> op, l, r, x;</span><br><span class="line">    <span class="keyword">while</span>(m--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%lld&quot;</span>, &amp;op, &amp;l, &amp;r);</span><br><span class="line">        <span class="keyword">if</span>(op == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">query</span>(<span class="number">1</span>, l, r));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;x);</span><br><span class="line">            <span class="built_in">mod</span>(<span class="number">1</span>, l, r, x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="built_in">change</span>(<span class="number">1</span>, l, r);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CF1000F-One-Occurrence"><a href="#CF1000F-One-Occurrence" class="headerlink" title="CF1000F One Occurrence"></a><a href="https://www.luogu.com.cn/problem/CF1000F">CF1000F One Occurrence</a></h2><p>卡常的道路越走越远（</p><p>又是用根号算法卡 $\log$ 的 std （逃</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(3)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">&quot;Ofast&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rint register int</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">query</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r;</span><br><span class="line">    <span class="keyword">int</span> idx, blc;</span><br><span class="line">&#125;q[maxn];</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="keyword">int</span> mp[maxn];</span><br><span class="line"><span class="keyword">int</span> pos[maxn];</span><br><span class="line"><span class="keyword">int</span> stk[maxn];</span><br><span class="line"><span class="keyword">int</span> top = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> query&amp; x, <span class="keyword">const</span> query&amp; y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x.blc == y.blc) <span class="keyword">if</span>(x.blc &amp; <span class="number">1</span>) <span class="keyword">return</span> x.r &lt; y.r; <span class="keyword">else</span> <span class="keyword">return</span> x.r &gt; y.r;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> x.l &lt; y.l;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans[maxn];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">gc</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">char</span> buf[<span class="number">100000</span>],*p1=buf,*p2=buf;</span><br><span class="line">    <span class="keyword">return</span> p1==p2&amp;&amp;(p2=(p1=buf)+<span class="built_in">fread</span>(buf,<span class="number">1</span>,<span class="number">100000</span>,stdin),p1==p2)?EOF:*p1++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span>&#123;</span><br><span class="line">    x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> c = <span class="built_in">gc</span>();</span><br><span class="line"><span class="keyword">while</span>(c&lt;<span class="string">&#x27;0&#x27;</span>||c&gt;<span class="string">&#x27;9&#x27;</span>) c = <span class="built_in">gc</span>();</span><br><span class="line"><span class="keyword">while</span>(c&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;c&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">x = (x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(c^<span class="number">48</span>);</span><br><span class="line">c = <span class="built_in">gc</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (rint i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">read</span>(a[i]);</span><br><span class="line">    <span class="built_in">read</span>(m);</span><br><span class="line">    <span class="keyword">int</span> u = (<span class="keyword">int</span>)<span class="built_in">sqrt</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (rint i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="built_in">read</span>(q[i].l);</span><br><span class="line">        <span class="built_in">read</span>(q[i].r);</span><br><span class="line">        q[i].idx = i;</span><br><span class="line">        q[i].blc = (q[i].l - <span class="number">1</span>) / u + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(q + <span class="number">1</span>, q + <span class="number">1</span> + m, cmp);</span><br><span class="line">    stk[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    rint l = <span class="number">1</span>, r = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (rint i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="keyword">while</span>(l &gt; q[i].l) &#123;</span><br><span class="line">            l--;</span><br><span class="line">            mp[a[l]]++;</span><br><span class="line">            <span class="keyword">if</span>(mp[a[l]] == <span class="number">1</span>) &#123;</span><br><span class="line">                stk[++top] = a[l];</span><br><span class="line">                pos[a[l]] = top;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(mp[a[l]] == <span class="number">2</span>) &#123;</span><br><span class="line">                stk[pos[a[l]]] = stk[top];</span><br><span class="line">                pos[stk[top]] = pos[a[l]];</span><br><span class="line">                stk[top--] = pos[a[l]] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(r &lt; q[i].r) &#123;</span><br><span class="line">            r++;</span><br><span class="line">            mp[a[r]]++;</span><br><span class="line">            <span class="keyword">if</span>(mp[a[r]] == <span class="number">1</span>) &#123;</span><br><span class="line">                stk[++top] = a[r];</span><br><span class="line">                pos[a[r]] = top;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(mp[a[r]] == <span class="number">2</span>) &#123;</span><br><span class="line">                stk[pos[a[r]]] = stk[top];</span><br><span class="line">                pos[stk[top]] = pos[a[r]];</span><br><span class="line">                stk[top--] = pos[a[r]] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(l &lt; q[i].l) &#123;</span><br><span class="line">            mp[a[l]]--;</span><br><span class="line">            <span class="keyword">if</span>(mp[a[l]] == <span class="number">1</span>) &#123;</span><br><span class="line">                stk[++top] = a[l];</span><br><span class="line">                pos[a[l]] = top;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(mp[a[l]] == <span class="number">0</span>) &#123;</span><br><span class="line">                stk[pos[a[l]]] = stk[top];</span><br><span class="line">                pos[stk[top]] = pos[a[l]];</span><br><span class="line">                stk[top--] = pos[a[l]] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            l++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(r &gt; q[i].r) &#123;</span><br><span class="line">            mp[a[r]]--;</span><br><span class="line">            <span class="keyword">if</span>(mp[a[r]] == <span class="number">1</span>) &#123;</span><br><span class="line">                stk[++top] = a[r];</span><br><span class="line">                pos[a[r]] = top;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(mp[a[r]] == <span class="number">0</span>) &#123;</span><br><span class="line">                stk[pos[a[r]]] = stk[top];</span><br><span class="line">                pos[stk[top]] = pos[a[r]];</span><br><span class="line">                stk[top--] = pos[a[r]] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            r--;</span><br><span class="line">        &#125;</span><br><span class="line">        ans[q[i].idx] = stk[top];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (rint i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="P2184-贪婪大陆"><a href="#P2184-贪婪大陆" class="headerlink" title="P2184 贪婪大陆"></a><a href="https://www.luogu.com.cn/problem/P2184">P2184 贪婪大陆</a></h2><p>一次过，今天码力在线qwq</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson k &lt;&lt; 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson k &lt;&lt; 1 | 1</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r;</span><br><span class="line">    <span class="keyword">int</span> pre, lst;</span><br><span class="line">    <span class="keyword">int</span> tp, tl;</span><br><span class="line">&#125;a[maxn &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> num[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    a[k].l = l, a[k].r = r;</span><br><span class="line">    <span class="keyword">if</span>(l == r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(lson, l, mid);</span><br><span class="line">    <span class="built_in">build</span>(rson, mid + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    a[k].pre = a[lson].pre + a[rson].pre;</span><br><span class="line">    a[k].lst = a[lson].lst + a[rson].lst;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushtag</span> <span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    a[k].tp += x;</span><br><span class="line">    a[k].pre += x;</span><br><span class="line">    a[k].lst += y;</span><br><span class="line">    a[k].tl += y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">pushtag</span>(lson, a[k].tp, a[k].tl);</span><br><span class="line">    <span class="built_in">pushtag</span>(rson, a[k].tp, a[k].tl);</span><br><span class="line">    a[k].tp = a[k].tl = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> type)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a[k].l &gt; r || a[k].r &lt; l) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(a[k].l &gt;= l &amp;&amp; a[k].r &lt;= r) &#123;</span><br><span class="line">        <span class="keyword">if</span>(type == <span class="number">1</span>) a[k].pre++, a[k].tp++;</span><br><span class="line">        <span class="keyword">else</span> a[k].lst++, a[k].tl++;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pushdown</span>(k);</span><br><span class="line">    <span class="built_in">add</span>(lson, l, r, type);</span><br><span class="line">    <span class="built_in">add</span>(rson, l, r, type);</span><br><span class="line">    <span class="built_in">pushup</span>(k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> x, <span class="keyword">int</span> type)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a[k].l &gt; x || a[k].r &lt; x) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(a[k].l == a[k].r) &#123;</span><br><span class="line">        <span class="keyword">if</span>(type == <span class="number">1</span>) <span class="keyword">return</span> a[k].pre;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> a[k].lst;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pushdown</span>(k);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">query</span>(lson, x, type) + <span class="built_in">query</span>(rson, x, type);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">0</span>, n);</span><br><span class="line">    <span class="keyword">int</span> q, l, r;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;q, &amp;l, &amp;r);</span><br><span class="line">        <span class="keyword">if</span>(q == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">add</span>(<span class="number">1</span>, l, n, <span class="number">1</span>);</span><br><span class="line">            <span class="built_in">add</span>(<span class="number">1</span>, r, n, <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> ans = <span class="built_in">query</span>(<span class="number">1</span>, r, <span class="number">1</span>);</span><br><span class="line">            ans -= <span class="built_in">query</span>(<span class="number">1</span>, l - <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="11-28"><a href="#11-28" class="headerlink" title="11.28"></a>11.28</h1><h2 id="P1637-三元上升子序列"><a href="#P1637-三元上升子序列" class="headerlink" title="P1637 三元上升子序列"></a><a href="https://www.luogu.com.cn/problem/P1637">P1637 三元上升子序列</a></h2><p>维护两个树状数组</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) ((x)&amp;(-(x)))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">3e4</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="keyword">int</span> c[maxn];</span><br><span class="line"><span class="keyword">int</span> d[maxn];</span><br><span class="line"><span class="keyword">int</span> b[maxn];</span><br><span class="line">map&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; mp;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> pos;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(k &lt;= pos) &#123;</span><br><span class="line">        c[k] += x;</span><br><span class="line">        k += <span class="built_in">lowbit</span>(k);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">        ans += c[x];</span><br><span class="line">        x -= <span class="built_in">lowbit</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add2</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(k &lt;= pos) &#123;</span><br><span class="line">        d[k] += x;</span><br><span class="line">        k += <span class="built_in">lowbit</span>(k);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query2</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">        ans += d[x];</span><br><span class="line">        x -= <span class="built_in">lowbit</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]), b[i] = a[i];</span><br><span class="line">    <span class="built_in">sort</span>(b + <span class="number">1</span>, b + <span class="number">1</span> + n);</span><br><span class="line">    b[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(b[i] != b[i - <span class="number">1</span>]) &#123;</span><br><span class="line">            mp[b[i]] = ++pos;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">add2</span>(mp[a[i]], <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">add2</span>(mp[a[i]], <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">int</span> r1 = <span class="built_in">query</span>(mp[a[i]] - <span class="number">1</span>), r2 = <span class="built_in">query2</span>(pos) - <span class="built_in">query2</span>(mp[a[i]]);</span><br><span class="line">        ans += r1 * r2;</span><br><span class="line">        <span class="built_in">add</span>(mp[a[i]], <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="12-9"><a href="#12-9" class="headerlink" title="12.9"></a>12.9</h1><p>回新手村练练手，希望重新找回A题的快感，停止自闭……手太生了，感觉特别差…….明明没有休整几天的说（也有十来天了吧喂！）。总之，必须快点重整旗鼓。</p><p>今日目标：刷完洛谷贪心题单（整个题单就没有难题啊喂！）。</p><h2 id="P1803-凌乱的yyy-线段覆盖"><a href="#P1803-凌乱的yyy-线段覆盖" class="headerlink" title="P1803 凌乱的yyy / 线段覆盖"></a><a href="https://www.luogu.com.cn/problem/P1803">P1803 凌乱的yyy / 线段覆盖</a></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> node &amp;x) &#123;</span><br><span class="line">        <span class="keyword">return</span> r &lt; x.r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;a[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) cin &gt;&gt; a[i].l &gt;&gt; a[i].r;</span><br><span class="line">    <span class="built_in">sort</span> (a + <span class="number">1</span>, a + <span class="number">1</span> + n);</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> now = a[<span class="number">1</span>].r;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i].l &gt;= now) &#123;</span><br><span class="line">            ans++;</span><br><span class="line">            now = a[i].r;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="P2240-【深基12-例1】部分背包问题"><a href="#P2240-【深基12-例1】部分背包问题" class="headerlink" title="P2240 【深基12.例1】部分背包问题"></a><a href="https://www.luogu.com.cn/problem/P2240">P2240 【深基12.例1】部分背包问题</a></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">double</span> ans;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">105</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> weight;</span><br><span class="line">    <span class="keyword">double</span> x; <span class="comment">// 单位价值</span></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> node &amp;y) &#123;</span><br><span class="line">        <span class="keyword">return</span> x &gt; y.x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;a[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, t;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; t;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> x, y;</span><br><span class="line">        cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        a[i].weight = x;</span><br><span class="line">        a[i].x = <span class="number">1.0</span> * y / x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(a + <span class="number">1</span>, a + <span class="number">1</span> + n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i].weight &gt; t) &#123;</span><br><span class="line">            ans += a[i].x * t;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ans += a[i].x * a[i].weight;</span><br><span class="line">        t -= a[i].weight;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; fixed &lt;&lt; <span class="built_in">setprecision</span>(<span class="number">2</span>) &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="P1223-排队接水"><a href="#P1223-排队接水" class="headerlink" title="P1223 排队接水"></a><a href="https://www.luogu.com.cn/problem/P1223">P1223 排队接水</a></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn =<span class="number">1005</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> x, id;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> node &amp; y) &#123;</span><br><span class="line">        <span class="keyword">return</span> x &lt; y.x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;a[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) a[i].id = i, cin &gt;&gt; a[i].x;</span><br><span class="line">    <span class="built_in">sort</span>(a + <span class="number">1</span>, a + <span class="number">1</span> + n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) cout &lt;&lt; a[i].id &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">double</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        ans += (n - i) * a[i].x;</span><br><span class="line">    &#125;</span><br><span class="line">    ans /= n;</span><br><span class="line">    cout &lt;&lt; fixed &lt;&lt; <span class="built_in">setprecision</span>(<span class="number">2</span>) &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="P3817-小A的糖果"><a href="#P3817-小A的糖果" class="headerlink" title="P3817 小A的糖果"></a><a href="https://www.luogu.com.cn/problem/P3817">P3817 小A的糖果</a></h2><p>不开<code>long long</code>见祖宗！</p><p>我怎么就是甜蜜的改不过来？？？？</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> n, x;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; x;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) cin &gt;&gt; a[i];</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] + a[i - <span class="number">1</span>] &gt; x) &#123;</span><br><span class="line">            ans += a[i] + a[i - <span class="number">1</span>] - x;</span><br><span class="line">            a[i] = x - a[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="P1106-删数问题"><a href="#P1106-删数问题" class="headerlink" title="P1106 删数问题"></a><a href="https://www.luogu.com.cn/problem/P1106">P1106 删数问题</a></h2><p>删峰即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">255</span>;</span><br><span class="line"><span class="keyword">bool</span> v[maxn];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    string s;</span><br><span class="line">    cin &gt;&gt; s;</span><br><span class="line">    <span class="keyword">int</span> k;</span><br><span class="line">    cin &gt;&gt; k;</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; ++i) &#123;</span><br><span class="line">        <span class="comment">// 去前导0</span></span><br><span class="line">        <span class="keyword">while</span> (v[l] || s[l] == <span class="string">&#x27;0&#x27;</span>) l++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = l; j &lt; s.<span class="built_in">size</span>(); ) &#123;</span><br><span class="line">            <span class="keyword">while</span> (j &lt; s.<span class="built_in">size</span>() &amp;&amp; v[j]) j++;</span><br><span class="line">            <span class="keyword">int</span> p1 = j++;</span><br><span class="line">            <span class="keyword">while</span> (j &lt; s.<span class="built_in">size</span>() &amp;&amp; v[j]) j++;</span><br><span class="line">            <span class="keyword">if</span> (p1 &lt; s.<span class="built_in">size</span>() &amp;&amp; (j &gt;= s.<span class="built_in">size</span>() || s[p1] &gt; s[j])) &#123;</span><br><span class="line">                v[p1] = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt; s.<span class="built_in">size</span>(); ++i) <span class="keyword">if</span>(!v[i]) cout &lt;&lt; s[i];</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://www.luogu.com.cn/problem/P1478">P1478 陶陶摘苹果（升级版）</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5005</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> node &amp;other) &#123;</span><br><span class="line">        <span class="keyword">return</span> y &lt; other.y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;a[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> n, s;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; s;</span><br><span class="line">    <span class="keyword">int</span> u, v;</span><br><span class="line">    cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) cin &gt;&gt; a[i].x &gt;&gt; a[i].y;</span><br><span class="line">    <span class="built_in">sort</span> (a + <span class="number">1</span>, a + <span class="number">1</span> + n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i].x &lt;= u + v &amp;&amp; a[i].y &lt;= s) &#123;</span><br><span class="line">            s -= a[i].y;</span><br><span class="line">            ans ++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="P4447-AHOI2018初中组-分组"><a href="#P4447-AHOI2018初中组-分组" class="headerlink" title="P4447 [AHOI2018初中组]分组"></a><a href="https://www.luogu.com.cn/problem/P4447">P4447 [AHOI2018初中组]分组</a></h2><p>蒟蒻跪了orz</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line">map&lt;<span class="keyword">int</span>, priority_queue&lt;<span class="keyword">int</span>, vector&lt;<span class="keyword">int</span>&gt;, greater&lt;<span class="keyword">int</span>&gt;&gt;&gt; mp;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) cin &gt;&gt; a[i];</span><br><span class="line">    <span class="built_in">sort</span>(a + <span class="number">1</span>, a + <span class="number">1</span> + n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mp[a[i] - <span class="number">1</span>].<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            mp[a[i]].<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> r = mp[a[i] - <span class="number">1</span>].<span class="built_in">top</span>();</span><br><span class="line">            mp[a[i] - <span class="number">1</span>].<span class="built_in">pop</span>();</span><br><span class="line">            mp[a[i]].<span class="built_in">push</span>(r + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : mp) &#123;</span><br><span class="line">        <span class="keyword">if</span> (x.second.<span class="built_in">empty</span>()) <span class="keyword">continue</span>;</span><br><span class="line">        ans = <span class="built_in">min</span>(ans, (<span class="keyword">int</span>)x.second.<span class="built_in">top</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="P1094-NOIP2007-普及组-纪念品分组"><a href="#P1094-NOIP2007-普及组-纪念品分组" class="headerlink" title="P1094 [NOIP2007 普及组] 纪念品分组"></a><a href="https://www.luogu.com.cn/problem/P1094">P1094 [NOIP2007 普及组] 纪念品分组</a></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="keyword">bool</span> v[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> w;</span><br><span class="line">    cin &gt;&gt; w;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="comment">// int cnt = 0;</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) cin &gt;&gt; a[i];</span><br><span class="line">    <span class="built_in">sort</span>(a + <span class="number">1</span>, a + <span class="number">1</span> + n);</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">1</span>, r = n;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">        <span class="keyword">while</span> (r &gt; l &amp;&amp; a[l] + a[r] &gt; w) r--;</span><br><span class="line">        <span class="keyword">if</span> (r &gt; l) &#123;</span><br><span class="line">            ans++;</span><br><span class="line">            v[l] = <span class="number">1</span>;</span><br><span class="line">            v[r] = <span class="number">1</span>;</span><br><span class="line">            l++;</span><br><span class="line">            r--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="keyword">if</span>(!v[i]) ans++;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="12-14"><a href="#12-14" class="headerlink" title="12.14"></a>12.14</h1><h2 id="P3369-【模板】普通平衡树"><a href="#P3369-【模板】普通平衡树" class="headerlink" title="P3369 【模板】普通平衡树"></a><a href="https://www.luogu.com.cn/problem/P3369">P3369 【模板】普通平衡树</a></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line"><span class="keyword">int</span> root;</span><br><span class="line"><span class="comment">// 注意按p是小根堆</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r, size, val, p;</span><br><span class="line">&#125;a[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    a[k].size = <span class="number">1</span> + a[a[k].l].size + a[a[k].r].size;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rrotate</span><span class="params">(<span class="keyword">int</span> &amp;k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tmp = a[k].l;</span><br><span class="line">    a[k].l = a[tmp].r;</span><br><span class="line">    a[tmp].r = k;</span><br><span class="line">    a[tmp].size = a[k].size;</span><br><span class="line">    <span class="built_in">pushup</span>(k);</span><br><span class="line">    k = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">lrotate</span><span class="params">(<span class="keyword">int</span> &amp;k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tmp = a[k].r;</span><br><span class="line">    a[k].r = a[tmp].l;</span><br><span class="line">    a[tmp].l = k;</span><br><span class="line">    a[tmp].size = a[k].size;</span><br><span class="line">    <span class="built_in">pushup</span>(k);</span><br><span class="line">    k = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> &amp;k, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (k == <span class="number">0</span>) &#123;</span><br><span class="line">        k = ++cnt;</span><br><span class="line">        a[k].val = val;</span><br><span class="line">        a[k].p = <span class="built_in">rand</span>();</span><br><span class="line">        a[k].size = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    a[k].size++;</span><br><span class="line">    <span class="keyword">if</span> (val &gt;= a[k].val) &#123;</span><br><span class="line">        <span class="built_in">ins</span>(a[k].r, val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">ins</span>(a[k].l, val);</span><br><span class="line">    <span class="keyword">if</span> (a[k].l &amp;&amp; a[k].p &gt; a[a[k].l].p) &#123;</span><br><span class="line">        <span class="built_in">rrotate</span>(k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a[k].r &amp;&amp; a[k].p &gt; a[a[k].r].p) &#123;</span><br><span class="line">        <span class="built_in">lrotate</span>(k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pushup</span>(k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> &amp;k, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    a[k].size--;</span><br><span class="line">    <span class="keyword">if</span> (a[k].val == val) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!a[k].l &amp;&amp; !a[k].r) &#123;</span><br><span class="line">            k = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!a[k].l || !a[k].r) &#123;</span><br><span class="line">            k = a[k].l + a[k].r;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (a[a[k].l].p &lt; a[a[k].r].p) &#123;</span><br><span class="line">            <span class="built_in">rrotate</span>(k);</span><br><span class="line">            <span class="built_in">del</span>(a[k].r, val); <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">lrotate</span>(k);</span><br><span class="line">            <span class="built_in">del</span>(a[k].l, val); <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a[k].val &gt;= val) &#123;</span><br><span class="line">        <span class="built_in">del</span>(a[k].l, val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">del</span>(a[k].r, val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pushup</span>(k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rk</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!k) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (val &gt; a[k].val) &#123;</span><br><span class="line">        <span class="keyword">return</span> a[a[k].l].size + <span class="built_in">rk</span>(a[k].r, val) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">rk</span>(a[k].l, val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> rnk)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (rnk == a[a[k].l].size + <span class="number">1</span>) <span class="keyword">return</span> a[k].val;</span><br><span class="line">    <span class="keyword">if</span> (rnk &gt; a[a[k].l].size + <span class="number">1</span>) <span class="keyword">return</span> <span class="built_in">find</span>(a[k].r, rnk - a[a[k].l].size - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">find</span>(a[k].l, rnk);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query_pre</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!k) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (a[k].val &gt;= val) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">query_pre</span>(a[k].l, val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> tmp = <span class="built_in">query_pre</span>(a[k].r, val);</span><br><span class="line">    <span class="keyword">if</span> (!tmp) <span class="keyword">return</span> a[k].val;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query_suf</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!k) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (a[k].val &lt;= val) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">query_suf</span>(a[k].r, val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> tmp = <span class="built_in">query_suf</span>(a[k].l, val);</span><br><span class="line">    <span class="keyword">if</span> (!tmp) <span class="keyword">return</span> a[k].val;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">int</span> opt, x;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; opt &gt;&gt; x;</span><br><span class="line">        <span class="keyword">if</span> (opt == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">ins</span>(root, x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (opt == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="built_in">del</span>(root, x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (opt == <span class="number">3</span>) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="built_in">rk</span>(root, x) + <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (opt == <span class="number">4</span>) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="built_in">find</span>(root, x) &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (opt == <span class="number">5</span>) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="built_in">query_pre</span>(root, x) &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> cout &lt;&lt; <span class="built_in">query_suf</span>(root, x) &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="1-17"><a href="#1-17" class="headerlink" title="1.17"></a>1.17</h1><h2 id="P1878-舞蹈课"><a href="#P1878-舞蹈课" class="headerlink" title="P1878 舞蹈课 "></a><a href="https://www.luogu.com.cn/problem/P1878">P1878 舞蹈课 </a></h2><p>康复训练，排序规则又不写完整。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="keyword">bool</span> type[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mate</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r, c;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> mate &amp; another) <span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (c == another.c) <span class="keyword">return</span> l &gt; another.l;</span><br><span class="line">        <span class="keyword">return</span> c &gt; another.c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">vector&lt;mate&gt; ans;</span><br><span class="line">priority_queue&lt;mate&gt; q;</span><br><span class="line"><span class="keyword">bool</span> v[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    string s;</span><br><span class="line">    cin &gt;&gt; s;</span><br><span class="line">    s = <span class="string">&#x27;1&#x27;</span> + s;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        type[i] = s[i] == <span class="string">&#x27;B&#x27;</span> ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (type[i] != type[i + <span class="number">1</span>]) &#123;</span><br><span class="line">            q.<span class="built_in">push</span>(&#123;i, i + <span class="number">1</span>, <span class="built_in">abs</span>(a[i] - a[i + <span class="number">1</span>])&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="keyword">while</span> (v[q.<span class="built_in">top</span>().l] || v[q.<span class="built_in">top</span>().r]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">        &#125; <span class="keyword">if</span> (q.<span class="built_in">empty</span>()) <span class="keyword">break</span>;</span><br><span class="line">        ans.<span class="built_in">push_back</span>(q.<span class="built_in">top</span>());</span><br><span class="line">        <span class="keyword">int</span> l = q.<span class="built_in">top</span>().l, r = q.<span class="built_in">top</span>().r;</span><br><span class="line">        v[q.<span class="built_in">top</span>().l] = v[q.<span class="built_in">top</span>().r] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (v[l] &amp;&amp; l &gt;= <span class="number">1</span>) l--;</span><br><span class="line">        <span class="keyword">while</span> (v[r] &amp;&amp; r &lt;= n) r++;</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= <span class="number">1</span> &amp;&amp; r &lt;= n &amp;&amp; type[l] != type[r]) q.<span class="built_in">push</span>(&#123;l, r, <span class="built_in">abs</span>(a[l] - a[r])&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp; x : ans) &#123;</span><br><span class="line">        cout &lt;&lt; x.l &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; x.r &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="1-19"><a href="#1-19" class="headerlink" title="1.19"></a>1.19</h1><h2 id="P1040-NOIP2003-提高组-加分二叉树"><a href="#P1040-NOIP2003-提高组-加分二叉树" class="headerlink" title="P1040 [NOIP2003 提高组] 加分二叉树"></a><a href="https://www.luogu.com.cn/problem/P1040">P1040 [NOIP2003 提高组] 加分二叉树</a></h2><p>区间DP.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) ((x)&amp;(-(x)))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">105</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="keyword">int</span> dp[maxn][maxn]; <span class="comment">// 从i到j的子树答案</span></span><br><span class="line"><span class="keyword">int</span> rt[maxn][maxn]; <span class="comment">// 根是谁</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 前序：根 左 右</span></span><br><span class="line">    <span class="keyword">if</span> (l &gt; r) <span class="keyword">return</span>;</span><br><span class="line">    cout &lt;&lt; rt[l][r] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">dfs</span>(l, rt[l][r] - <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">dfs</span>(rt[l][r] + <span class="number">1</span>, r);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        dp[i][i] = a[i];</span><br><span class="line">        rt[i][i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> len = <span class="number">2</span>; len &lt;= n; ++len) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i + len - <span class="number">1</span> &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="comment">// 枚举根</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;= i + len - <span class="number">1</span>; ++j) &#123;</span><br><span class="line">                <span class="comment">// dp[i][i + len - 1] = max(dp[i][i + len - 1], max(1ll, dp[i][j - 1]) * max(1ll, dp[j + 1][i + len - 1]) + a[j]);</span></span><br><span class="line">                <span class="keyword">int</span> l = <span class="built_in">max</span>(<span class="number">1ll</span>, dp[i][j - <span class="number">1</span>]);</span><br><span class="line">                <span class="keyword">int</span> r = <span class="built_in">max</span>(<span class="number">1ll</span>, dp[j + <span class="number">1</span>][i + len - <span class="number">1</span>]);</span><br><span class="line">                <span class="keyword">if</span> (l * r + a[j] &gt; dp[i][i + len - <span class="number">1</span>]) &#123;</span><br><span class="line">                    rt[i][i + len - <span class="number">1</span>] = j;</span><br><span class="line">                    dp[i][i + len - <span class="number">1</span>] = l * r + a[j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; dp[<span class="number">1</span>][n] &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>, n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="P5020-NOIP2018-提高组-货币系统"><a href="#P5020-NOIP2018-提高组-货币系统" class="headerlink" title="P5020 [NOIP2018 提高组] 货币系统"></a><a href="https://www.luogu.com.cn/problem/P5020">P5020 [NOIP2018 提高组] 货币系统</a></h2><p>背包</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) ((x)&amp;(-(x)))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">105</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="keyword">bool</span> v[<span class="number">25005</span>];</span><br><span class="line"><span class="keyword">int</span> dp[(<span class="keyword">int</span>)<span class="number">3e6</span> + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            cin &gt;&gt; a[i];</span><br><span class="line">            v[a[i]] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(a + <span class="number">1</span>, a + <span class="number">1</span> + n);</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> mx = a[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= a[n]; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i - a[j] &lt; <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">if</span> (dp[i - a[j]]) &#123;</span><br><span class="line">                    dp[i] = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (v[i] &amp;&amp; !dp[i]) &#123;</span><br><span class="line">                dp[i] = <span class="number">1</span>;</span><br><span class="line">                ans++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) v[a[i]] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= a[n]; ++i) dp[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;9-23&quot;&gt;&lt;a href=&quot;#9-23&quot; class=&quot;headerlink&quot; title=&quot;9.23&quot;&gt;&lt;/a&gt;9.23&lt;/h1&gt;&lt;h2 id=&quot;P2032-扫描&quot;&gt;&lt;a href=&quot;#P2032-扫描&quot; class=&quot;headerl</summary>
      
    
    
    
    <category term="XCPC" scheme="https://eykenis.github.io/categories/XCPC/"/>
    
    
  </entry>
  
</feed>
