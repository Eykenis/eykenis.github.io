<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ekke の Space</title>
  <icon>https://www.gravatar.com/avatar/b74e4d6380810c10e04719b2f9079a61</icon>
  
  <link href="https://eykenis.github.io/atom.xml" rel="self"/>
  
  <link href="https://eykenis.github.io/"/>
  <updated>2022-11-07T02:36:54.035Z</updated>
  <id>https://eykenis.github.io/</id>
  
  <author>
    <name>Ekennis</name>
    <email>ekennis@outlook.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ICPC沈阳线上赛游记</title>
    <link href="https://eykenis.github.io/2022/11/06/47thShenyang/"/>
    <id>https://eykenis.github.io/2022/11/06/47thShenyang/</id>
    <published>2022-11-06T14:32:24.000Z</published>
    <updated>2022-11-07T02:36:54.035Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><em>究竟什么样的结局，才配得上这一路的颠沛流离？</em></p><p>​                                                            ——当然不是说我，是说 Deft</p></blockquote><p><img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/image-20221107100047734.png" alt="image-20221107100047734"></p><p>曾经想都不太敢想的成绩，今天（11 月 6 号）居然真的达到了。rank54/733，Ag. 如果 A 能调出来真的有可能 Au. 可惜没有沉住气放弃了（后话）。</p><p>9 点起床，看了两把 DRX vs T1，到 10 点多出去吃饭赶往 108. 坐了一会之后，也没想啥，就这样吧。第三年参加 XCPC 了，虽然第一年只是体验卡，第二年最后几乎没有认真训练光膀子上场，今年总算是认真训练了一次，但是半个多月若干次 vp 都铜了，也就对这次比赛不抱太大希望，当作自己的最后一舞，尽情<del>（随便）</del>玩玩吧。</p><p>发题面时看到 D 题题目名：DRX vs T1. 心想这肯定是几天前随便凑的个签到题。果不其然开了之后队友迅速 A 掉了。<br>然后是 C 题，我也没看，盯着 F 脑子里全是打铁，又想到了去年济南，好像一道过不去的坎。构造，构造，构造。但是对着这个构造题脑子里什么思路都没有。开始在草稿纸上乱画，手工打表，然后开始瞎构造，$n×m$ 的矩阵，先构造 $1×m$ 的，然后想一下能不能由此推出来。构造了一个 $1×m$ 的矩阵 $M$ 之后，先尝试性地把 $M$ 重复画了 $n$ 遍，发现答案竟然没有变化！这一构造的充分性已经有了，于是就考虑必要性。手算了各种 $n$，$m$ 值有没有答案后发现，在有答案的情况下这样构造是一定能出的。<br>现在还不是很有信心，和队友讨论思路后继续想构造方法，发现可以指考虑 pure，连续一段相同的数字内部才会发生 pure，而跨过这些之后就全部是 mixed. 推了一个模型，好像是个背包？发现知道答案存在后跑背包好像没啥用，否决掉，于是想了个没有证明的贪心。<br>光脚不怕穿鞋的，打铁就打铁吧，不怕翻车，反正从来就没有不翻过，直接上去写贪心，然后居然 1A，第 19 个过 F 题，我们的排名一度来到 rk22，当时激动得手都发抖了久久不能平静。</p><p><img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/image-20221107100126217.png" alt="image-20221107100126217"></p><p>队友去讨论 L 后我看了一会 A 和 I ，但有点集中不了注意力 和 zzj 交流 A 作法后觉得这不就是个 sb 题么。看到过题人不多于是等队友写 L 并推一下 A 的细节。<br>开场大概三个小时时终于把 L 调出来了，上机写 A。然而 A 看起来 sb ，实际也特别 sb，细节巨多不着手写根本发现不了。最后爆掉，没有考虑完各种区间覆盖的情况，终究还是码力不足。<br>虽然 C D F L 对我们来说或许足够但 A 题确实近在眼前。或许还是心气不够，没有继续向前的勇气，或者是满足了（确实也已经特别满足了），最后半小时在发现多个细节调爆后还是半放弃了。看了会榜分析会不会掉出银牌区，想了各种最坏的情况，当然都是杞人忧天。滚榜最终 rank 54，甚至是银中上。不过这里本次题目区分度不够是要背锅的（<br>这对我来说或许算是一个好的结果，然而我终究是个不想当将军的士兵，一直都不敢去想更高的目标。本以为今年又破铜烂铁了，没想到开局还挺顺利的，估计会是今年的最高 rank 了（……功利 flag 先）。直到昨天银牌都是我不太有信心的，却没想到居然是离我从来不敢想象的 Au 最近的一次。<br>对我来说，这是“选对赛区少打两年”，而对别人来说，或许是“题很好，区分度优秀，下次不要再出了”吧（笑う</p><p>题外话：写着写着就发现自己的随笔文笔是越来越差越来越只会流水账了hhh</p>]]></content>
    
    
    <summary type="html">人这一生，是不太需要别人建议的。不经历过是不会明白的</summary>
    
    
    
    
    <category term="XCPC" scheme="https://eykenis.github.io/tags/XCPC/"/>
    
  </entry>
  
  <entry>
    <title>AI 火速复习</title>
    <link href="https://eykenis.github.io/2022/10/12/AIFastGlimpse/"/>
    <id>https://eykenis.github.io/2022/10/12/AIFastGlimpse/</id>
    <published>2022-10-12T13:52:08.000Z</published>
    <updated>2022-11-01T02:06:15.736Z</updated>
    
    <content type="html"><![CDATA[<p>你好，这篇博客是为了应试混专业课分数的，这就是初衷。</p><p>教材是 《人工智能——一种现代的方法》，第三版</p><h2 id="第二章-Agent"><a href="#第二章-Agent" class="headerlink" title="第二章 Agent"></a>第二章 Agent</h2><p>Agent 拥有 <strong>感知器</strong> 和 <strong>执行器</strong>，感知器用于感知环境（接受数据），执行器用于反作用环境（反馈，函数返回值）</p><h3 id="简单反射-Agent"><a href="#简单反射-Agent" class="headerlink" title="简单反射 Agent"></a>简单反射 Agent</h3><p>不关注感知历史的 Agent，可以视为函数，接受什么参数就会输出什么值。</p><p><img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/image-20221006215734860.png" alt="image-20221006215734860"></p><h3 id="基于模型的反射-Agent"><a href="#基于模型的反射-Agent" class="headerlink" title="基于模型的反射 Agent"></a>基于模型的反射 Agent</h3><p>内部还有个 State，记录历史状态，然后根据参数有不同行为。可以视为状态机？</p><p><img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/image-20221006215913634.png" alt="image-20221006215913634"></p><h3 id="基于目标的-Agent"><a href="#基于目标的-Agent" class="headerlink" title="基于目标的 Agent"></a>基于目标的 Agent</h3><p>还需要知道 “我的目标做什么”，然后会有不同的行动</p><p>需要结合搜索，规划？</p><p><img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/image-20221006220025965.png" alt="image-20221006220025965"></p><h3 id="基于效用的-Agent"><a href="#基于效用的-Agent" class="headerlink" title="基于效用的 Agent"></a>基于效用的 Agent</h3><p>除了目标以外，还需要考虑达到目标的花销。</p><hr><p>这一章好像没什么内容。</p><h2 id="第三章-无信息搜索"><a href="#第三章-无信息搜索" class="headerlink" title="第三章 无信息搜索"></a>第三章 无信息搜索</h2><h3 id="良定义的问题与其解"><a href="#良定义的问题与其解" class="headerlink" title="良定义的问题与其解"></a>良定义的问题与其解</h3><p>良定义问题可以 <strong>5</strong> 个组成部分形式化描述：</p><ol><li>Agent 初始状态。$In(Arad)$ 返回初始状态。</li><li>Agent 可能行动。${\rm ACTION}(s)$ 返回 $s$ 状态下可以执行的动作集合。</li><li>转移模型，${\rm RESULT}(s,a)$，返回在状态 $s$ 下执行 $a$ 后达到的状态。</li><li>目标测试。测试给定的状态是不是目标状态。</li><li>路径耗散。简单来说就是边权。有时候的算法需要考虑路径耗散的影响。</li></ol><h3 id="宽度优先搜索（BFS）"><a href="#宽度优先搜索（BFS）" class="headerlink" title="宽度优先搜索（BFS）"></a>宽度优先搜索（BFS）</h3><p>实质上就是对节点进行 FIFO.</p><h3 id="一致代价搜索"><a href="#一致代价搜索" class="headerlink" title="一致代价搜索"></a>一致代价搜索</h3><p>每次都往路径耗散最小的路径走过去.</p><p>一致代价搜索可能是不完备的，也不具备最优性</p><h3 id="深度优先搜索（DFS）"><a href="#深度优先搜索（DFS）" class="headerlink" title="深度优先搜索（DFS）"></a>深度优先搜索（DFS）</h3><p>实质上就是对节点进行 FILO.</p><h3 id="深度受限搜索"><a href="#深度受限搜索" class="headerlink" title="深度受限搜索"></a>深度受限搜索</h3><p>在深度优先搜索可能有非常大的搜索深度（甚至无限）时，使用深度受限搜索，达到某个深度值后不再向下而是返回。</p><h3 id="迭代加深深度优先搜索"><a href="#迭代加深深度优先搜索" class="headerlink" title="迭代加深深度优先搜索"></a>迭代加深深度优先搜索</h3><p>首先假设深度限制为 0，然后进行一次深度受限搜索。如果没有答案则设深度限制为 1，再进行一次，以此类推……</p><p>注意只有路径耗散非负的情况下才具有最优性。</p><h2 id="第四章-有信息搜索"><a href="#第四章-有信息搜索" class="headerlink" title="第四章 有信息搜索"></a>第四章 有信息搜索</h2><p>有信息搜索一般可以叫启发式搜索。</p><h3 id="贪心化搜索"><a href="#贪心化搜索" class="headerlink" title="贪心化搜索"></a>贪心化搜索</h3><p>给一个估计函数 $G(x)$，$x$ 为状态，返回该状态下到目标节点的估测路径耗散。然后每次都找一个 $G(x)$ 最小的下一状态。</p><p>这种算法保证最优性的条件：</p><ol><li>可采纳性。它不会过高估计到目标的代价。</li><li>单调性。保证 $cost(n,A)\leq cost(n,n’)+cost(n’,A)$单调性非常重要<del>，丢失的话应当采用动态规划.</del></li></ol><p><del>所以这为什么就能保证了</del></p><h3 id="A-搜索"><a href="#A-搜索" class="headerlink" title="A*搜索"></a>A*搜索</h3><p>结合贪心化搜索，除了 $H(x)$ 表示当前状态到目标状态的估价以外，还有一个 $G(x)$ 表示搜索到该处已经花费的代价。总估价函数为 $F(x)=G(x)+H(x)$. </p><h3 id="爬山法"><a href="#爬山法" class="headerlink" title="爬山法"></a>爬山法</h3><p>和另一个梯度下降法只有求局部最大值与局部最小值的区别。</p><p>每次都用最优邻居替代。这个邻居取步长 $d$（预设）的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">loop do</span><br><span class="line">if neighbor.VALUE &lt;= current.VALUE return current.STATE</span><br><span class="line">current = neighbor</span><br></pre></td></tr></table></figure><h3 id="随机重启"><a href="#随机重启" class="headerlink" title="随机重启"></a>随机重启</h3><p>因为爬山法对于非单峰函数来说几乎没有最优性，不妨多次随机一个初始状态，重启爬山法，以此避免局部最优解。</p><h3 id="模拟退火"><a href="#模拟退火" class="headerlink" title="模拟退火"></a>模拟退火</h3><p>模拟退火的流程图：<br><img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/image-20221010232009520.png" alt="image-20221010232009520"></p><p>通常，$Metropolis$ 准则即：</p><p>计算值 $R=\exp({-\Delta f\over T})$，然后在 $[0,1]$ 内随机一个实数，判断其是否小于 $R$，如果是则接受新解。</p><p>伪代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">while T &gt; minimum_T &#123;</span><br><span class="line">for i from 1 to max_disturb_time &#123;</span><br><span class="line">f = F(state)</span><br><span class="line">disturb(state)</span><br><span class="line">f1 = F(state)</span><br><span class="line">if f1 &lt; f &#123; // 如果 f1 &lt; f 说明 f1 的路径耗散更小，其更优</span><br><span class="line">update(state)</span><br><span class="line">&#125;</span><br><span class="line">else if random(0, 1) &lt; exp((f1 - f) / T) &#123;</span><br><span class="line">update(state)</span><br><span class="line">&#125;</span><br><span class="line">else keep(state)</span><br><span class="line">&#125;</span><br><span class="line">T = T * alpha</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="束搜索"><a href="#束搜索" class="headerlink" title="束搜索"></a>束搜索</h3><p>束搜索实际上就是 bfs 的估算版本。</p><p>局部束：选取 $k$ 个最佳的后继状态，而不是全部后继状态。</p><p>随机束：随机选取 $k$ 个后继状态。</p><h3 id="遗传算法"><a href="#遗传算法" class="headerlink" title="遗传算法"></a>遗传算法</h3><p>产生 $k$ 个初始状态，然后计算每个状态的健康度 $H(x)$。再根据健康度计算它接下来被选取的概率 （健康度更高的概率更大，以此趋于优解），即$P(H(x))$. 然后根据概率加权随机选取两个状态。</p><p>选取后随机选取杂交点杂交，再以一定概率随机变异，产生后代，以此迭代。</p><p><img src="https://data.educoder.net/api/attachments/381576" alt="预览大图"></p><h2 id="第五章-对抗搜索"><a href="#第五章-对抗搜索" class="headerlink" title="第五章 对抗搜索"></a>第五章 对抗搜索</h2><h3 id="极小极大算法"><a href="#极小极大算法" class="headerlink" title="极小极大算法"></a>极小极大算法</h3><p>向下思考 $N$ 步构建决策树（暴力），通过贪心策略从下往上回溯。</p><h3 id="α-β-剪枝"><a href="#α-β-剪枝" class="headerlink" title="α-β 剪枝"></a>α-β 剪枝</h3><p>从下往上考虑时，剪去不可能的位置。例如现在节点 $P$ 执行 $MAX$ 操作，已经得出一个值 $x_1$，则其他所有将得出值 $x\leq x_1$ 的都没有意义了，于是剪去。</p><h3 id="博弈树搜索优化"><a href="#博弈树搜索优化" class="headerlink" title="博弈树搜索优化"></a>博弈树搜索优化</h3><ol><li><p><strong>评估函数</strong>，用以计算当前位置的有效性。</p><p> 评估函数的定义准则：</p><ul><li><p>对于终止状态的排序应该和效用函数一致</p></li><li><p>计算时间不能太长</p></li><li><p>对于非终止状态应该和取胜几率相关</p><p>评估函数只适用于不会出现大摇摆的棋局。（？）</p></li></ul></li><li><p><strong>截断搜索</strong>，进行资源限制，限制递归深度。</p></li><li><strong>前向剪枝</strong>，直接剪去一些子树。</li><li><strong>Probcut</strong>？</li><li><strong>查表</strong>。开局和结尾的可能性有限，可以提前打表并查表。</li></ol><h3 id="随机博弈"><a href="#随机博弈" class="headerlink" title="随机博弈"></a>随机博弈</h3><p>例如飞行棋，西洋陆棋，除了 $MAX,MIN$ 角色的节点以外还要包括随机节点。随机节点的连接给出一个概率权值，计算贡献时求加权期望即可。</p><h3 id="部分可观察博弈"><a href="#部分可观察博弈" class="headerlink" title="部分可观察博弈"></a>部分可观察博弈</h3><p>信念状态，随机部分可观察，概率推算</p><p>…</p><h2 id="第六章-约束满足问题-（CSP）"><a href="#第六章-约束满足问题-（CSP）" class="headerlink" title="第六章 约束满足问题 （CSP）"></a>第六章 约束满足问题 （CSP）</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>状态空间：为一系列变量和其赋值的笛卡尔积。</p><p>目标测试：是否赋值完成，是否满足约束条件。</p><p>例如，求一个具有某种性质的排列、染色问题。</p><p>CSP 问题的三个部分：</p><p>变量、值域、约束集合。</p><h3 id="回溯搜索求解-CSP"><a href="#回溯搜索求解-CSP" class="headerlink" title="回溯搜索求解 CSP"></a>回溯搜索求解 CSP</h3><p>需要规定赋值顺序（决定值域顺序也是好的）。要提高效率，可以：</p><ul><li>根据条件在更浅的节点就判断是否合法，提前回溯</li><li>最少约束值：选择使剩余变量赋值空间更大的值更可能达到合法结果</li><li>约束最多变量：优先选择最能约束其他变量的变量（参与的非全局约束最多）</li><li>最受约束变量：选择剩余可赋值最少的变量赋值。</li><li>前向检验：提前向未赋值变量传递约束信息</li><li>智能回溯：建立冲突集合。</li></ul><h2 id="第七章-逻辑-Agent"><a href="#第七章-逻辑-Agent" class="headerlink" title="第七章 逻辑 Agent"></a>第七章 逻辑 Agent</h2><h3 id="语法、语义中一些没见过的表达式和名词"><a href="#语法、语义中一些没见过的表达式和名词" class="headerlink" title="语法、语义中一些没见过的表达式和名词"></a>语法、语义中一些没见过的表达式和名词</h3><script type="math/tex; mode=display">{M(\alpha)}</script><p>$\alpha$ 的所有模型. 可以认为就是实例全集.</p><p><strong>模型检验</strong>：枚举所有可能模型来检验断言 $\alpha$ 是否为真.</p><script type="math/tex; mode=display">\alpha|=\beta</script><p>表示 $\alpha$ 蕴含 $\beta$，即 $\alpha \Rarr \beta$. </p><p><strong>有效</strong>：一个语句在考虑的模型集合中恒为真.</p><p><strong>可满足</strong>：一个语句在考虑的模型集合中存在其为真的模型.</p><p><strong>不可满足</strong>：在给定的模型集合中恒为假.</p><h3 id="知识库"><a href="#知识库" class="headerlink" title="知识库"></a>知识库</h3><p>首先，需要构建一些命题词，例如 Wumpus 游戏中的：</p><p><img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/image-20221013182833307.png" alt="image-20221013182833307"></p><h3 id="定理证明"><a href="#定理证明" class="headerlink" title="定理证明"></a>定理证明</h3><h4 id="真值表枚举（模型检验）"><a href="#真值表枚举（模型检验）" class="headerlink" title="真值表枚举（模型检验）"></a>真值表枚举（模型检验）</h4><p>时间复杂度 $O(2^n)$.</p><h4 id="逻辑等价"><a href="#逻辑等价" class="headerlink" title="逻辑等价"></a>逻辑等价</h4><p>如果两个语句 $\alpha,\beta$ 在同一个模型中同真同假，可以认为 $\alpha \equiv \beta$. 这也意味着它们互相蕴含。</p><h4 id="推导和证明"><a href="#推导和证明" class="headerlink" title="推导和证明"></a>推导和证明</h4><script type="math/tex; mode=display">\alpha \Rarr \beta,\ \alpha \over \beta</script><p>表示只要有 $\alpha \Rarr \beta$ 和 $\alpha$ 同时成立，就能推出 $\beta$，而无关 $\alpha$ 与 $\beta$ 的形式。</p><h4 id="归结推理"><a href="#归结推理" class="headerlink" title="归结推理"></a>归结推理</h4><h2 id="第八章-一阶逻辑"><a href="#第八章-一阶逻辑" class="headerlink" title="第八章 一阶逻辑"></a>第八章 一阶逻辑</h2><p>和命题逻辑没啥区别，主要还是记<img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/image-20221021233333536.png" alt="image-20221021233333536">这个式子。</p><h3 id="前向链接算法"><a href="#前向链接算法" class="headerlink" title="前向链接算法"></a>前向链接算法</h3><p>从原子语句出发，应用假言推理增加新的原子语句，直到不可再推理。</p><blockquote><p>优化方法：</p><p>增量前向链接：每个第t次迭代推理出来的新事实应该由至少一个第t-1次迭代中推理出来的新事实导出。因此，在第t次迭代时，只检查那些规则前提包含了能与第t-1次迭代新推理出的事实进行合一的合取子句</p><p>不相关事实：产生许多与目标毫无关系的事实（用反向链接算法解决）</p></blockquote><h3 id="反向链接"><a href="#反向链接" class="headerlink" title="反向链接"></a>反向链接</h3><p> 通过一个推理出的原子语句反向推出其成立需要满足的条件。</p><h2 id="第十章-不确定性量化"><a href="#第十章-不确定性量化" class="headerlink" title="第十章 不确定性量化"></a>第十章 不确定性量化</h2><p>逻辑理论无法处理不确定性问题，因为</p><ul><li><p>惰性（确保规则完全严格的计算量巨大）</p></li><li><p>理论的无知（缺乏理论支撑）</p></li><li><p>实践的无知（所有必要的测试并没有全部完成，甚至存在无法进行的测试）</p></li></ul><h3 id="概率理论下的-Agent-约束"><a href="#概率理论下的-Agent-约束" class="headerlink" title="概率理论下的 Agent 约束"></a>概率理论下的 Agent 约束</h3><p>本体约束：和逻辑 Agent一致，由成立与不成立的事实。</p><p>认识约束：逻辑 Agent 只认为语句为正确和错误，而概率 Agent 会有一个 $[0,1]$ 间的实数作为信念度。信念度也可以认为是其为真的概率。</p><p>概率 Agent 的决策理论：总是使期望效用最大化。</p><p><strong>完全联合分布：</strong>对应真值表，即取各个值的概率。</p><p><strong>先验概率</strong>：不需要条件的概率</p><p><strong>后验概率</strong>：条件概率</p><p>记一下条件概率公式。</p><h2 id="第十一章-贝叶斯网络"><a href="#第十一章-贝叶斯网络" class="headerlink" title="第十一章 贝叶斯网络"></a>第十一章 贝叶斯网络</h2><p>书上说，贝叶斯网络是一种数据结构。可以表示任何完全联合概率分布。</p><p>特征：</p><ol><li>是个有向图。</li><li>每个节点对应一个随机变量。</li><li>每个节点有一个条件概率分布，量化父节点对该节点的影响。</li></ol><p>啥意思呢？</p><p><img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/image-20221022134015441.png" alt="image-20221022134015441"></p><p>如图，列父节点的真值表，对应子节点的各个概率。总之每个节点给出变量的同时还要给出其分布。</p><h3 id="枚举精确推理"><a href="#枚举精确推理" class="headerlink" title="枚举精确推理"></a>枚举精确推理</h3><p>枚举出所有可能，计算每个可能的概率，加和得到事件概率</p><h3 id="近似推理"><a href="#近似推理" class="headerlink" title="近似推理"></a>近似推理</h3><ul><li><p>直接采样法</p><p>  根据已知概率分布生成样本，采样得到事件的近似概率。</p></li><li><p>拒绝采样法</p><p>  用法：用于计算比较难得到的条件概率。用一种易于采样的分布，为一个难以采样的分布生成采样样本。</p><p>  做法：根据先验分布生成样本，拒绝掉所有与证据不匹配的样本</p><p>  缺点：拒绝太多样本</p></li><li><p>似然加权法</p><p>  固定证据变量的值，然后只对非证据变量采样。</p></li><li><p>Gibbs 采样法</p></li></ul>]]></content>
    
    
    <summary type="html">因为老师上的课没法听花点时间集中突击一下</summary>
    
    
    
    
    <category term="问道" scheme="https://eykenis.github.io/tags/%E9%97%AE%E9%81%93/"/>
    
  </entry>
  
  <entry>
    <title>Div 1 题解</title>
    <link href="https://eykenis.github.io/2022/08/25/codeforces-div-1s/"/>
    <id>https://eykenis.github.io/2022/08/25/codeforces-div-1s/</id>
    <published>2022-08-25T11:02:07.000Z</published>
    <updated>2022-09-16T02:56:55.198Z</updated>
    
    <content type="html"><![CDATA[<p>很不幸，我违反了之前自己定下的 “不再在此博客更新 XCPC 相关” 的约定，但是感觉想要记录点什么，纸上总感觉差了点什么，不仔细记录又感觉自己每次写题解会敷衍了事，所以在这里开一个吧。</p><p>退役之后我会将该博文删除。</p><p>第一要务是收心，不要去在意杂事，不担心以后，最后几个月专心做竞赛，不留下遗憾。</p><h1 id="8-25-8-26-Codeforces-Round-767-Div-1"><a href="#8-25-8-26-Codeforces-Round-767-Div-1" class="headerlink" title="8.25~8.26 Codeforces Round #767 (Div. 1)"></a>8.25~8.26 Codeforces Round #767 (Div. 1)</h1><h2 id="1628A-Meximum-Array"><a href="#1628A-Meximum-Array" class="headerlink" title="1628A Meximum Array"></a>1628A Meximum Array</h2><p>对每个位置分别选。要使得字典序最大，那么第一要务是保证当前选的 $MEX$ 尽可能大。然后，相同值之中，我们选最左的那个，以此来保证在选取 $MEX$ 相同的条件下，整个 $b$ 的长度尽可能长。</p><p>于是我们可以用一个队列按顺序存各个数出现的位置，模拟一下保证这两个条件。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson k &lt;&lt; 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson k &lt;&lt; 1 | 1</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> t = <span class="number">1</span>;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        map&lt;<span class="keyword">int</span>, queue&lt;<span class="keyword">int</span>&gt;&gt; pos;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            cin &gt;&gt; a[i];</span><br><span class="line">            pos[a[i]].<span class="built_in">push</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; b;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> st = i;</span><br><span class="line">            <span class="keyword">int</span> mex = <span class="number">-1</span>;</span><br><span class="line">            <span class="comment">// 寻找 mex+1,直到没有.</span></span><br><span class="line">            <span class="keyword">while</span> (!pos[mex + <span class="number">1</span>].<span class="built_in">empty</span>()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (pos[mex + <span class="number">1</span>].<span class="built_in">front</span>() &lt; st) &#123;</span><br><span class="line">                    pos[mex + <span class="number">1</span>].<span class="built_in">pop</span>();</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (pos[mex + <span class="number">1</span>].<span class="built_in">front</span>() &lt;= i) &#123;</span><br><span class="line">                    <span class="keyword">while</span> (!pos[mex + <span class="number">1</span>].<span class="built_in">empty</span>() &amp;&amp; pos[mex + <span class="number">1</span>].<span class="built_in">front</span>() &lt;= i) &#123;</span><br><span class="line">                        pos[mex + <span class="number">1</span>].<span class="built_in">pop</span>();</span><br><span class="line">                    &#125;</span><br><span class="line">                    mex++;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                i = pos[mex + <span class="number">1</span>].<span class="built_in">front</span>();</span><br><span class="line">                pos[mex + <span class="number">1</span>].<span class="built_in">pop</span>();</span><br><span class="line">                mex++;</span><br><span class="line">            &#125;</span><br><span class="line">            b.<span class="built_in">push_back</span>(mex + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; b.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; b.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            cout &lt;&lt; b[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1628B-Peculiar-Movie-Preferences"><a href="#1628B-Peculiar-Movie-Preferences" class="headerlink" title="1628B Peculiar Movie Preferences"></a>1628B Peculiar Movie Preferences</h2><p>水题，每个字符串的长度都小于等于 3，首先单一个字符串自己组成回文的情况先处理掉，然后剩下的情况字符串数量都 $\geq2$.</p><p>假设我们能够造出一个使用的字符串数量为 $x\geq2$ 的回文串，那么最左边和最右边是一定可以构造成一个回文串的。如果最左边最右边长度相等，那么他们拼起来肯定是回文；如果长度不等，一个是 2，一个是 3，那么最前面两个和最后面两个肯定也相等，总长度 5，还是可以构成回文。</p><p>所以只需要对每个串看前面存不存在与他构成回文的串就行啦，字符串哈希或者 <code>map</code> 即可过。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson k &lt;&lt; 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson k &lt;&lt; 1 | 1</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> t = <span class="number">1</span>;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="comment">// 17576 - 780.</span></span><br><span class="line">        <span class="comment">// 规模最多为 2？？？</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        map&lt;string, <span class="keyword">int</span>&gt; mp;</span><br><span class="line">        map&lt;string, <span class="keyword">int</span>&gt; mp32;</span><br><span class="line">        <span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            string s;</span><br><span class="line">            cin &gt;&gt; s;</span><br><span class="line">            <span class="keyword">if</span> (flag) <span class="keyword">continue</span>;</span><br><span class="line">            mp[s]++;</span><br><span class="line">            <span class="keyword">if</span> (s.<span class="built_in">size</span>() == <span class="number">1</span>) &#123;</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (s.<span class="built_in">size</span>() == <span class="number">2</span> &amp;&amp; s[<span class="number">0</span>] == s[<span class="number">1</span>]) &#123;</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (s.<span class="built_in">size</span>() == <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="built_in">reverse</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>());</span><br><span class="line">                <span class="keyword">if</span> (mp.<span class="built_in">count</span>(s) || mp32.<span class="built_in">count</span>(s)) &#123;</span><br><span class="line">                    flag = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (s.<span class="built_in">size</span>() == <span class="number">3</span>) &#123;</span><br><span class="line">                string tmp;</span><br><span class="line">                tmp += s[<span class="number">1</span>];</span><br><span class="line">                tmp += s[<span class="number">2</span>];</span><br><span class="line">                <span class="built_in">reverse</span>(tmp.<span class="built_in">begin</span>(), tmp.<span class="built_in">end</span>());</span><br><span class="line">                <span class="keyword">if</span> (mp.<span class="built_in">count</span>(tmp)) &#123;</span><br><span class="line">                    flag = <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                tmp.<span class="built_in">clear</span>(); tmp += s[<span class="number">0</span>], tmp += s[<span class="number">1</span>];</span><br><span class="line">                mp32[tmp]++;</span><br><span class="line">                <span class="built_in">reverse</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>());</span><br><span class="line">                <span class="keyword">if</span> (mp.<span class="built_in">count</span>(s)) &#123;</span><br><span class="line">                    flag = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; (flag ? <span class="string">&quot;YES&quot;</span> : <span class="string">&quot;NO&quot;</span>) &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1628C-Grid-Xor"><a href="#1628C-Grid-Xor" class="headerlink" title="1628C Grid Xor"></a>1628C Grid Xor</h2><p>纯构造题…尝试了构造各个位置异或次数为奇数的方法，和不同的组合来容斥求答案的思路，越弄越复杂，但是其实很简单就能够造出每个位置被异或一次的方法……</p><p>按各个位置的奇偶性分别去手画几下即可（国际象棋棋盘染色），奇偶性不同的位置是互不影响的。具体可以参考洛谷上的题解。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson k &lt;&lt; 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson k &lt;&lt; 1 | 1</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1005</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> f1[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> f2[maxn][maxn];</span><br><span class="line"><span class="keyword">bool</span> v[maxn][maxn];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> t = <span class="number">1</span>;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">1000</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">1000</span>; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((i + j) &amp; <span class="number">1</span>) &#123;</span><br><span class="line">                f1[i][j] = <span class="number">1</span>, f2[i][j] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> f2[i][j] = <span class="number">1</span>, f1[i][j] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">                cin &gt;&gt; a[i][j];</span><br><span class="line">                v[i][j] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!f1[i][j]) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span> (i &gt; <span class="number">1</span> &amp;&amp; v[i - <span class="number">1</span>][j]) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span> (j &gt; <span class="number">1</span> &amp;&amp; v[i][j - <span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span> (i &lt; n &amp;&amp; v[i + <span class="number">1</span>][j]) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span> (j &lt; n &amp;&amp; v[i][j + <span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">                v[i - <span class="number">1</span>][j] = v[i][j - <span class="number">1</span>] = v[i + <span class="number">1</span>][j] = v[i][j + <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">                ans ^= a[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!f2[i][j]) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span> (i &gt; <span class="number">1</span> &amp;&amp; v[i - <span class="number">1</span>][j]) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span> (j &gt; <span class="number">1</span> &amp;&amp; v[i][j - <span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span> (i &lt; n &amp;&amp; v[i + <span class="number">1</span>][j]) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span> (j &lt; n &amp;&amp; v[i][j + <span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">                v[i - <span class="number">1</span>][j] = v[i][j - <span class="number">1</span>] = v[i + <span class="number">1</span>][j] = v[i][j + <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">                ans ^= a[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1628D1-Game-on-Sum-Easy-Version"><a href="#1628D1-Game-on-Sum-Easy-Version" class="headerlink" title="1628D1 Game on Sum (Easy Version)"></a>1628D1 Game on Sum (Easy Version)</h2><p>由 $2000$ 数据范围很容易想到需要构造一个 $dp$ 状态。设 $dp_{i,j}$ 表示已经选择了 $i$ 个数字，其中 $j$ 次相加的答案。</p><p>但因为存在二元博弈，这个 $dp$ 既不是最大值也不是最小值。考虑单独的每一步：<br>如果 Alice 给的数较大，那么 Bob 将会选择减。但若 Alice 给的数小，那么 Bob 在次数还没加够时可以选择加。因为 Bob 是在 Alice 给数之后选的，他会将答案最小化。</p><p>所以有</p><script type="math/tex; mode=display">dp_{i,j}=\min\{dp_{i-1,j}-x,dp_{i-1,j-1}+x \}</script><p>那么 Alice 现在可以决定 $x$，她会使得答案尽可能大。在和不变的条件下让二者最小值最大，因为显然有 $dp_{i-1,j}\geq dp_{i-1,j-1}$，且差值一定不大于 $k$，所以我们可以选择一个值使得 $dp_{i-1,j}-x=dp_{i-1,j-1}+x=avr$，这样就是最优的选择。</p><p>所以转移方程为</p><script type="math/tex; mode=display">dp_{i,j}=\frac{dp_{i-1,j}+dp_{i-1,j-1}}{2}</script><p>但要注意有个边界条件是不同的，即 $i=j$ 时，因为 Bob 只能选择加，所以 Alice 会最大化答案为 $ik$.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson k &lt;&lt; 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson k &lt;&lt; 1 | 1</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> dp[maxn][maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fpow</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (k) &#123;</span><br><span class="line">        <span class="keyword">if</span> (k &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            ans = (ans * x) % mod;</span><br><span class="line">        &#125;</span><br><span class="line">        x = (x * x) % mod;</span><br><span class="line">        k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">inv</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">fpow</span>(x, mod - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> t = <span class="number">1</span>;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">int</span> i2 = <span class="built_in">inv</span>(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n, m, k;</span><br><span class="line">        cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            dp[i][i] = i * k % mod;</span><br><span class="line">        &#125;</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == j) <span class="keyword">continue</span>;</span><br><span class="line">                dp[i][j] = ((dp[i - <span class="number">1</span>][j] + dp[i - <span class="number">1</span>][j - <span class="number">1</span>]) * i2) % mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; dp[n][m] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1628D2-Game-on-Sum-Hard-Version"><a href="#1628D2-Game-on-Sum-Hard-Version" class="headerlink" title="1628D2 Game on Sum (Hard Version)"></a>1628D2 Game on Sum (Hard Version)</h2><p>范围扩大，由 D1 解法可知答案只与 $k$ 有关，故我们应该时可以找到一个公式的。</p><p>考虑各个 $dp$ 值对 $dp_{n,m}$ 的贡献，每个 $dp$ 值理应包括：</p><p>若干个 $dp_{1,1}$ 及其 $\frac{1}{2^x}$ 倍，若干个 $dp_{2,2}$ 及其 $\frac{1}{2^x}$ 倍……所有的 $dp$ 值都可以只通过 $dp_{i,i}$ 的贡献推出来。</p><p>那么 $dp_{i,i}$ 对 $dp_{n,m}$ 的贡献，每个来自 $dp_{i,i}$ 的分贡献一定是走的不同的路径，从 $dp_{i,i}$ 走到 $dp_{n,m}$，路径不同，长度相同，所以最后的分贡献值都一样。这是经典的走楼梯组合问题，走法为 $C_{n-i-1}^{m-i}$，每次都贡献了 $\frac{dp_{i,i}}{2^{n-i}}$. 全部求和即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson k &lt;&lt; 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson k &lt;&lt; 1 | 1</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> f[maxn];</span><br><span class="line"><span class="keyword">int</span> pi[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fpow</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (k) &#123;</span><br><span class="line">        <span class="keyword">if</span> (k &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            ans = (ans * x) % mod;</span><br><span class="line">        &#125;</span><br><span class="line">        x = (x * x) % mod;</span><br><span class="line">        k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">inv</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">fpow</span>(x, mod - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pre</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    pi[<span class="number">0</span>] = pi[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        pi[i] = (pi[i - <span class="number">1</span>] * i) % mod;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">C</span><span class="params">(<span class="keyword">int</span> n ,<span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ((pi[n] * <span class="built_in">inv</span>(pi[m]) % mod) * <span class="built_in">inv</span>(pi[n - m])) % mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">pre</span>(maxn - <span class="number">5</span>);</span><br><span class="line">    <span class="keyword">int</span> t = <span class="number">1</span>;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n, m, k;</span><br><span class="line">        cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line">        <span class="keyword">if</span> (m == <span class="number">1</span>) &#123;</span><br><span class="line">            cout &lt;&lt; (<span class="built_in">inv</span>(<span class="built_in">fpow</span>(<span class="number">2</span>, n - <span class="number">1</span>)) * k) % mod &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (n == m) &#123;</span><br><span class="line">            cout &lt;&lt; m * k % mod &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (m == <span class="number">0</span>) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="number">0</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> x = <span class="built_in">C</span>(n - i - <span class="number">1</span>, m - i);</span><br><span class="line">            <span class="keyword">int</span> y = <span class="built_in">fpow</span>(<span class="built_in">inv</span>(<span class="number">2</span>), n - i);</span><br><span class="line">            ans = (ans + (i * ((x * y) % mod)) % mod) % mod;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; ans * k % mod &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="8-27-8-28-吉林省赛复现"><a href="#8-27-8-28-吉林省赛复现" class="headerlink" title="8.27~8.28 吉林省赛复现"></a>8.27~8.28 吉林省赛复现</h1><p>四天三个训练赛，多补补题吧。</p><h2 id="The-15th-Jilin-Provincial-Collegiate-Programming-Contest-I-Nim-Game"><a href="#The-15th-Jilin-Provincial-Collegiate-Programming-Contest-I-Nim-Game" class="headerlink" title="The 15th Jilin Provincial Collegiate Programming Contest I. Nim Game"></a>The 15th Jilin Provincial Collegiate Programming Contest I. Nim Game</h2><p>复习 Nim 博弈，其条件是集合各数异或和为 0 即必败，否则必胜。</p><p>那么嘉然小姐想要赢，必定是集合中存在一个子集，其异或和为 0.</p><p>我们可以用线性基来判断。每次将一个数加入线性基，如果加入时更新了 $a_0$，说明现在有异或和为 0 且非空的子集了。又因为位数不会超过 $32$，所以当至少有 $32$ 个数时，线性基一定会更新到 $a_0$，一定存在一个异或和为 0 的子集，不用判断。小于 $32$ 的暴力判断即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson k &lt;&lt; 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson k &lt;&lt; 1 | 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(3)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r, sum, tag;</span><br><span class="line">&#125;a[maxn &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> num[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    a[k].sum = a[lson].sum + a[rson].sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    a[k].l = l, a[k].r = r;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        a[k].l = l, a[k].r = r;</span><br><span class="line">        a[k].sum = num[l];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(lson, l, mid);</span><br><span class="line">    <span class="built_in">build</span>(rson, mid + <span class="number">1</span>, r);</span><br><span class="line">    <span class="built_in">pushup</span>(k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!a[k].tag) <span class="keyword">return</span>;</span><br><span class="line">    a[lson].sum += a[k].tag * (a[lson].r - a[lson].l + <span class="number">1</span>);</span><br><span class="line">    a[lson].tag += a[k].tag;</span><br><span class="line">    a[rson].sum += a[k].tag * (a[rson].r - a[rson].l + <span class="number">1</span>);</span><br><span class="line">    a[rson].tag += a[k].tag;</span><br><span class="line">    a[k].tag = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a[k].l &gt; r || a[k].r &lt; l) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (a[k].l &gt;= l &amp;&amp; a[k].r &lt;= r) &#123;</span><br><span class="line">        a[k].sum += x * (a[k].r - a[k].l + <span class="number">1</span>);</span><br><span class="line">        a[k].tag += x;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pushdown</span>(k);</span><br><span class="line">    <span class="built_in">add</span>(lson, l, r, x);</span><br><span class="line">    <span class="built_in">add</span>(rson, l, r, x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> b[<span class="number">33</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">32</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!(x &amp; (<span class="number">1</span> &lt;&lt; i))) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (!b[i]) &#123;</span><br><span class="line">            b[i] = x;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        x ^= b[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a[k].l &gt; x || a[k].r &lt; x) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (a[k].l == a[k].r &amp;&amp; a[k].l == x) <span class="keyword">return</span> a[k].sum;</span><br><span class="line">    <span class="built_in">pushdown</span>(k);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">query</span>(lson, x) + <span class="built_in">query</span>(rson, x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) cin &gt;&gt; num[i];</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> op, l, r, x;</span><br><span class="line">        cin &gt;&gt; op &gt;&gt; l &gt;&gt; r;</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">1</span>) &#123;</span><br><span class="line">            cin &gt;&gt; x;</span><br><span class="line">            <span class="built_in">add</span>(<span class="number">1</span>, l, r, x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (r - l + <span class="number">1</span> &gt;= <span class="number">33</span>) &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;Yes&quot;</span> &lt;&lt; endl;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">bool</span> flag = <span class="number">1</span>;</span><br><span class="line">                <span class="built_in">memset</span>(b, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(b));</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= r; ++i) &#123;</span><br><span class="line">                    <span class="keyword">int</span> y = <span class="built_in">query</span>(<span class="number">1</span>, i);</span><br><span class="line">                    y = <span class="built_in">insert</span>(y);</span><br><span class="line">                    <span class="keyword">if</span> (!y) &#123;</span><br><span class="line">                        flag = <span class="number">0</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                cout &lt;&lt; (flag ? <span class="string">&quot;No&quot;</span> : <span class="string">&quot;Yes&quot;</span>) &lt;&lt; endl;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="8-29-8-30-Educational-Codeforces-Round-134"><a href="#8-29-8-30-Educational-Codeforces-Round-134" class="headerlink" title="8.29~8.30 Educational Codeforces Round 134"></a>8.29~8.30 Educational Codeforces Round 134</h1><h2 id="1721D-Maximum-AND"><a href="#1721D-Maximum-AND" class="headerlink" title="1721D Maximum AND"></a>1721D Maximum AND</h2><p>贪心，优先保证高位能异或为 1.</p><p>为了 $a,b$ 异或为1，我们将 $a,b$ 分组。假设现在考虑到了第 $i$ 位，那么 $a$ 中第 $i$ 位为 1 的和 $b$ 中第 $i$ 位为 0 的分一组，反之亦然。如果分完组后，$a_i=1$ 和 $b_i=0$ 的数个数是相同的，说明这个分组是有效的，不会出现多余的数，于是我们分组继续下去就可以。如果出现了分不齐的情况，就说明在保证某几个高位能够达到 $1$ 的条件下，我们是无法保证这一位为 1 的，所以不进行分组，直接判断下一位。</p><p>（场上没有注意将大小为 0 的分组剔除，导致 vector 爆了，还不知道错在哪）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">int</span> xx;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pvv</span> &#123;</span></span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; a, b;</span><br><span class="line">&#125;;</span><br><span class="line">vector&lt;pvv&gt; v, tmp;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        xx = <span class="number">0x7fffffff</span>;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; a, b;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> x;</span><br><span class="line">            cin &gt;&gt; x;</span><br><span class="line">            a.<span class="built_in">push_back</span>(x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> x;</span><br><span class="line">            cin &gt;&gt; x;</span><br><span class="line">            b.<span class="built_in">push_back</span>(x);</span><br><span class="line">        &#125;</span><br><span class="line">        v.<span class="built_in">push_back</span>(&#123;a, b&#125;);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">30</span>; j &gt;= <span class="number">0</span>; --j) &#123;</span><br><span class="line">            tmp.<span class="built_in">clear</span>();</span><br><span class="line">            <span class="keyword">bool</span> flag = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">                pvv a0b1, a1b0;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; v[i].a.<span class="built_in">size</span>(); ++k) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (v[i].a[k] &amp; (<span class="number">1</span> &lt;&lt; j)) a1b0.a.<span class="built_in">push_back</span>(v[i].a[k]);</span><br><span class="line">                    <span class="keyword">else</span> a0b1.a.<span class="built_in">push_back</span>(v[i].a[k]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; v[i].b.<span class="built_in">size</span>(); ++k) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (v[i].b[k] &amp; (<span class="number">1</span> &lt;&lt; j)) a0b1.b.<span class="built_in">push_back</span>(v[i].b[k]);</span><br><span class="line">                    <span class="keyword">else</span> a1b0.b.<span class="built_in">push_back</span>(v[i].b[k]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (a0b1.a.<span class="built_in">size</span>() == a0b1.b.<span class="built_in">size</span>()) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!a0b1.a.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">                        tmp.<span class="built_in">push_back</span>(a0b1);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (!a1b0.a.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">                        tmp.<span class="built_in">push_back</span>(a1b0);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    xx -= (<span class="number">1</span> &lt;&lt; j);</span><br><span class="line">                    flag = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (flag)</span><br><span class="line">                v = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; xx &lt;&lt; endl;</span><br><span class="line">        v.<span class="built_in">clear</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="8-31-9-1-Codeforces-Round-698-Div-1"><a href="#8-31-9-1-Codeforces-Round-698-Div-1" class="headerlink" title="8.31~9.1 Codeforces Round #698 (Div. 1)"></a>8.31~9.1 Codeforces Round #698 (Div. 1)</h1><h2 id="A-Nezzar-and-Board"><a href="#A-Nezzar-and-Board" class="headerlink" title="A. Nezzar and Board"></a>A. Nezzar and Board</h2><p>把所有的数放在数轴上，可以发现任取两个数，通过不断地往集合中加 $2x-y$，最后得到的数的间隔不会大于 $|x-y|$.</p><p>所以通过这两个数能构造出所有以 $x$ 或者 $y$ 为某项，公差为 $\gcd(x,y)$ 的等差数列。</p><p>扩展到所有元素可知，所有元素构造出来的应该是以某个 $a_i$ 为首项，公差为 $\gcd(a_1,a_2,…,a_n)$ 的等差数列。</p><p>先求出 $g=\gcd(a_1,a_2,…,a_n)$，然后枚举各个 $a_i$，看是否 $(k-a_i)\%g=0$.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">// #pragma GCC optimize(3)</span></span><br><span class="line"><span class="comment">// #define endl &#x27;\n&#x27;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson k &lt;&lt; 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson k &lt;&lt; 1 | 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="comment">// k = 2x - y</span></span><br><span class="line">        <span class="comment">// 2(x1a1 + x2a2 + ... + xnan) - (y1a1 + y2a2 + ...)</span></span><br><span class="line">        <span class="comment">// = (2x1 - y1)a1 + (2x2 - y2)a2 + ...</span></span><br><span class="line">        <span class="comment">// x + d = k --&gt; d = m * |x - y|.</span></span><br><span class="line">        <span class="comment">// k - x = d = m * |x - y|</span></span><br><span class="line">        <span class="comment">// (k - x) % |x - y| = 0</span></span><br><span class="line">        <span class="comment">// x, y 从集合中任取。</span></span><br><span class="line">        <span class="comment">// 存在整数列使得 k - ax = x1(a1 - a2) + x2(a2 - a3) + ... + x_&#123;n-1&#125;(a_&#123;n-1&#125; - an)</span></span><br><span class="line">        <span class="comment">// xi \in integer</span></span><br><span class="line">        <span class="comment">// 存在互质的数时一定yes... --&gt; gcd = 1</span></span><br><span class="line">        <span class="keyword">int</span> n, k;</span><br><span class="line">        cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            cin &gt;&gt; a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> g = a[<span class="number">2</span>] - a[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            g = __gcd(a[i] - a[i - <span class="number">1</span>], g);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((k - a[i]) % g == <span class="number">0</span>) &#123;</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; (flag ? <span class="string">&quot;YES&quot;</span> : <span class="string">&quot;NO&quot;</span>) &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Nezzar-and-Binary-String"><a href="#B-Nezzar-and-Binary-String" class="headerlink" title="B. Nezzar and Binary String"></a>B. Nezzar and Binary String</h2><p>意外的简单题，但是卡壳了一会。</p><p>只要逆向考虑就能发现，因为每次操作都是要求 <strong>strictly less</strong> than half of the characters，所以其实倒过来的修改是固定，没有选择的。一开始没注意严格更少，还想了一会二者相等的情况。。</p><p>所以逆向考虑，操作用线段树维护即可，遇到数量相等的情况直接 <code>break</code> 输出 $NO$，最后 $n\log n$ 判断一下最终得到的字符串，再比较一下。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">// #pragma GCC optimize(3)</span></span><br><span class="line"><span class="comment">// #define endl &#x27;\n&#x27;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson k &lt;&lt; 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson k &lt;&lt; 1 | 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> ql[maxn], qr[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r;</span><br><span class="line">    <span class="keyword">int</span> cnt0, cnt1;</span><br><span class="line">    <span class="keyword">int</span> tag;</span><br><span class="line">&#125;a[maxn &lt;&lt; <span class="number">2</span>];</span><br><span class="line">string s, f;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    a[k].cnt0 = a[lson].cnt0 +a[rson].cnt0;</span><br><span class="line">    a[k].cnt1 = a[lson].cnt1 + a[rson].cnt1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    a[k].l = l, a[k].r = r;</span><br><span class="line">    a[k].tag = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        <span class="keyword">if</span> (f[l] == <span class="string">&#x27;0&#x27;</span>) a[k].cnt0 = <span class="number">1</span>, a[k].cnt1 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> a[k].cnt1 = <span class="number">1</span>, a[k].cnt0 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(lson, l, mid);</span><br><span class="line">    <span class="built_in">build</span>(rson, mid + <span class="number">1</span>, r);</span><br><span class="line">    <span class="built_in">pushup</span>(k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a[k].tag == <span class="number">-1</span>) <span class="keyword">return</span>;</span><br><span class="line">    a[lson].cnt0 = (a[lson].r - a[lson].l + <span class="number">1</span>) * (!a[k].tag);</span><br><span class="line">    a[rson].cnt0 = (a[rson].r - a[rson].l + <span class="number">1</span>) * (!a[k].tag);</span><br><span class="line">    a[lson].cnt1 = (a[lson].r - a[lson].l + <span class="number">1</span>) * a[k].tag;</span><br><span class="line">    a[rson].cnt1 = (a[rson].r - a[rson].l + <span class="number">1</span>) * a[k].tag;</span><br><span class="line">    a[lson].tag = a[rson].tag = a[k].tag;</span><br><span class="line">    a[k].tag = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a[k].l &gt; r || a[k].r &lt; l) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (a[k].l &gt;= l &amp;&amp; a[k].r &lt;= r) &#123;</span><br><span class="line">        <span class="keyword">if</span> (x) &#123;</span><br><span class="line">            a[k].tag = <span class="number">1</span>;</span><br><span class="line">            a[k].cnt1 = a[k].r - a[k].l + <span class="number">1</span>;</span><br><span class="line">            a[k].cnt0 = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            a[k].tag = <span class="number">0</span>;</span><br><span class="line">            a[k].cnt0 = a[k].r - a[k].l + <span class="number">1</span>;</span><br><span class="line">            a[k].cnt1 = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pushdown</span>(k);</span><br><span class="line">    <span class="built_in">change</span>(lson, l, r, x);</span><br><span class="line">    <span class="built_in">change</span>(rson, l, r, x);</span><br><span class="line">    <span class="built_in">pushup</span>(k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query0</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a[k].l  &gt; r || a[k].r &lt; l) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (a[k].l &gt;= l &amp;&amp; a[k].r &lt;= r) <span class="keyword">return</span> a[k].cnt0;</span><br><span class="line">    <span class="built_in">pushdown</span>(k);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">query0</span>(lson, l, r) + <span class="built_in">query0</span>(rson, l, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query1</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a[k].l  &gt; r || a[k].r &lt; l) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (a[k].l &gt;= l &amp;&amp; a[k].r &lt;= r) <span class="keyword">return</span> a[k].cnt1;</span><br><span class="line">    <span class="built_in">pushdown</span>(k);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">query1</span>(lson, l, r) + <span class="built_in">query1</span>(rson, l, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n, q;</span><br><span class="line">        cin &gt;&gt; n &gt;&gt; q;</span><br><span class="line">        cin &gt;&gt; s &gt;&gt; f;</span><br><span class="line">        s = <span class="string">&#x27;X&#x27;</span> + s, f = <span class="string">&#x27;X&#x27;</span> + f;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= q; ++i) &#123;</span><br><span class="line">            cin &gt;&gt; ql[i] &gt;&gt; qr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">        <span class="keyword">bool</span> flag = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = q; i &gt;= <span class="number">1</span>; --i) &#123;</span><br><span class="line">            <span class="keyword">int</span> cnt0 = <span class="built_in">query0</span>(<span class="number">1</span>, ql[i], qr[i]);</span><br><span class="line">            <span class="keyword">int</span> cnt1 =  <span class="built_in">query1</span>(<span class="number">1</span>, ql[i], qr[i]);</span><br><span class="line">            <span class="keyword">if</span> (cnt0 == <span class="number">0</span> || cnt1 == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (cnt0 == cnt1) &#123;</span><br><span class="line">                flag = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (cnt0 &lt; cnt1) &#123;</span><br><span class="line">                <span class="built_in">change</span>(<span class="number">1</span>, ql[i], qr[i], <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">change</span>(<span class="number">1</span>, ql[i], qr[i], <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        string x;</span><br><span class="line">        x += <span class="string">&quot;X&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> c = <span class="built_in">query0</span>(<span class="number">1</span>, i, i);</span><br><span class="line">            <span class="keyword">if</span> (c) x += <span class="string">&quot;0&quot;</span>;</span><br><span class="line">            <span class="keyword">else</span> x += <span class="string">&quot;1&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (x != s) flag = <span class="number">0</span>;</span><br><span class="line">        cout &lt;&lt; (flag ? <span class="string">&quot;YES&quot;</span> : <span class="string">&quot;NO&quot;</span>) &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Nezzar-and-Nice-Beatmap"><a href="#C-Nezzar-and-Nice-Beatmap" class="headerlink" title="C. Nezzar and Nice Beatmap"></a>C. Nezzar and Nice Beatmap</h2><p>我还手画有没有不可能的情况呢，一直画不出来。</p><p>结果题解给了一个非常简洁优雅的方法：每次选取未加入点中距离最远的点连起来。</p><p>于是就保证每个角都是锐角……太强了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">// #pragma GCC optimize(3)</span></span><br><span class="line"><span class="comment">// #define endl &#x27;\n&#x27;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson k &lt;&lt; 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson k &lt;&lt; 1 | 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dis</span><span class="params">(point p1, point p2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (p1.x - p2.x) * (p1.x - p2.x) + (p1.y - p2.y) * (p1.y - p2.y);</span><br><span class="line">&#125;</span><br><span class="line">vector&lt;point&gt; v1, v2;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    t = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        v1.<span class="built_in">clear</span>();</span><br><span class="line">        v1.<span class="built_in">resize</span>(n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            cin &gt;&gt; v1[i].x &gt;&gt; v1[i].y;</span><br><span class="line">            v1[i].id = i + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">            cout &lt;&lt; v1[<span class="number">0</span>].id &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">            v2 = v1;</span><br><span class="line">            <span class="keyword">int</span> mxi = <span class="number">1</span>, mxd = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (v1.<span class="built_in">size</span>() == <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; v2.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">                <span class="keyword">int</span> d = <span class="built_in">dis</span>(v2[<span class="number">0</span>], v2[i]);</span><br><span class="line">                <span class="keyword">if</span> (d &gt; mxd) &#123;</span><br><span class="line">                    mxi = i, mxd = d;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            v1.<span class="built_in">clear</span>();</span><br><span class="line">            v1.<span class="built_in">push_back</span>(v2[mxi]);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; v2.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == mxi) <span class="keyword">continue</span>;</span><br><span class="line">                v1.<span class="built_in">push_back</span>(v2[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2022“杭电杯”中国大学生算法设计超级联赛（9）1008-Shortest-Path-in-GCD-Graph"><a href="#2022“杭电杯”中国大学生算法设计超级联赛（9）1008-Shortest-Path-in-GCD-Graph" class="headerlink" title="2022“杭电杯”中国大学生算法设计超级联赛（9）1008 Shortest Path in GCD Graph"></a>2022“杭电杯”中国大学生算法设计超级联赛（9）1008 Shortest Path in GCD Graph</h2><ol><li><p>任何两点间的距离都不大于 $2$，因为 $\gcd(1,i)=1$. 故答案只能是 $1$ 或者 $2$.</p></li><li><p>对于 $a,b$ 的距离，若 $\gcd(a,b)&gt;1$，问题等价于找到满足 $\gcd(a,i)=1,\gcd(b,j)=1$ 的 $i,j$ 数量。</p></li><li>对于 $n\leq10^7$ 条件，任何数的素因子数量都不会超过 $15$ 个（大概 $12$ 个左右）。可以先筛出 $a$ 和 $b$ 的所有素因子，然后计算它们在 $[1,n]$ 内整除的数，再用总数减去即可。</li><li>要求 $a,b$ 的素因子在 $[1,n]$ 内整除的数。假设素因子是 $\{x_1,x_2,…,x_m\}$，例如 $x_1$ 在范围内的倍数有 $\lfloor \frac{n}{x_1} \rfloor$ 个，然后再算 $x_2,x_3,…$ 的，这里 $x_1,x_2$ 的倍数肯定有重合的部分，发现这是一个容斥模型，于是可以二进制枚举容斥，这样单次询问复杂度上限就是 $O(2^{12})$.</li></ol><p><strong>std 的容斥模板是好的（</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(3)</span></span><br><span class="line"><span class="comment">// #define endl &#x27;\n&#x27;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// #define int long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e7</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> st[maxn], primes[maxn / <span class="number">10</span>], f[maxn];</span><br><span class="line"><span class="keyword">int</span> n, q;</span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ola</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (st[i] == <span class="number">0</span>) primes[++cnt] = i, f[i] = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; primes[j] &lt;= n / i; ++j) &#123;</span><br><span class="line">            st[primes[j] * i] = <span class="number">1</span>;</span><br><span class="line">            f[primes[j] * i] = primes[j];</span><br><span class="line">            <span class="keyword">if</span> (i % primes[j] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">set&lt;<span class="keyword">int</span>&gt; myset;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; vec;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (x &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> y = f[x];</span><br><span class="line">        myset.<span class="built_in">insert</span>(y);</span><br><span class="line">        <span class="keyword">while</span> (x % y == <span class="number">0</span>) x /= y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> s, <span class="keyword">int</span> o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s &gt; n) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (x == vec.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        ans += o * (n / s);</span><br><span class="line">        <span class="comment">// ans = (ans + mod) % mod;</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(x + <span class="number">1</span>, s, o);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不可写成乘法. 因为取个数就是要向下取整，不能不舍去.</span></span><br><span class="line">    <span class="keyword">if</span> (s &lt;= n / vec[x]) <span class="built_in">dfs</span>(x + <span class="number">1</span>, s * vec[x], -o);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    myset.<span class="built_in">clear</span>(); vec.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="built_in">add</span>(x), <span class="built_in">add</span>(y);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;xx : myset) vec.<span class="built_in">push_back</span>(xx);</span><br><span class="line">    ans = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">// freopen(&quot;1008.in&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;1008.out&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="comment">// cin &gt;&gt; t;</span></span><br><span class="line">    t = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        cin &gt;&gt; n &gt;&gt; q;</span><br><span class="line">        <span class="built_in">ola</span>(n + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= q; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> u, v;</span><br><span class="line">            cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">            <span class="keyword">if</span> (__gcd(u, v) == <span class="number">1</span>) &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;1 1&quot;</span> &lt;&lt; endl;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">solve</span>(u, v);</span><br><span class="line">            <span class="keyword">if</span> (__gcd(u, v) == <span class="number">2</span>) ans++;</span><br><span class="line">            cout &lt;&lt; <span class="number">2</span> &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="9-2-9-15"><a href="#9-2-9-15" class="headerlink" title="9.2~9.15"></a>9.2~9.15</h1><p>记忆丢失……这段时间补的题懒，没写题解</p><p>（其实是因为没 vp div. 1）</p><h2 id="CCPC网络赛-H-Multiple-Set"><a href="#CCPC网络赛-H-Multiple-Set" class="headerlink" title="CCPC网络赛 H. Multiple Set"></a>CCPC网络赛 H. Multiple Set</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">// #pragma GCC optimize(3)</span></span><br><span class="line"><span class="comment">// #define endl &#x27;\n&#x27;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int __int128</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e7</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> L, R, K;</span><br><span class="line"><span class="keyword">int</span> st[N], primes[N / <span class="number">4</span>], f[N], cnt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ola</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (st[i] == <span class="number">0</span>) primes[cnt++] = i, f[i] = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; primes[j] &lt;= n / i; ++j) &#123;</span><br><span class="line">            st[primes[j] * i] = <span class="number">1</span>;</span><br><span class="line">            f[primes[j] * i] = i;</span><br><span class="line">            <span class="keyword">if</span> (i % primes[j] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">set&lt;<span class="keyword">int</span>&gt; fac;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; vec;</span><br><span class="line"><span class="keyword">bool</span> vis[N / <span class="number">4</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fj</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    fac.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cnt; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; primes[i]) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span> (x % primes[i] == <span class="number">0</span>) &#123;</span><br><span class="line">            fac.<span class="built_in">insert</span>(primes[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (x % primes[i] == <span class="number">0</span>) x /= primes[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">1</span>) fac.<span class="built_in">insert</span>(x);</span><br><span class="line">    vec.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;e : fac) &#123;</span><br><span class="line">        vec.<span class="built_in">push_back</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(vis));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fpow</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (k) &#123;</span><br><span class="line">        <span class="keyword">if</span> (k &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            ans = ans * x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ans &gt; K) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        x = x * x;</span><br><span class="line">        k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> prod, <span class="keyword">int</span> n, <span class="keyword">int</span> lp, <span class="keyword">bool</span> z)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l = (L / prod) + (L % prod &gt; <span class="number">0</span>), r = R / prod;</span><br><span class="line">    <span class="keyword">int</span> fp = <span class="built_in">fpow</span>(<span class="number">2</span>, r - l);</span><br><span class="line">    <span class="keyword">if</span> (fp &gt; <span class="number">0</span> &amp;&amp; z &amp;&amp; K == fp * (l + r) * (r - l + <span class="number">1</span>) * prod / <span class="number">2</span>) ans++, res.<span class="built_in">push_back</span>(prod);</span><br><span class="line">    <span class="keyword">if</span> (lp &gt;= vec.<span class="built_in">size</span>()) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">dfs</span>(prod, n, lp + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; prod * vec[lp] &lt;= K; ++i) &#123;</span><br><span class="line">        prod *= vec[lp];</span><br><span class="line">        <span class="built_in">dfs</span>(prod, n + <span class="number">1</span>, lp + <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">signed</span> t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="built_in">ola</span>(<span class="number">1e7</span> + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> LL, RR, KK;</span><br><span class="line">        cin &gt;&gt; LL &gt;&gt; RR &gt;&gt; KK;</span><br><span class="line">        L = LL, R = RR, K = KK;</span><br><span class="line">        ans = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">fj</span>(K);</span><br><span class="line">        res.<span class="built_in">clear</span>();</span><br><span class="line">        <span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (res.<span class="built_in">size</span>() == <span class="number">0</span>) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;No Solution&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (res.<span class="built_in">size</span>() &gt; <span class="number">1e5</span>) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;Too Many!&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; (<span class="keyword">long</span> <span class="keyword">long</span>)ans &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">sort</span>(res.<span class="built_in">begin</span>(), res.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : res) cout &lt;&lt; (<span class="keyword">long</span> <span class="keyword">long</span>)x &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="9-16-9-17"><a href="#9-16-9-17" class="headerlink" title="9.16~9.17"></a>9.16~9.17</h1><h2 id="【模板】普通平衡树（数据加强版）-（替罪羊树实现）"><a href="#【模板】普通平衡树（数据加强版）-（替罪羊树实现）" class="headerlink" title="【模板】普通平衡树（数据加强版） （替罪羊树实现）"></a>【模板】普通平衡树（数据加强版） （替罪羊树实现）</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e7</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> alpha = <span class="number">0.7</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> ch[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line"><span class="keyword">int</span> val;</span><br><span class="line"><span class="keyword">int</span> sz;</span><br><span class="line">&#125;tree[maxn];</span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">tree[x].sz = tree[tree[x].ch[<span class="number">0</span>]].sz + tree[tree[x].ch[<span class="number">1</span>]].sz + tree[x].cnt;</span><br><span class="line">&#125;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; fp, fn, fv;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">flat</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (tree[p].ch[<span class="number">0</span>]) &#123;</span><br><span class="line"><span class="built_in">flat</span>(tree[p].ch[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> id = fp.<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">if</span> (tree[p].cnt) &#123;</span><br><span class="line">fp.<span class="built_in">push_back</span>(p);</span><br><span class="line">fv.<span class="built_in">push_back</span>(tree[p].val);</span><br><span class="line">fn.<span class="built_in">push_back</span>(tree[p].cnt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (tree[p].ch[<span class="number">1</span>]) &#123;</span><br><span class="line"><span class="built_in">flat</span>(tree[p].ch[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rebuild</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> l = <span class="number">0</span>, <span class="keyword">int</span> r = fp.size() - <span class="number">1</span>)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (l &lt; mid) &#123;</span><br><span class="line">tree[p].ch[<span class="number">0</span>] = fp[(l + mid - <span class="number">1</span>) &gt;&gt; <span class="number">1</span>];</span><br><span class="line"><span class="built_in">rebuild</span>(tree[p].ch[<span class="number">0</span>], l, mid - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> tree[p].ch[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (mid &lt; r) &#123;</span><br><span class="line">tree[p].ch[<span class="number">1</span>] = fp[(mid + <span class="number">1</span> + r) &gt;&gt; <span class="number">1</span>];</span><br><span class="line"><span class="built_in">rebuild</span>(tree[p].ch[<span class="number">1</span>], mid + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> tree[p].ch[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">tree[p].cnt = fn[mid];</span><br><span class="line">tree[p].val = fv[mid];</span><br><span class="line"><span class="built_in">pushup</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">check_and_rebuild</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line"><span class="built_in">pushup</span>(p);</span><br><span class="line"><span class="keyword">double</span> lchp = <span class="number">1.</span> * tree[tree[p].ch[<span class="number">0</span>]].sz / tree[p].sz;</span><br><span class="line"><span class="keyword">if</span> (lchp &gt; alpha || lchp &lt; <span class="number">1</span> - alpha) &#123;</span><br><span class="line">fp.<span class="built_in">clear</span>(), fv.<span class="built_in">clear</span>(), fn.<span class="built_in">clear</span>();</span><br><span class="line"><span class="keyword">int</span> id = <span class="built_in">flat</span>(p);</span><br><span class="line"><span class="built_in">swap</span>(fp[id], fp[(fp.<span class="built_in">size</span>() - <span class="number">1</span>) / <span class="number">2</span>]);</span><br><span class="line"><span class="built_in">rebuild</span>(p);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> __insert(<span class="keyword">int</span> x, <span class="keyword">int</span> p, <span class="keyword">int</span> f, <span class="keyword">bool</span> which) &#123;</span><br><span class="line"><span class="keyword">if</span> (!p) &#123;</span><br><span class="line">p = tree[f].ch[which] = ++cnt;</span><br><span class="line">tree[p].val = x;</span><br><span class="line">tree[p].sz = tree[p].cnt = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">check_and_rebuild</span>(p);</span><br><span class="line"><span class="keyword">if</span> (x == tree[p].val) &#123;</span><br><span class="line">tree[p].cnt++;</span><br><span class="line">tree[p].sz++;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (x &lt; tree[p].val) &#123;</span><br><span class="line">__insert(x, tree[p].ch[<span class="number">0</span>], p, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (x &gt; tree[p].val) &#123;</span><br><span class="line">__insert(x, tree[p].ch[<span class="number">1</span>], p, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushup</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!cnt) &#123;</span><br><span class="line">tree[++cnt].cnt = <span class="number">1</span>;</span><br><span class="line">tree[cnt].val = x;</span><br><span class="line">tree[cnt].sz = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">__insert(x, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> __remove(<span class="keyword">int</span> x, <span class="keyword">int</span> p, <span class="keyword">int</span> f, <span class="keyword">bool</span> which) &#123;</span><br><span class="line"><span class="built_in">check_and_rebuild</span>(p);</span><br><span class="line"><span class="keyword">if</span> (x &lt; tree[p].val) &#123;</span><br><span class="line">__remove(x, tree[p].ch[<span class="number">0</span>], p, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (x &gt; tree[p].val) &#123;</span><br><span class="line">__remove(x, tree[p].ch[<span class="number">1</span>], p, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">tree[p].cnt--;</span><br><span class="line">tree[p].sz--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushup</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="comment">// guarantee it exists</span></span><br><span class="line"><span class="keyword">if</span> (tree[<span class="number">1</span>].val == x) &#123;</span><br><span class="line">tree[<span class="number">1</span>].cnt--;</span><br><span class="line">tree[<span class="number">1</span>].sz--;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">__remove(x, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">countl</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x &lt; tree[p].val) &#123;</span><br><span class="line"><span class="keyword">return</span> tree[p].ch[<span class="number">0</span>] ? <span class="built_in">countl</span>(x, tree[p].ch[<span class="number">0</span>]) : <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (x &gt; tree[p].val) <span class="keyword">return</span> tree[tree[p].ch[<span class="number">0</span>]].sz + tree[p].cnt + (tree[p].ch[<span class="number">1</span>] ? <span class="built_in">countl</span>(x, tree[p].ch[<span class="number">1</span>]) : <span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> tree[tree[p].ch[<span class="number">0</span>]].sz;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">countg</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x &gt; tree[p].val) &#123;</span><br><span class="line"><span class="keyword">return</span> tree[p].ch[<span class="number">1</span>] ? <span class="built_in">countg</span>(x, tree[p].ch[<span class="number">1</span>]) : <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (x &lt; tree[p].val) <span class="keyword">return</span> tree[tree[p].ch[<span class="number">1</span>]].sz + tree[p].cnt + (tree[p].ch[<span class="number">0</span>] ? <span class="built_in">countg</span>(x, tree[p].ch[<span class="number">0</span>]) : <span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> tree[tree[p].ch[<span class="number">1</span>]].sz;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rk</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">countl</span>(x, <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> __kth(<span class="keyword">int</span> k, <span class="keyword">int</span> p) &#123;</span><br><span class="line"><span class="keyword">if</span> (tree[tree[p].ch[<span class="number">0</span>]].sz &gt;= k) &#123;</span><br><span class="line"><span class="keyword">return</span> __kth(k, tree[p].ch[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (tree[tree[p].ch[<span class="number">0</span>]].sz + tree[p].cnt &lt; k) &#123;</span><br><span class="line"><span class="keyword">return</span> __kth(k - tree[tree[p].ch[<span class="number">0</span>]].sz - tree[p].cnt, tree[p].ch[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> tree[p].val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kth</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> __kth(k, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pre</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> r = <span class="built_in">countl</span>(x, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> __kth(r, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">suc</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> r = tree[<span class="number">1</span>].sz - <span class="built_in">countg</span>(x, <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> __kth(r, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// freopen(&quot;test.in&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line">cin &gt;&gt; x;</span><br><span class="line"><span class="built_in">insert</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> last = <span class="number">0</span>, op, x;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">cin &gt;&gt; op &gt;&gt; x;</span><br><span class="line">x ^= last;</span><br><span class="line"><span class="keyword">if</span> (op == <span class="number">1</span>) <span class="built_in">insert</span>(x);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">2</span>) <span class="built_in">remove</span>(x);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">3</span>) &#123;</span><br><span class="line">last = <span class="built_in">rk</span>(x);</span><br><span class="line">ans ^= last;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">4</span>) &#123;</span><br><span class="line">last = <span class="built_in">kth</span>(x);</span><br><span class="line">ans ^= last;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">5</span>) &#123;</span><br><span class="line">last = <span class="built_in">pre</span>(x);</span><br><span class="line">ans ^= last;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">6</span>) &#123;</span><br><span class="line">last = <span class="built_in">suc</span>(x);</span><br><span class="line">ans ^= last;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">两天一套 div1，直到 CM</summary>
    
    
    
    <category term="问道" scheme="https://eykenis.github.io/categories/%E9%97%AE%E9%81%93/"/>
    
    
    <category term="XCPC" scheme="https://eykenis.github.io/tags/XCPC/"/>
    
  </entry>
  
  <entry>
    <title>我的二十岁，来得猝不及防</title>
    <link href="https://eykenis.github.io/2022/07/31/my-20th-birthday/"/>
    <id>https://eykenis.github.io/2022/07/31/my-20th-birthday/</id>
    <published>2022-07-31T12:59:56.000Z</published>
    <updated>2022-07-31T16:32:17.031Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>人不是慢慢长大的，人是一瞬间长大的一样，18之后是19，处于19那个阶段特别想回到18吧，可是时间一直向前，不作停留，给你的回报只是我们称为成熟的东西。</p><p>我一点也没有做好二十岁的准备，挺纳闷的，就像谁从背后推给我一样。事实上我根本没有做好二十岁的准备，我依旧会被一些小事影响，依然爱说反话，还是那个遇到挫折就想逃避的小孩。我一直以为我的二十岁可以看山河大海，看落日余晖，但是事实是我还在寻找自己的路上。</p><p>​                                                                                    ——村上春树</p></blockquote><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=300 height=86 src="https://music.163.com/outchain/player?type=2&id=1949849501&userid=3576739876&height=66&auto=1"></iframe><p>$23:44\ \rm{UPD}:$ 我觉得这是我送给自己最好的生日礼物~</p><p><img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/image-20220731234410983.png" alt="image-20220731234410983"></p><hr><p>我以为，从高中毕业，就是枯木逢春，这之后的路就是一直向上走了。我以为我会成长成一个成熟有担当，开朗大方的人。我觉得这会是自己最繁华多彩，拥有数不尽精力的年纪。</p><p>但是其实哈，我还是一样穿着和过去没有什么两样的 T 恤、裤头。没有继续长高，心智也没有多成熟，认识的人是比以前多太多太多了，然而能多说一些话的朋友没有变多，甚至可能更少了。每天总觉得自己很闲，又总觉得自己很忙。总是在学习，不是在学习就是在玩游戏，不论干什么都在电脑边上出不去，这样下去工作不了几年身体就会出问题的吧。前段时间坚持夜跑，但天气越来越热就也作罢了。</p><p>对于未来仍然很迷茫，找不到路，不知道要怎么做。或许我还是很盲目，有时喜欢跟着别人做，有时又喜欢瞎搞，瞎标新立异，在这个对年轻人几乎没有什么试错容忍度的时代败光自己未来的选择权。</p><p>原来这就是挥霍青春的感觉吗？哈哈。我的青春又还剩多少年呢？我总感觉还有很久很久，总感觉自己还是个幼稚的小孩，但没想到还能理所当然被称作年轻的时间，最多只剩下不到十年了。人生还真是短。</p><p>我以为自己很强，我以为自己的力气很足。但是上大学以来乱搞了这么多回，才知道没有这么回事。我的生猛或许马上就会褪去。想像王小波在《黄金时代》中说的那样，我一生中好多好多的奢望，想爱，想吃，想要在一瞬间变成天上半明半暗的云。</p><p>我以为时间还有很多很多，但其实没什么时间了。原本暑假我可以选择回家，原本应该再多陪陪家里人的。你说我出来是为了什么呢？就因为自己想打竞赛吗？或许这个暑假过后就再也没有真正意义上的暑假了，往后的夏天只会越来越忙吧。要是两年前选选修课的时候没有和别人换课，我估计是怎么也不会接触到算竞的。极其耗时间，也基本没有什么回报，还会牺牲掉宝贵的陪伴他人的时间，和进行社交、娱乐，以及其他一切活动的时间，把你大学生活的相当一部分都变成做题，你说这样好么？看起来好像非常不好，但是为啥我还在打呢。不知道，我要是生活在一百年前，两百年前，估计就会是一个瘾君子，只知道做自己感兴趣的事，不顾后果，到底好不好呢？我也不知道好不好。那你说那些大部分人看起来都觉得十分晦涩的数据结构与算法，对这种东西感兴趣正常么？我也会问自己，好像确实也没什么感兴趣的理由。说不清楚，也没什么资格评价，毕竟自己菜的要死，会的其实不多。总之如果自己还是想做的话，就继续做下去好了。从来没有人觉得我是一个挥霍的人，相反大家都会认为我还算节约。但其实在赚到自己的第一桶金，余裕多起来之后，自己的花销也毫不客气地开始膨胀，不仅如此，自己也一直是在肆无忌惮地挥霍自己的青春和时间，我并不是一个节约的人。感觉不多了，不知道自己之后还会剩下什么。</p><p>说不定好几年以后，甚至是现在，马上，或者已经，我再也没有精力去寻找爱情，没有精力去谈理想。不仅是没有精力，也没有能力。我还是记得十六七岁自己心中的理想主义，记得坐在后桌的女孩。我会记到什么时候呢？我不知道自己现在是一个什么样的状态。高二期中考试之后借读同学的《挪威的森林》，读完之后只是觉得有些句子很美很有特点，只知道那整个刻画的就是六七十年代日本青年普遍迷茫愤怒，又想保持自我的群像，对当时的我来说，就像是在看历史书，但却没想到工业化国家的路都会有相似的地方，而我们似乎正在走入一个类似于其的时代了。现在再去看，心境好像就不那么相同了，想的也不一样了。我记得我曾经，或许即使是现在，我都怀抱着一个（现在看起来有点可笑的）做游戏，开工作室的梦想，怀抱着一个成为能画出优秀作品，写出优秀作品，唱出优秀作品的人的梦想。任何形式的艺术。然而我大部分时间在和理工科打交道，不过也是必须的。我想做的事太多太多了。未来还会想做吗？会吧。会吗？</p><p>于是，就这样，连自己的生日也是因家人的电话才得知的，前几天已经完全把这事忘了，要不是还有他们记得，我还不知道。他们都会记得，真好。于是，就这样，有点毫无准备，毫无预防地结束了自己以 1 字开头的年龄。</p><p>还有很多事情要做。但是，世界奇奇怪怪，呆唯可可爱爱 ^ ^。</p><p><img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/CC66D93860DA1606A44E49E5609F77E4.jpg" alt="img"></p><p><img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/image-20220731205355359.png" alt="image-20220731205355359"></p>]]></content>
    
    
    <summary type="html">你好</summary>
    
    
    
    <category term="寻路" scheme="https://eykenis.github.io/categories/%E5%AF%BB%E8%B7%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>《近月少女的礼仪》个人评</title>
    <link href="https://eykenis.github.io/2022/07/09/Tsukiniyorisou/"/>
    <id>https://eykenis.github.io/2022/07/09/Tsukiniyorisou/</id>
    <published>2022-07-09T12:21:49.000Z</published>
    <updated>2022-07-10T05:16:36.378Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><em>意志产生希望，希望孕育梦想，梦想则会改变世界——现在的我如此相信着，然而世界却还是跟以前一样。</em></p><p><em>说不定梦想着改变世界的我，是在这个早就变了的世界上，唯一以为这个世界还和以前一样的人——</em></p><p align="right">——小仓朝日</p><p><em>意志产生希望，希望孕育梦想，梦想会改变世界。</em></p><p align="right"> ——J · P · 斯塔雷</p></blockquote><p>贯穿整个系列的 “名言”，来自斯塔雷。^ ^</p><p>《近月少女的礼仪》是一部 2012 年发行的文字冒险游戏，你所见的是我通关其中一条剧情线（樱小路露娜线），然后大致浏览了一下其余剧情线，并且开始玩其 BAD END 衍生出的续作《少女理论及其周边》约 1 小时的条件下写出来的一段长评。哎，要是再多玩一会理论，怕是对露娜大人的感情又淡了 T T</p><p>前天推完这部月寄乙女作法的露娜线时已经是凌晨，然而迟迟不肯关上游戏。我害怕只要推完关上游戏，睡几天觉，对露娜的感情就会不断减少，最后消失，重新把他们当作过客，不再时时关注。就现在看来这个担心是对的，至少现在我冷静多了，但却也不知道从何写起了。可是再听一听《愛と追憶のなにか》，好像朝日那段最柔软的回忆又被唤起，好像又看到 “我”（小仓朝日）和樱小路露娜并排坐在樱公馆的大床边，心怦怦跳地互相诉说。也请不小心看到本文的诸位感受一番。</p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=480 height=86 src="https://music.163.com/outchain/player?type=2&id=28568062&userid=3576739876&height=66&auto=1"></iframe><p>决定了，我就单曲循环听着这首背景音乐写完这份测评，假装自己是大藏游星，然后一边写，一边感谢樱公馆每一个人的陪伴。说真的，从来没有一部什么作品的人设能够丰满到让现实中的我也对露娜大人如此留恋，如此敬慕。那段时间总是会因为露娜而心头热热的，好像她真的和我生活在一起。</p><p>然后，我的长评，总是习惯性地梳理剧情，然后剧透 :)</p><p>如果你没玩过，就算你不打算玩，也不太建议看剧透，因为露娜线实在是太出色了。希望大家都能邂逅一次露娜。毕竟这个角色在 2012 年得到 Getchu 最佳角色奖后，2013 年 Navel 推出续作《少女理论及其周边》中只是作为配角客串了一下，而在 2014 年《近月少女的礼仪2》中也已经成为中年女性（剧情是下一代的故事），却也毫不留情地斩获了这两年的最佳角色。估计只是因为 Getchu 只评选当年发行的 gal 中出现的角色，所以露娜才局限地出现在这三年（</p><h2 id="人物分析"><a href="#人物分析" class="headerlink" title="人物分析"></a>人物分析</h2><h3 id="大藏游星（小仓朝日）"><a href="#大藏游星（小仓朝日）" class="headerlink" title="大藏游星（小仓朝日）"></a>大藏游星（小仓朝日）</h3><p><strong>Ookura Yuusei (Kokura Asahi)</strong></p><p><img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/asahi.png" alt="asahi"></p><p>没错，这是本作男主。</p><p>虽然游戏总体的格调是轻快正能量的，但其实介绍游星过往的开头却是十分压抑。虽然生在贵族家庭大藏家，但游星是父亲和情人所生，血统不纯，在曼彻斯特的家里极不受待见。不过，毕竟还是大户人家，游星自幼便接受了丰富的家庭教育，精通英语、法语、日语，甚至会一点阿拉伯语（露娜线后期对游星会阿拉伯语有体现），同时也具有自然科学的常识，懂礼仪，会做饭，还学了一身格斗技巧。作为庶子的他在家中总是唯唯诺诺，父亲的正妻看不起他，只有作为父亲情人的母亲关爱他。但游星的母亲是懦弱的，总是教游星不要惹事，结果导致了游星逆来顺受到令人愤怒的性格（这点真是又爱又恨）。</p><p>游星在十二三岁左右的时候（应该是吧？）被送到巴黎的酒窖里打下手，每天睡酒窖，和老鼠同生活。除此之外陪伴他的只有那张带满母亲爱意和气味的毛毯，游星每晚都裹着它睡觉。可母亲也在这段时间离他而去了。于是游星对生活逐渐失去希望和动力。一天，外面的街头发生了枪击案，场面一度十分混乱。这时酒窖走进来一个高大的成年男性。只想着寻死的游星用学来的格斗技与其殊死搏斗，最后却不敌其手但被放过了。原来那个男人不是混乱之中闯入的盗贼，而是大藏家的客人 J · P · 斯塔雷。斯塔雷的一番话让游星重新振作了起来，于是斯塔雷的迷弟+1. 之后，那个和大藏金子（家族正妻）一样看不起游星的哥哥大藏衣远（其实是表面上）过来将其带出酒窖，安排他回到日本大藏本家生活。回来后的游星发现了自己的爱好所在——服装设计，于是已经成为著名服装设计师的 J · P · 斯塔雷在游星心中的地位也就愈高，已经成为了他憧憬的偶像。</p><p>然而好景不长，衣远哥哥因为这个弟弟一直在服装设计上没有展现什么才能而被他拒绝继续培养，于是回到家中开始（和妹妹一起）混时度日。不过妹妹打听到消息，东京新开了一个贵族服装设计学校，而且校长还是游星最崇拜的斯塔雷。面对这一机会，游星当然不会放过。可惜这个菲利亚服装学院第一年成立，是以女子学校的名义成立的，不收男生。看到不甘心的哥哥，妹妹给他出了个馊<del>（好）</del>主意——作为同样要去菲利亚学院上学的网友樱小路露娜的女仆，女装跟着露娜去上学。于是，“大藏家的庶民女仆，小仓朝日” 诞生了。接下来就是近月的主线，游星男扮女装，以小仓朝日的身份在菲利亚女子学院度过了近一年的生活。</p><p>这个角色其实也是塑造的非常成功的，而且游星作为小仓朝日的可爱程度可以说不输其他几位女主（</p><p>一开始玩的时候，我其实是对游星有一些代入感的。或许我和他在性格上都存在着相似的劣根性。外强中干，色厉内荏。游星大概是色荏内荏。。面对现实或许会选择逃避，或许会不愿意面对。在学校遇到衣远时恐惧到无法直起身子，要露娜不停地安抚……可以看出大藏游星是多么地软弱，更不要说之后衣远不管对他做什么，游星甚至都能心怀感恩。简直是软弱到了令人发指的地步。然而就是这样不争气的游星，也有他的心思细腻体贴，所以和露娜的强势与凛然互补。游星个子也小，即使不是家里年纪最小的也总让别人觉得幼态，外表上总是不像大人。</p><p>可是这个游星是个社交达人，善解人意，工作生活上细腻得出神入化，待人接物可以说是时时刻刻做到极致，严于律己而宽以待人。到这里我还没有觉得有什么不对。可是看到其他玩家在自己的解读中都认为游星其实是个在同龄人十分受欢迎的人，细细想来好像确实如此。剧情到最后也说明，不光是樱公馆的大小姐和女仆们，妹妹里想奈，甚至哥哥衣远，都是在为了游星好。“唔呣，这个人竟然是个实实在在的现充！” 我的想法好像突然就和那个 “看到原本以为是和自己同类人，和自己同样宅在家玩网游的露娜竟然是个天才而且一点也不废” 的里想奈重合了，苦笑（（ 不过如果我是朝日，我想我也会尽我所能地像剧情里那样去做，虽然我可能不会有那样敏捷的社交思维。</p><p>但话说回来，游星还是有点太过了。剧情的最后，游星鼓起勇气去做的，鼓起勇气去做的，竟然是渴求哥哥大人的认可？啊？为什么需要这样一个人的认呢。实在是软弱。不光是游星，在他暴露性别后那段最黑暗的日子里，樱公馆也十分压抑。一切仅仅只是因为一个人的胯下所挂之物，不由得感叹人性还是太可笑了，还是有太多东西需要解放和进步了。所有人的美好回忆就这样被衣远一个人捏在手中……不过最后公馆各人对游星的理解还是好的，那为什么 Bad End 中八千代的态度又如此决绝呢……</p><p>我还是不太能接受时时刻刻都对衣远哥哥既恐惧又敬爱的游星。明明直到剧情末，游星也是不知道衣远对自己真正的态度的，而且衣远的苦衷要在各种线各种 AfterStory 中才慢慢展现出来（听说后面的理论和 2代也会有更进一步的描写）。既然现在的衣远只是在不断地否定自己，那游星就应该起来光明正大的反抗才对。只不过幸好衣远事实上是个游控（，所以游星也没有为自己的软弱付出太多代价。</p><h3 id="樱小路露娜"><a href="#樱小路露娜" class="headerlink" title="樱小路露娜"></a>樱小路露娜</h3><p><strong>Sakurakouji Runa</strong></p><p><img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/lun_s_2_0_00.png" alt="lun_s_2_0_00"></p><p>容我充满荣幸地向各位介绍，樱公馆的主人，Navel 的亲女儿，全东京数一数二的美人，宇宙尽头的答案，恋爱冒险游戏中人设的神，传说中的<del>（145cm的）</del>樱小路露娜撒嘛！</p><p>因为我只认真玩了露娜线，所以女主只有她 :0</p><p>（对不起！时间实在太晚，没想到会写这么久，所以又拖了两天。也就是说从现在开始我已经推完近月 1 主线四天了 T T）</p><p>感觉之前玩的时候有些比较细的感想记不起来了，于是把露娜线后半段重温了一遍（还挺长）。</p><p>作为一个纯正日本人，白发红瞳的樱小路露娜是患有白化病的。也正因如此，露娜在家中不受待见，被父亲长期软禁，作为笼中鸟被 “圈养” 着。但露娜年纪轻轻便表现出了天才般的能力，一系列商业活动取得巨大成功。与此同时樱小路家的资产却日益萎缩，父亲为了抵消亏损出售名下的豪宅 “樱公馆”，然后被樱小路露娜用自己的资产买入。据露娜所说这既是报恩也是反抗。从此以后露娜便独自在樱公馆生活，和父母几乎断绝往来。</p><p>其实小时候的露娜和所有小女孩一样，都喜欢牵着朋友的手什么都聊，和他人分享心情，遇到美好的事物就会喜于言表，遇到伤心的事会放声大哭。但毫无遮掩讨厌她的父亲，和什么也不让她做，还总是在莫名其妙对她说抱歉的母亲让她越来越困惑，越来越孤僻。后来，即使是露娜最信任的贴身女仆也为了一己私利利用她，从此开始露娜便再也无法真心信任他人，同时也靠自己的双手打下了一片天地，成为了一个坚强独立的人，直到露娜线中朝日打开了她的心扉，她才重新开始接受他人的爱。</p><p>樱小路露娜的人设被几乎所有玩过《近月》的玩家们推崇，其实原因也很简单。在整个故事中其几乎没有表现出有悖设定的言行，而且其性格设定的由来是脉络清晰，十分合理的。这样一个拥有两面性的人物性格背后的成因是完整可考的，也就让人物的立体感真实感特别突出（尽管近月本身各种名门贵族的设定好像不太真实，不过那本身也是远离普通人生活的，我们大多只能靠想象hhh）</p><p>尽管是 “Luna” 是月亮，而 “朝日” 是太阳，但在作品中露娜反而更像朝日的太阳，露娜这个女强人一直保护着他，在朝日不断否定自己时告诉朝日他也是有才能的，让他能够直面自己的哥哥衣远，不停地给予他勇气和希望。相应的，朝日也重新解开了她严防死守的城府。</p><p>不过，露娜一次又一次地向朝日敞开心扉，向他诉说时，如果是我，肯定是马上会联想到自己和她极为相似的少年经历（不受家人待见），然后感到同情的。但是推的时候期待了好久朝日都没有这么想，反而是一直在认真体会露娜一路以来的艰难，全然没有往自己身上想，直到最后和露娜确定关系，互相诉说过往时才有体现。这么看来，如此全心全意为他人着想的朝日也实在是太无私了，或许就是这些小细节，能够走进露娜心中的人非他不可吧。果然，境遇相似，性格互补的这二人才是最般配的。</p><h3 id="柳之濑凑"><a href="#柳之濑凑" class="headerlink" title="柳之濑凑"></a>柳之濑凑</h3><p><strong>Yanagase Minato</strong></p><p>好惨一角色，太惨了不挂图了…明明为了幼驯染游星才选择服装设计，许多年一直以来心里都只有游星，却被认识半年的露娜/尤希尔/瑞穗（甚至实妹里想奈，还有巴黎的另外两个妹子。理论线的游星去了巴黎甚至完全没有想起过凑，反而心里一直惦记着露娜sama）爆杀。血淋淋的不要死追别人的例子。所以说只是为了追逐他人，去追逐一个飘忽不定，甚至是态度都不知道的人，而去擅自为自己做出什么重大选择，或者是做出什么重大改变，那种事不用考虑，肯定不要去做……在朝日和露娜产生感情，然后向凑坦白的时候真的能感受到凑的撕心裂肺，这种充满无力感的场景比结局还特么好哭。</p><p>所以，不应该为了追求而改变，而应该为了回应别人而去改变，就像露娜和朝日各自所做。</p><h2 id="没了"><a href="#没了" class="headerlink" title="没了"></a>没了</h2><p><strong>懒得写了。</strong></p><p>这大概是我认真玩的第 5 部 gal，总之，近月那种接地气的氛围营造的是真的好。我玩别的 gal 总感觉有一种阴森，奇怪的说不出话的感觉，而近月出场人物够多，人物塑造够真实，也就没了那层类似于恐怖谷的奇怪感受，感觉就和看漫画动漫差不多了。恰好其有续作，所以，第 6、7 部也将就会是近月系列的《少女理论及其周边》和《近月少女的礼仪 2》。</p><p>其实，在结局男女主满溢的幸福感之后迎来的却是及巨大到无法填补的空虚与无奈。或许像我们，像我这样的人一辈子也无法遇到那个樱小路露娜/大藏游星，就好像其他线的露娜一样，只能继续披着棘刺生活，穷其一生也遇不到像露娜线里那样美好的爱情。只是一个或几个选项的差别就能决定露娜未来的重大改变，我们在人生中是否早就错过了那些个选项呢？我想我大概率已经错过了，不过也没什么后悔的，就像其他线的露娜一样，也没什么后悔的。</p><blockquote><p>我想要再见面，我想再见到她。如果她一个人在发抖，我想立刻飞奔过去拥抱她。</p><p>我已经不想再回到过去了。就算能告诉您我的感谢之情，或者能让我回到一个月前离开她的那个时候，我也不会想让时间倒流。</p><p>我现在就想见到明天的她。我想见到她，告诉她我很幸福。</p><p>——————————————————————————</p><p><img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/622674-148b8d7ba6-00000001.jpg" alt="622674-148b8d7ba6-00000001"></p><p>如果说有一件事让我有点寂寞的话，那就是我会不会因为太爱她，而忘记被您所爱的时光。</p><p>所以，如果下次有机会跟她一起外出，我想去和您一起生活的故乡给您扫墓。</p><p>真是久疏问候了。时隔许久的招呼就给您介绍我的恋人，让我有点害羞。她是个美人，但更重要的是，她的心灵也非常美丽，我想您一定会为我高兴的。</p><p>如果您也一直在等待这一天，我会非常高兴。</p></blockquote><p>我也希望那一天，我能够躺在病榻上，奄奄一息，认真地感叹一句：</p><h1>真是有趣的人生啊！</h1>]]></content>
    
    
    <summary type="html">我现在就想见到明天的她。我想见到她，告诉她我很幸福。</summary>
    
    
    
    <category term="观止" scheme="https://eykenis.github.io/categories/%E8%A7%82%E6%AD%A2/"/>
    
    
  </entry>
  
  <entry>
    <title>BRDF 和 Blinn-Phong</title>
    <link href="https://eykenis.github.io/2022/06/21/BasicShadersImplements/"/>
    <id>https://eykenis.github.io/2022/06/21/BasicShadersImplements/</id>
    <published>2022-06-21T13:43:46.000Z</published>
    <updated>2022-07-09T14:51:29.752Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/20220310232734.png" alt=""></p><h1 id="了解-BRDF-—-标准光照模型"><a href="#了解-BRDF-—-标准光照模型" class="headerlink" title="了解 BRDF — 标准光照模型"></a>了解 BRDF — 标准光照模型</h1><p>BRDF 是真实化渲染一个重要的模型。以下实现的各种渲染方法都将符合 BRDF 的规则。</p><p>首先可以参考这篇论文：<a href="www.cs.princeton.edu/courses/archive/fall06/cos526/tmp/wynn.pdf">A Basic Introduction to BRDF-Based Lighting</a></p><p>(((</p><p>在了解渲染方法之前，你应该首先知晓渲染管线的基本流程。</p><p>标准光照模型 - BRDF (Bi-directional Reflectance  Distribution Function，也称双向反射模型) 是一种广泛用于图形渲染的光照模型。它的基本方法是将进入摄像机的光分为四部分：</p><p><strong>自发光</strong>、<strong>高光反射</strong>、<strong>漫反射</strong> 和 <strong>环境光</strong>.</p><ul><li><strong>自发光</strong> (emissive) 即物体本身向摄像机辐射的光（而非折射/反射）。如果你没有使用<strong>全局光照</strong>技术，自发光并不会让物体看起来在发光，而只是亮度提高了。使用全局光照后，自发光的物体可以影响附近物体的光照。</li><li><strong>高光反射</strong> (specular) 即模型向摄像机完全镜面反射的光强。</li><li><strong>漫反射</strong> (diffuse) 即模型接收到光照后，向所有方向反射的光强。该值与视角无关。</li><li><strong>环境光</strong> (ambient) 除以上三点以外的所有其他光照。这些一般都是间接光照。例如前面提到的全局光照。环境光一般是必须的，如果没有环境光，没有受到光源直线照射的地方将完全黑暗，这是不符合实际的。（在素描中也学过，暗面和阴影的交界处是有些许反光的）</li></ul><p>最后一个片元呈现的颜色就是这四种光的线性和。</p><p>除开双向反射模型以外，还有一种双向透射模型（BTDF），一般用于表现透明材质。二者统称为双向散射模型（BSDF）。</p><h2 id="漫反射光照的兰伯特定律"><a href="#漫反射光照的兰伯特定律" class="headerlink" title="漫反射光照的兰伯特定律"></a>漫反射光照的兰伯特定律</h2><p>兰伯特定律的表述很简单：</p><script type="math/tex; mode=display">I=k_d·{\vec n} ·\vec l</script><p>如上公式， $I$ 为光强，$\vec n, \vec l$ 分别为归一化后的表面法向量和光照方向，如下图所示（图来自《Unity Shader 入门精要》）：</p><p><img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/20220315093831.png" alt="image-20220310215956093"></p><p>其中，$k_d$ 是漫反射系数，由<strong>材质颜色乘以光线强度</strong>得到。</p><p>那么公式的意义实际上就是说漫反射的光强与法线和光源方向夹角的余弦值成正比（因为 $\vec n · \vec l=cos(\vec n, \vec l)$）。这和我们的感性认识——表面的角度偏离光源越远光照越少，是一致的。</p><p>这一定律在各种 Shading methods 中广泛使用。</p><p>下面来看看基于 BRDF 的经验模型是如何实现的。</p><h2 id="Phong-Shading-amp-Gouraud-Shading"><a href="#Phong-Shading-amp-Gouraud-Shading" class="headerlink" title="Phong Shading &amp; Gouraud Shading"></a>Phong Shading &amp; Gouraud Shading</h2><p> 冯（Phong）着色与高洛德（Gouraud）着色都是最经典的经验 Shading. 而且着色算法也是一样的。唯一的不同就是：Phong Shading 是在片元着色器阶段对每一个片元操作的，而 Gouraud Shading 是对顶点操作的。下面根据 BRDF 的四个光照部分来引入这两种 Shading 的公式。</p><h3 id="漫反射"><a href="#漫反射" class="headerlink" title="漫反射"></a>漫反射</h3><p>漫反射部分直接使用 Lambert law 即可：</p><script type="math/tex; mode=display">c_{diffuse}=(c_{light}·m_{diffuse})\max(0,\vec{n}·\vec{l})</script><p>其中，将漫反射颜色 $m_{diffuse}$ 与光照强度 $c_{light}$ 相乘，并保证漫反射取正值，这样可以防止物体在背光处被光源直接照亮。</p><h3 id="高光反射"><a href="#高光反射" class="headerlink" title="高光反射"></a>高光反射</h3><p>还是本文第一张图，Phong 模型通过如下公式计算高光反射：</p><script type="math/tex; mode=display">c_{specular} = (c_{light}·m_{specular})\max(0,\vec{v}·\vec r)^{m_{gloss}}</script><p>其中，$\vec v$ 为视线向量，$\vec r$ 是反射方向向量。</p><p>不过，对于高光的计算，还有另一种经验计算方法—— Blinn 模型，它使用一个新的矢量 $\vec h=normalize(\vec {v + l})$ ，公式为</p><script type="math/tex; mode=display">c_{specular} = (c_{light}·m_{specular})\max(0,\vec{n}·\vec h)^{m_{gloss}}</script><p>其实 Phong 模型和 Blinn 模型高光计算方法都是经验模型，在不同的情况下有不同的表现，不一定 Phong 更加符合实验结果。而 Blinn 的区别主要在于，当视角不动时，其计算的 $\vec h$ 几乎是一个常量，由此节约了性能。而在高速移动的视角下 Phong 模型也许更快。</p><p>总之，使用 Blinn 高光算法的模型一般也称为 Blinn-Phong Shading.</p><h3 id="环境光"><a href="#环境光" class="headerlink" title="环境光"></a>环境光</h3><p>对于简单的 Blinn-Phong 模型，环境光给一个全局常量即可（敷衍就行了）。例如在 Unity Shader 中，你可以把 <code>UNITY_LIGHTMODEL_AMBIENT</code> 拿来当环境光。</p><h3 id="自发光"><a href="#自发光" class="headerlink" title="自发光"></a>自发光</h3><p>和环境光一样，自发光也只使用一个固定常数。</p><p>总之，Blinn-Phong 模型只是一个经验模型，很多地方都做得很简单。和真实的物理光照是不同的，但表现出来的效果可以八九不离十。这也就是某一般路过（误）邓恩（<em>3D Math Primer For Graphics And Game Development</em> 的 writer）提出的图形学第一定律所说：</p><blockquote><p>如果它看起来是对的，那么它就是对的。</p></blockquote><p>如果你将以上过程应用到顶点着色器而不是片元着色器，那么你会得到一个更粗糙的着色效果，也就是 Gouraud Shading.</p><p>下面是不含高光部分的代码实现。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">// Gauraud</span><br><span class="line">v2f vert(a2v v) &#123;</span><br><span class="line">                v2f o;</span><br><span class="line">                o.pos = UnityObjectToClipPos(v.vertex); // MVP transformation</span><br><span class="line">                o.worldNormal = mul(v.normal, (float3x3)unity_WorldToObject);</span><br><span class="line">                o.worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;</span><br><span class="line">                return o;</span><br><span class="line">            &#125;</span><br><span class="line">            fixed4 frag(v2f v) : SV_TARGET0 &#123;</span><br><span class="line"></span><br><span class="line">                fixed3 ambient = UNITY_LIGHTMODEL_AMBIENT.xyz;</span><br><span class="line">                </span><br><span class="line">                fixed3 worldNormal = normalize(v.worldNormal);</span><br><span class="line">                fixed3 worldLightDir = normalize(_WorldSpaceLightPos0.xyz);</span><br><span class="line"></span><br><span class="line">                fixed3 viewDir = normalize(_WorldSpaceCameraPos.xyz - v.worldPos.xyz);</span><br><span class="line">                fixed3 halfDir = normalize(worldLightDir + viewDir);</span><br><span class="line"></span><br><span class="line">                fixed3 diffuse = _LightColor0.rgb * _Color.rgb * saturate(dot(worldNormal, worldLightDir));</span><br><span class="line"></span><br><span class="line">                return fixed4(ambient + diffuse, 1.0);</span><br><span class="line">            &#125;</span><br><span class="line">// Phong</span><br><span class="line">v2f vert(a2v v) &#123;</span><br><span class="line">                v2f o;</span><br><span class="line">                o.pos = UnityObjectToClipPos(v.vertex);</span><br><span class="line"></span><br><span class="line">                fixed3 ambient = UNITY_LIGHTMODEL_AMBIENT.xyz;</span><br><span class="line">                fixed3 worldNormal = normalize(mul(v.normal, (float3x3)unity_WorldToObject));</span><br><span class="line">                fixed3 worldLight = normalize(_WorldSpaceLightPos0.xyz);</span><br><span class="line">                fixed3 diffuse = _LightColor0.rgb * _Diffuse.rgb * saturate(dot(worldNormal, worldLight));</span><br><span class="line">                o.color = ambient + diffuse;</span><br><span class="line">                return o;</span><br><span class="line">            &#125;</span><br><span class="line">            fixed4 frag(v2f v) : SV_TARGET0 &#123;</span><br><span class="line">                return fixed4(v.color, 1.0);</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>高光如何实现呢？</p><p>且回看上方高光公式。简单地加一个高光向量：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fixed3 specular = _LightColor0.rgb * _Specular.rgb * pow(max(0, dot(v.worldNormal.xyz, halfDir)), _Gloss);</span><br></pre></td></tr></table></figure><p>这里采用的是 <code>Blinn</code> 方法， <code>_Specular</code> 是高光的颜色向量。另外，halfdir 的计算：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fixed3 halfDir = normalize(worldLightDir + viewDir);</span><br></pre></td></tr></table></figure><p>最后和 <code>ambient + diffuse</code> 直接相加。</p><h3 id="Half-Lambert"><a href="#Half-Lambert" class="headerlink" title="Half-Lambert"></a>Half-Lambert</h3><p>普通的 Lambert 方法处理的背光面会出现和真实情况相差甚远的情况——整个背光面都是黑的，没有亮度差别。而在实际观察中，即使是背光面也是存在量不同的反光的，只使用一个统一的环境反射光来表现显然不能解决问题。</p><p>问题的出现是因为使用的公式是 <code>saturate(dot(worldNormal, worldLight)</code>，对点积小于 0 的部分直接舍去用 0 代替，背光面出现大量亮度都为 0 的片元。</p><p>所以对 Lambert 进行一个重新取值，公式修改为</p><p><img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/image-20220624102948113.png" alt="image-20220624102948113"></p><p>对比如下：</p><p><img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/image-20220623165408197.png" alt="image-20220623165408197"></p><p><img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/image-20220623165359932.png" alt="image-20220623165359932"></p><p>不管怎样，两种渲染方式都缺少明暗交界线，是经验模型下单光源光照的缺点。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://ekkepic.oss-cn-beijing.aliyuncs.com/img/20220310232734.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;了解-BRDF-—-标准光照模型&quot;&gt;&lt;a href=&quot;#了解-BRDF-—-标</summary>
      
    
    
    
    <category term="问道" scheme="https://eykenis.github.io/categories/%E9%97%AE%E9%81%93/"/>
    
    
  </entry>
  
  <entry>
    <title>或许是新的开始——记2022年程序设计校赛</title>
    <link href="https://eykenis.github.io/2022/05/22/HNUPC2018/"/>
    <id>https://eykenis.github.io/2022/05/22/HNUPC2018/</id>
    <published>2022-05-22T14:00:26.000Z</published>
    <updated>2022-05-22T14:29:32.721Z</updated>
    
    <content type="html"><![CDATA[<p>比赛完和队友吃午饭时拍的气球图镇楼~</p><p><img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/5273971591EC4AB83DC927B44C0DFD8E.jpg" alt="img"></p><p>很可惜 zls 因为一些个人原因没有在学校，所以这场我们只有两个人参赛<del>（完美诠释了两个顶俩/双人成行）</del>。刚重温《末日三问》的队友给了一个队名 “Trust Chtholly”，于是 Trust Chtholly 拿下了属于她的全场 First Blood，以及一个道过题数非常少的 B 的 Accepted.</p><p>然而并没有什么卵用，作为 4+ 道题的队伍，我们之上的队都是过了7+题，且只有我们队没有做出 M —— 丁真题 orz。看来还是我不够纯真:smiley: 属于是金牌区之耻了。</p><p>昨天晚上没有睡好，今天早上打印代码模板正好撞上今天毕业答辩，一万个（虚数）学长学姐打印毕业论文，差点签到迟到。然而队友因为兴奋睡得还没我好（</p><p>简单记一下比赛五小时的流水账。</p><p>首先是队友迅速用 dp 拿下了全场一血，也就是签到题 L. 然而事后发现这道题只需要枚举 0101.. 和 1010.. 两种情况，完全用不上 dp，笑。因为是队友拿 dp 过的，没看题的我就以为 L 不是签到题，所以我就接着狂找签到题，抓着 Dingzhen 不放，然而谁想到最后我们也没解出这道题。一个小时后我们还是没有过第二道题，这时我们锁定了过题数较多的 F，虽然 F 确实是签到题之一，但我非常 sb 地计算了 $p$ 在 $p$ 模数下的逆元，然后发现全是 $0$ 并百思不得其解<del>（我真sb）</del>。</p><p>接着是 K，队友看题之后问了我一个子问题，计算 取得 $\min \{\sum_{i=1}^n|x-a_i|\}$ 的 $x$ 值。幸好之前有复习到，迅速给出了结论——中位数，然后迅速过掉了。</p><p>接着就是来回调题，看了 B 题，但过题人巨少不太敢上。尝试推出一个自己觉得没问题的构造法之后 WA 了，于是先搁置了。这个时候连签到的 F 都没过掉（已经过了两位数的人了），对我们来说还是有点不能接受的，因此还是按住自己继续读 F，打表发现有以下性质 $(p-1)!~\%~p=p-1$，因为 $p$ 的范围是 1e9，于是乎把 1e9 的阶乘计算变成了 1 次计算，欣喜不已，然后过掉了（（赛后发现原来我们打表得出的这个公式叫做威尔逊定理，是一个初等数论结论。哎，看来暑假还是得买一本初等数论的书稍微学一学。</p><p>至此过了 3 题， rank7. 已经到了比较坐牢的阶段了（剩下的题基本很难开）。看了看丁真题，我用字典树莽了一下，但是查询的时间复杂度爆了，铁铁的 TLE，没法过。然后又来尝试 B. 主要之前的构造感觉已经很接近答案了，虽然这题没人尝试，但还是非常想试试，毕竟也没有什么其他的题有思路了不是吗？接着我们就发现了一个惊人的结论：$n$ 为偶数时的构造和 $n$ 为奇数时是不一样的。于是分奇数偶数构造之后竟然奇迹般地过了！</p><p><img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/image-20220522222652810.png" alt="image-20220522222652810"></p><p>打 ACM 真的真的很有意思，但是也确实很花时间。更何况我还是不能忘记我走现在这条路的初心。认真考虑之后，还是得尽全力，达到一个令自己满意的结果，再离开这个地方。主要还是有一些顾虑，害怕错过好的学习机会。</p><p>先写到这里，$22:35$ 要打 cf 了（</p><p>希望能快点 Candidate Master！加油</p>]]></content>
    
    
    <summary type="html">Maybe a new beginning</summary>
    
    
    
    <category term="寻路" scheme="https://eykenis.github.io/categories/%E5%AF%BB%E8%B7%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>my perspective to life</title>
    <link href="https://eykenis.github.io/2022/05/03/my-perspective-to-life/"/>
    <id>https://eykenis.github.io/2022/05/03/my-perspective-to-life/</id>
    <published>2022-05-02T16:39:49.000Z</published>
    <updated>2022-05-02T16:17:32.482Z</updated>
    
    <content type="html"><![CDATA[<p>每天出去跑步是少有的感受身边环境和放下各种破事认真思考的时候。记录一下。</p><hr><h3 id="一些爱情观"><a href="#一些爱情观" class="headerlink" title="一些爱情观"></a>一些爱情观</h3><p>你以为你本来不想谈恋爱，她也不想谈恋爱。你认为你一直不相信爱情，不愿意与他人建立亲密关系，而她是例外；她也认为自己不相信爱情，害怕婚姻，但，你不是她的例外。所以，根本没有什么想不想谈，只不过有没有遇到想谈的那个人而已。</p><p>然而就算遇到了又如何呢？有时候你会觉得有一个人陪自己好像很幸福，看着他们卿卿我我，平日里有依靠，也想着能有一个人给自己温暖，做自己的依靠。其实这是本末倒置的。爱情不应当是互相索取的。要是那个人也带着这样的问题去向你索取温暖，情况可能更加糟糕。谈恋爱不是去让爱情丰富贫瘠的自己，而是去让丰富的自己去找到另一个同样丰富的人，分享快乐。</p><p>有两个人，一个中年离婚，孤独到老，一个忍受了下来，和一个可能不那么合适的人草草共度了一生。单身的老人整日坐在炕头，心想要是中年时没有那么冲动，现在身边至少还有个照应，生活不会那么艰难；而没有放弃的老人坐在床头，一边照顾着老伴，一边抱怨，怎么老了还要伺候这家伙，心里很不是滋味。如果是你你会怎么选？还没到七八十岁呢，怎么会知道呢。到了那个年纪才会知道。</p><p>这几天看到好几对女生比男生高的情侣。原来外表也不是不了跨越的鸿沟，只是我把自己封闭起来了。我现在仍然没有丰富起来，也不用多么渴望。那种渴望只是一种索要式的情感需求，不是应当去追求的。我需要做的，只是一步一步地，让自己成为一个更完整的人，仅此而已。</p><h3 id="5-1"><a href="#5-1" class="headerlink" title="5.1"></a>5.1</h3><p>今天被财金的队友拉去散步了，跟他谈了很多，少有地从社交中获得了能量。（可以说是在向他吐不快？hhh）能遇到一个和自己在学习生活中有同感的人挺难得的。人与人之间的关系还是比想象的重要的，要学会与别人相处。今天在某社交媒体上发表了一些对于学校学习氛围的看法，不巧收获了很多很多评论。现在想来，或许也是自己太在意周围的环境，而没有那么注意自己想做的事了。有人鼓励我，和我发出共鸣。但有一个评论说的是 “笑死”。原来这样子的想法是可笑的啊，原来我现在的状态，表达出来的自我，在他人看来是可笑的啊。确实应该多想一想，把精力放在眼前事，做好自己。脱离做题家的桎梏，打破信息茧房，最简单的事就是认真去完成自己已经列出的学习计划。集中精神。希望自己尽快拿出状态，年底拿牌。</p>]]></content>
    
    
    <summary type="html">每天出去跑步是少有的感受身边环境和放下各种破事认真思考的时候。</summary>
    
    
    
    <category term="寻路" scheme="https://eykenis.github.io/categories/%E5%AF%BB%E8%B7%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>关于博客新一轮改造的说明</title>
    <link href="https://eykenis.github.io/2022/04/22/New-Beginning/"/>
    <id>https://eykenis.github.io/2022/04/22/New-Beginning/</id>
    <published>2022-04-22T06:41:43.000Z</published>
    <updated>2022-04-22T06:55:02.988Z</updated>
    
    <content type="html"><![CDATA[<p>最近觉得博客是时候重新整理并改造了，毕竟其早就不是一个算法博客了。</p><p>首先要做的第一步就是重新分类，本博客新的分类将会有：</p><ul><li>观止，欣赏文艺作品。</li><li>问道，终身学习。</li><li>寻路，拨云见日，寻找生命之意义。</li><li>“旧事” 和 “XCPC”，两个不是很正式的分类，未来可能删除。</li></ul><p>Wordpress 时期的博客还处于混沌阶段，什么都往上乱写……但是也舍不得删，所以除了 XCPC 相关的全部扔到 “<strong>旧事</strong>” 分类中去吧。</p><p>关于<del>新时期</del>的牢骚和随笔，全部合并到 ”<strong>寻路</strong>“ 分类中去。漫漫长路，上下求索，寻找意义。</p><p>关于所有和学习相关的，都会进入 “问道” 分类。覆舟斟寻，何道取之？此天问之道也。</p><p>平日里玩游戏，读书的读后感，玩后感，对游戏的评价，思考等，都将进入 ”<strong>观止</strong>“ 分类。</p><p>以后不会在这更新 XCPC 算法相关了（尽管我仍然在学）。</p><p>所以所有旧博文全部删除留档本地也不是没有可能 ~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近觉得博客是时候重新整理并改造了，毕竟其早就不是一个算法博客了。&lt;/p&gt;
&lt;p&gt;首先要做的第一步就是重新分类，本博客新的分类将会有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;观止，欣赏文艺作品。&lt;/li&gt;
&lt;li&gt;问道，终身学习。&lt;/li&gt;
&lt;li&gt;寻路，拨云见日，寻找生命之意义。&lt;/</summary>
      
    
    
    
    <category term="寻路" scheme="https://eykenis.github.io/categories/%E5%AF%BB%E8%B7%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>读 Operating Systems - Three Easy Pieces</title>
    <link href="https://eykenis.github.io/2022/04/20/OSTEP-Reading/"/>
    <id>https://eykenis.github.io/2022/04/20/OSTEP-Reading/</id>
    <published>2022-04-20T15:56:53.000Z</published>
    <updated>2022-04-24T03:19:39.536Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>前半个学期基本上没怎么碰过三大系统（OS，CS，DB），到了期中复习才意识到应该好好学一学了。所以我打算在接下来的半个学期将 OSTEP 和 CSAPP 好好读一读，特别是 OSTEP<del>（毕竟 CSAPP 很多内容很难啃，不是那么好读，而 OSTEP 全是废话）</del>。</p><p>我将会在<a href="https://github.com/Eykenis/OSTEP-Reading">这里</a>详细地记录自己的读书笔记。一起加油！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;前半个学期基本上没怎么碰过三大系统（OS，CS，DB），到了期中复习才意识到应该好好学一学了。所以我打算在接下来的半个学期将 OSTEP 和</summary>
      
    
    
    
    <category term="问道" scheme="https://eykenis.github.io/categories/%E9%97%AE%E9%81%93/"/>
    
    
    <category term="OS" scheme="https://eykenis.github.io/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>KERenderer ——我的软渲开坑啦</title>
    <link href="https://eykenis.github.io/2022/04/04/KERenderer-%E2%80%94%E2%80%94%E6%88%91%E7%9A%84%E8%BD%AF%E6%B8%B2%E5%BC%80%E5%9D%91%E5%95%A6/"/>
    <id>https://eykenis.github.io/2022/04/04/KERenderer-%E2%80%94%E2%80%94%E6%88%91%E7%9A%84%E8%BD%AF%E6%B8%B2%E5%BC%80%E5%9D%91%E5%95%A6/</id>
    <published>2022-04-04T02:25:51.000Z</published>
    <updated>2022-07-14T09:15:17.393Z</updated>
    
    <content type="html"><![CDATA[<p>项目链接：</p><p><a href="https://github.com/Eykenis/KERenderer">Eykenis/KERenderer: My first attempt to build my own software renderer (github.com)</a></p><p>进行了一个月左右的 CG 基础知识学习后，我终于依葫芦画瓢写出了软渲的基本框架。当然，如果没有 <a href="https://github.com/ssloy/tinyrenderer">ssloy/tinyrenderer</a>，我肯定是办不到的。设计方法和具体代码大量参考了 tinyrenderer，而且读取 .obj 和 .tga 文件部分是直接 copy 的。.obj 还好，.tga 的文档对我来说还是有点难啃了（英语苦手），所以只能照搬了 qwq. 文件读取就当是套用了一个外部接口吧。当然，我还希望能找到 .png，.fbx 的接口。</p><p><strong>从这个页面 post 出的接下来几个月内，我会不断更新完善我的 这个 software renderer，尽可能涉及到所有我学过的，在 Unity 中用 Unity Shader 实现过的渲染方法。</strong></p><h2 id="目前支持的功能-0-2-0"><a href="#目前支持的功能-0-2-0" class="headerlink" title="目前支持的功能  (0.2.0)"></a>目前支持的功能  (0.2.0)</h2><ul><li><strong>深度测试</strong></li><li><strong>透视投影 (raw)</strong></li><li><strong>Flat Shading</strong></li><li><strong>Gouraud Shading</strong></li><li><strong>Phong Shading</strong></li><li><strong>Z-Buffering</strong></li><li><strong>背面剔除</strong></li><li><strong>高光以及 Blinn 光照方法</strong></li><li><strong>单张UV纹理渲染</strong></li></ul><p><a href="[Release beta 0.2.0 · Eykenis/KERenderer (github.com">pre release</a>](<a href="https://github.com/Eykenis/KERenderer/releases/tag/0.2.0">https://github.com/Eykenis/KERenderer/releases/tag/0.2.0</a>)) 目前支持使用 Blinn-Phong 渲染两个模型（完整的 BRDF —— 环境光、漫反射光和高光），可以按键盘方向键以旋转和缩放。目前只能在 Windows 上运行，源代码为 Visual Studio 工程。</p><p>实际上源代码中也有 Phong/Gouraud 漫反射、Z-Buffring 深度图和 Flat Shading 的实现方式，不过该 release 的主入口没有使用。</p><h2 id="更新计划（按大致优先度排序）"><a href="#更新计划（按大致优先度排序）" class="headerlink" title="更新计划（按大致优先度排序）"></a>更新计划（按大致优先度排序）</h2><h3 id="肯定会更新的东西"><a href="#肯定会更新的东西" class="headerlink" title="肯定会更新的东西"></a>肯定会更新的东西</h3><ul><li><p><strong>高度图</strong></p><p>和UV一样好加。</p></li><li><p><strong>阴影</strong></p><p>最重要的还是尽可能少点宏，把 lightDir 抽象出来，别写到宏里改不了了。抽象出来之后其实是做一个测试就行了。</p></li><li><p><strong>多纹理（.mtl）支持</strong></p></li><li><p><strong>抗锯齿</strong></p></li><li><p><strong>TBN法线贴图</strong></p><p>  有些模型的 .obj 文件没有存储法线信息，这就导致我现在没法渲染出这些模型，只能把 Flat Shading 加回来或者是用 Z-Buffering. 除开这个需求，法线贴图也是很有必要的。难点主要在切线空间的转化。</p></li><li><p><strong>基于 RampTex 的非真实感渲染</strong></p></li><li><p><strong>轨道式相机</strong></p></li><li><p><strong>齐次边界裁剪</strong></p></li><li><p><strong>透明度测试/混合</strong></p></li><li><p><strong>Cubemap 以及 Skybox</strong></p></li><li><p><strong>Make it cross-platform</strong></p><p>主要还是得去了解 linux 和 macOS 的图形接口</p></li><li><p><strong>基于物理渲染 PBR</strong></p><p>理论看了那么多也没记住，什么时候能实践？</p></li><li><p><strong>基于 Cubemap 的环境反射</strong></p></li></ul><p>以上更新完之后就算 release 1.0 啦！</p><h3 id="可能会更新的东西"><a href="#可能会更新的东西" class="headerlink" title="可能会更新的东西"></a>可能会更新的东西</h3><ul><li><strong>动画</strong></li><li><strong>多文件格式支持</strong></li><li><strong>Image-based lighting</strong></li><li><strong>渲染多物体的合适渲染顺序，渲染路径</strong></li><li><strong>多光源</strong></li></ul><h3 id="一些也想加进来但不咕可能性比较小的东西"><a href="#一些也想加进来但不咕可能性比较小的东西" class="headerlink" title="一些也想加进来但不咕可能性比较小的东西"></a>一些也想加进来但不咕可能性比较小的东西</h3><p>（主要是后处理）</p><ul><li><strong>边缘检测</strong></li><li><strong>Mipmap</strong></li><li><strong>线性缓冲</strong></li><li><strong>高斯模糊</strong></li><li><strong>Motion blur（天哪）</strong></li><li><strong>不止于 RampTex 的卡渲</strong></li><li><strong>噪声模拟消融效果</strong></li><li><strong>水波效果，FFT Ocean</strong></li></ul><p>（基本上有一些了解的全贴上来了，后面这些随缘吧）</p>]]></content>
    
    
    <summary type="html">你已经是一个19岁的孩子了，要学会自己写一个软渲染器了</summary>
    
    
    
    <category term="问道" scheme="https://eykenis.github.io/categories/%E9%97%AE%E9%81%93/"/>
    
    
    <category term="CG" scheme="https://eykenis.github.io/tags/CG/"/>
    
  </entry>
  
  <entry>
    <title>在 ECS 服务器（Ubuntu）上使用 Mirai 机器人</title>
    <link href="https://eykenis.github.io/2022/02/24/Use-Mirai-in-ur-ECS-server/"/>
    <id>https://eykenis.github.io/2022/02/24/Use-Mirai-in-ur-ECS-server/</id>
    <published>2022-02-24T11:01:20.000Z</published>
    <updated>2022-04-22T06:37:43.753Z</updated>
    
    <content type="html"><![CDATA[<p>最近玩了一会 Mirai 机器人框架，在本地的话不说多少占了电脑资源，一直开着也不太好。但耐不住各群群友都想深夜看 bot 发病，正好想起来上学期学校发的 200 元华为云代金券没用，故斥巨资 1.83 RMB 买了一台配置最低的 ECS 服务器。正好，从零开始记录一下安装 Mirai 以及使用的过程。我这里使用的镜像是 Ubuntu 20.04.</p><h2 id="1-登录并安装-Mirai-Console-Loader"><a href="#1-登录并安装-Mirai-Console-Loader" class="headerlink" title="1. 登录并安装 Mirai Console Loader"></a>1. 登录并安装 Mirai Console Loader</h2><p><img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/20220224190641.png" alt=""></p><p>利用华为云自带的 CloudShell 登录到实例。（不过比较推荐 PuTTY）</p><p>为了尽可能地让我们的工作更简单，使用 <a href="https://github.com/iTXTech/">iTXTech</a> 的 iTXTech MCL。其在 github 上自带 <a href="https://github.com/iTXTech/mcl-installer">Installer</a>.</p><p>这里我选择 <a href="https://github.com/iTXTech/mcl-installer/releases/download/v1.0.3/mcl-installer-1.0.3-linux-amd64">mcl-installer-1.0.3-linux-amd64</a>，执行命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/iTXTech/mcl-installer/releases/download/v1.0.3/mcl-installer-1.0.3-linux-amd64</span><br></pre></td></tr></table></figure><p><code>wget</code> 是 linux 系统常用的从 url 下载文件的命令。</p><p>如果下载完成后你想直接启动这个可执行文件是不行的，会提示没有权限。</p><p><img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/20220224195931.png" alt=""></p><p>这个时候，执行以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod u+x mcl-installer-1.0.3-linux-amd64</span><br></pre></td></tr></table></figure><p><code>chmod</code> 是一个修改文件权限的命令。其中 <code>u</code> 表示目标是用户，<code>x</code> 表示执行权限，<code>+</code> 表示给与。</p><p>缺省的安装过程是可接受的（至少对我这个啥也没有的新机是这样），一路回车等待安装完成，Y 和 N 都不用按了（</p><p><img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/20220224200506.png" alt=""></p><p>根据提示，这个时候只需要 <code>./mcl</code> 就可以启动 Mirai Console 了.</p><p>启动后，继续等待安装。</p><p>完成之后重启，再次 <code>./mcl</code>，成功启动。</p><p><img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/20220224200925.png" alt=""></p><h2 id="2-文件迁移到远程机上"><a href="#2-文件迁移到远程机上" class="headerlink" title="2. 文件迁移到远程机上"></a>2. 文件迁移到远程机上</h2><p>现在我们把原来在 本地 Windows 上的插件迁移过去。</p><p>为了确保记录都成功迁移，记得将 plugins、data、conf 三个文件夹都粘贴过来。</p><p>为了能有粘贴功能，我们在本地 Windows 机安装 <a href="[Download PuTTY: latest release (0.76">pscp</a> (greenend.org.uk)](<a href="https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html))，下载完成后将其拷贝到">https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html))，下载完成后将其拷贝到</a> C:\Windows\System32 下。</p><p>打开本地的 PowerShell，输入 <code>pscp</code>，确认 pscp 已经正确安装。</p><p><img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/20220224203057.png" alt=""></p><p>好，现在开始拷贝。输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pscp -r dir name@IP:target</span><br></pre></td></tr></table></figure><p>其中，dir 改为要拷贝的目录，name 为远程主机名，IP 为 IP地址，target 为目标目录。</p><p><img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/20220224203810.png" alt=""></p><p>成功粘贴过来之后，再将这些目录下的东西都拷贝到 mcl 相应的目录中去。（或者你直接 pscp 到目标目录也行）</p><p>等待拷贝全部完成后，再次 <code>./mcl</code> ，发现所有插件都装上了。现在尝试登录机器人。</p><p><img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/20220224204944.png" alt=""></p><p>发现需要验证滑动验证码。没有办法，查看 <a href="https://github.com/project-mirai/mirai-login-solver-selenium">project-mirai/mirai-login-solver-selenium: SliderCaptcha solver (github.com)</a></p><p>读我文档，按照文档所说一步一步来吧 QWQ。总之，登陆成功后， Mirai 又可以正常使用了。</p><hr><p>呃，这下水文章了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近玩了一会 Mirai 机器人框架，在本地的话不说多少占了电脑资源，一直开着也不太好。但耐不住各群群友都想深夜看 bot 发病，正好想起来上学期学校发的 200 元华为云代金券没用，故斥巨资 1.83 RMB 买了一台配置最低的 ECS 服务器。正好，从零开始记录一下安装</summary>
      
    
    
    
    <category term="问道" scheme="https://eykenis.github.io/categories/%E9%97%AE%E9%81%93/"/>
    
    
    <category term="Mirai" scheme="https://eykenis.github.io/tags/Mirai/"/>
    
    <category term="Linux" scheme="https://eykenis.github.io/tags/Linux/"/>
    
    <category term="聊天bot" scheme="https://eykenis.github.io/tags/%E8%81%8A%E5%A4%A9bot/"/>
    
  </entry>
  
  <entry>
    <title>万字长评《美少女万华镜 - 罪与罚的少女》</title>
    <link href="https://eykenis.github.io/2022/02/23/Bishoujo-Mangekyo-Tsumi-to-Batsu-no-Shoujo/"/>
    <id>https://eykenis.github.io/2022/02/23/Bishoujo-Mangekyo-Tsumi-to-Batsu-no-Shoujo/</id>
    <published>2022-02-23T14:22:27.000Z</published>
    <updated>2022-07-09T14:15:47.666Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如果你是未成年人，请现在立刻马上关掉本页面，这篇-gal-评测不适合未成年人阅读。"><a href="#如果你是未成年人，请现在立刻马上关掉本页面，这篇-gal-评测不适合未成年人阅读。" class="headerlink" title="如果你是未成年人，请现在立刻马上关掉本页面，这篇 gal 评测不适合未成年人阅读。"></a>如果你是未成年人，请现在立刻马上关掉本页面，这篇 gal 评测不适合未成年人阅读。</h1><blockquote><p> <em>我从来不哭泣，也从来不发笑。</em></p><p> ​                                            <em>——夏尔 · 波德莱尔《恶之花》</em></p></blockquote><h2 id="Part-0-前言"><a href="#Part-0-前言" class="headerlink" title="Part. 0 前言"></a>Part. 0 前言</h2><p>第一次接触《镜4》是在高二的时候，我很清楚地记得那是国庆假期，之后就是校运会。当时好像只是将其当做拔作玩，很多部分的剧情都跳过了，然而只是随便看了两眼后面的剧情<del>，却也对我当时幼小的心灵造成了不小的创伤</del>。</p><p>都说八宝备仁老师的画严重影响到广大粉丝的身体健康，那么玩过《镜4》之后，我只想说，八宝备老师的画是必要条件，然而还有一个必要条件就是剧本的正常。</p><p>记得当时（17、18年）这款游戏因为各种热度 buff 而被推上风评的神坛：</p><ul><li>女装大佬</li><li>百合</li><li>万华镜前 3.5 部的好评</li><li>一代更比一代强的作画</li><li>等等……</li></ul><p>然而最热的一段时间过去，越来越多的玩家通关之后，给出的评价却开始两极分化，有说剧情极好的，有说玩得口区的。</p><p>至于我，也没有多成熟的见解，只是觉得其中的人性、伦理、道德、阴谋，足以让我久久回味，久久深思。致郁是一定有的，只不过因为是二刷了（虽然一刷没有仔细看，但是也知道剧情梗概），再加上相比于当时，现在已经成年或许心理承受能力会更强一些，也就没有那么强的感受吧（高二快速推完之后人有点魔怔了，确确实实在大半个月的时间里心态都处于不正常的状态）。</p><p>4 好玩吗？我的评价是好玩。剧情令人回味，发人深省，展现了以前的作品所没有展现的——单纯的爱意背后的“恶”。个人认为其缺憾可能就是剧情虽然完成度较高，但总觉得表达的思想有点怪异，或者故事在主题还没有完全升华时就戛然而止了。《罪与罚》，“罪”已覆水难收，”罚”却难觅踪影。所以尽管叙事已经足够，但总觉得作者有什么还没说，玩家可能还会期待什么，但他就是没说。</p><p><strong>好了！如果你不想被剧透，那么读到这里，大概可以离开了！qwq</strong></p><hr><h2 id="Part-1-剧情概述（流水账）"><a href="#Part-1-剧情概述（流水账）" class="headerlink" title="Part. 1 剧情概述（流水账）"></a>Part. 1 剧情概述（流水账）</h2><p>只是描述一下大概的剧情，尽量梳理清楚发生了啥，跟评没啥关系。</p><p>（会不会有很多擦边的地方？）</p><p><em>Tips：以下为  true end 线</em></p><p>伴随着略显阴郁的主菜单 bgm，进入游戏……</p><p>《美少女万华镜4》讲述的故事是弟弟夕摩和姐姐夕莉的不伦恋情。故事一开始，男主觋夕摩和他的舅舅在过世的母亲墓前祭拜。舅舅榊由纪夫在被家族里的政府官员（夕摩的父亲）追查逃税后逃到新加坡，后来在那里做出了一番生意。</p><p>然而祭拜时，由纪夫突然出现了库斯莫呼吸（糖尿病导致的酸性中毒表现出的症状），接着因为心力衰竭过世了。男主在舅舅不省人事时，却凑到他耳边轻轻说道：<strong>叔父……你必须得受到惩罚才行呢……</strong></p><p>这绝对不是什么废萌简单纯爱的故事。</p><p><img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/bg_%E7%97%85%E5%AE%A4.png" alt=""></p><p>画面一转，男主因为疾病缠身而住院，最近因为康复较好，姐姐夕莉决定将弟弟夕摩接出院。</p><blockquote><p>此处背景：夕摩的母亲自焚身亡，原来的家也被烧毁，所以他们已经搬到了新家</p></blockquote><p>男主夕摩一直对自己的姐姐有着特别的爱（？），而在回到家后，夕摩也没有马上去上学，而是在家继续观察了一段时间来适应医院外的生活。期间姐姐夕莉是一直在上学的，且一直都和舅舅由纪夫有书信往来。在夕莉眼里，由纪夫是这个扭曲家庭中为数不多可以信任的人了，剩下的便是由纪夫那边的管家高桥先生和亲弟弟夕摩了。</p><p>在家休养期间，男主一直做着<strong>日常功课</strong>，并在外出的时候与两名女生有一面之缘。一次是在游乐园遇到并安慰了一个娇小的女生，另一次是在街上遇到了一个行为怪异的女生。每天夕莉都会回家做饭，而父亲则冷眼相对，在夕摩面前从不发笑，只是冷嘲热讽。父亲眼里，只有夕莉是有未来的，而夕摩就是有个废人。但夕莉一直都站在夕摩的一边，安慰夕摩，帮他说话，照顾他。</p><blockquote><p>若美丽的夕莉是光的话，我只不过是其影子罢了。光越是耀眼，影越是浓重。所以我，一定是全黑的。</p><p><em>有朝一日你见我时肯定会笑着说、</em></p><p><em>这张脸也过于苍白了吧、</em></p><p><em>如同被秋风吹打无花果叶一般、</em></p><p><em>如同被遗弃的狗。</em></p><p><em>而事实诚如你所说、</em></p><p><em>或许比丧家狗更惨</em></p><p><em>我自己不时思考着</em></p><p><em>也许我本身就是个悲剧</em></p><p>​                                <em>——中原中也《阴凉的秋》</em></p></blockquote><p>然而，住着住着，抑制不住对姐姐情感的夕摩大肆在夕莉的房间里 OO，翻找她的原味胖次，然后拿来……</p><p>最初几天还好，男主弄完就把该洗的都洗，该整理好的都整理好了。可是男主越玩越花（），终于有一天姐姐恰好早退回家，将夕摩抓了个正着，然后夕莉就开始用脚欺负弟弟（各种弟弟）。</p><p>好了，到这里姐弟的行为已经非常反常了。不管是哪对姐弟都不会这样吧 qwq！</p><p>所以，夕摩说：“我与姐姐的关系已经永远改变了。”</p><p>一层一层，撕破面具，然后看见血肉。</p><p>接着，女主解释道，早退是因为夕莉去帮夕摩买新学校的校服了，是要夕摩来上学了。然而……夕莉拿出来的却是女装。原来姐姐是要他和自己一起去读女校。夕摩吃惊之余还是忐忑地接受了。毕竟他体格纤细，声调也偏高，即使装成女孩子，也没有人会认出来，甚至会将他和姐姐弄混。</p><p>“夕莉和我是一体的，我照向镜子，镜子里就是她。”</p><p>虽然夕摩很不情愿，但也只能听姐姐的了。（其实姐姐是想能多陪在她身边，不想让夕摩离自己太远）</p><p>然后，女装没有买完，姐姐带着弟弟去女装店顺便把其他部位以及放假穿的便服也一块买了（（期间姐姐把弟弟堵在更衣室，呃。</p><p>来到学校，巧合的是之前曾偶遇的两个女生竟然都是同班同学！一个是开朗活泼的妹系小女孩铃森一花和神秘系痴女御殿场镜子。</p><p>四人重组了学校的文艺部，成为了好闺蜜（？）。（镜子这个人书柜上全是百合H文。而且是夕莉和夕摩的死忠粉 qaq）在这之前，游戏就多次出现诗句，大多都是带着悲伤情感的（不如说全部），文艺部组建之后诗句更多了，而且几乎都是各种暗示/明示，表现人物心理。</p><p>在学校的生活，刚开始是很美好的，夕摩也感觉自己正在重新融入现实，而不再是之前那个停止了一切经济社会活动的废人。然而，<strong>所谓现实，就是像沙堡一样脆弱无常而又非常容易被毁坏的东西</strong>。</p><p>早在刚入学没多久，学校保健室的藤堂咲老师就让夕摩感觉很不舒服。虽然老师人很美，可夕摩却在她身上感受到强烈的恐怖感。</p><p>一次放学后偶然的机会，夕摩在教学楼转悠的时候看到了惊人的一幕——她竟然用假东西和镜子干不可描述的事。目睹全程的夕摩受到极大的震撼。后来，在夕摩感冒的时候，藤堂老师借机以照顾夕摩为借口，下药后发现夕摩是男孩子，于是便夺走了夕摩的第一次……（好恐怖，玩到这里的时候确实有点令人作呕）夕摩遭遇心理创伤，再次休学，差点寻死，好在被夕莉救回。虽然夕摩无法面对这个现实，怎么也不肯将事件完整地告诉夕莉，但夕莉也知道是藤堂老师做的了。于是她利用自己和夕摩长的很像这一点揭发了藤堂老师的怪癖，使其被调查并离职。</p><p>这期间，夕莉一直在安慰夕摩，也第一次向夕摩敞开了自己的心扉<del>（和身体）</del>。二人没羞没臊的生活初步开始了吧（</p><p>夕莉知道夕摩遭受了不幸，也开始自责自己将其送到女校。“我本以为这会是最好的选择，可我是多么的自私。”夕莉提出让夕摩回到普通学校。夕摩也觉得这会是最正常的道路。可是他再也不想离开姐姐了，他讨厌父亲，讨厌老师，讨厌街道上说三道四的行人。除了夕莉他谁也不想见到，他不愿意再离开夕莉，他鼓起勇气回去读女校了。</p><p>回校后，夕摩过得比想象的要好。同学们一如既往的和姐弟玩得很好，文艺部的四位——夕摩、夕莉、镜子和一花商议在文化祭开办了主题咖啡馆，期间夕莉 cosplay 女仆（其实是 neta 初音未来），和夕摩没羞没臊的生活又开始了。二人动静过大，玩的过于大胆，以至于一花也开始起了疑心。</p><p><img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/bg_%E5%AD%A6%E5%9C%92_%E9%83%A8%E5%AE%A4%E7%A5%AD_%E6%98%BC.png" alt=""></p><p>（其实，一花是个很容易被欺负的孩子。在一次受到原来社团的同学欺负时，夕摩勇敢地站出来保护并鼓励了她，也是这时，夕摩的大力气和相对没有那么纤细丝滑的手让一花意识到夕摩好像是个男生，而且和游乐园遇到的那个男生的手感觉很相似）</p><blockquote><p>另外此处还有个伏笔，被驱逐出校的藤堂老师突然联系镜子，并说有要紧事和她商量。这个要紧事让镜子十分为难。</p></blockquote><p>文化祭结束后，二人恩爱地回了家，却发现父亲醉倒在家中。一直都是职场精英的父亲最近接连遭到左迁，在家大发酒疯。由于夕莉去买酱油了，夕摩先到了家。</p><p>醉酒的父亲见女装回家的夕摩，把他当成了夕莉。接着开始说诸如夕莉你才是家里唯一的希望，夕摩那个混蛋就该离开这里之类的话。夕摩感到一阵恶心，再也忍受不了，跑出了家，然后撞见了夕莉。二人对父亲的不认可达成一致，夕摩却突然开口说要除掉他。夕莉吃惊于事情还不应该发展到这个地步，便吓得哭了出来。在一阵心理斗争之后，夕莉又说，不能让弟弟来，一定要让姐姐来保护夕摩，一切都要姐姐来。</p><p>二人回家后，父亲仍然处在神志不清的状态。于是夕莉喂了安眠药让父亲消停下来。此后，夕莉半夜悄悄去了弟弟房间。</p><p>第二天，父亲反常地起来的比较早，发现了夕莉和夕摩在一起，便开始对夕摩暴力相向。不过因为夕莉护着，父亲最后还是骂骂咧咧地出门了。之后，夕莉接到了不明座机来电，也没有和夕摩解释便一个人出去了。接着，夕摩也接到了镜子的电话，夕摩去车站接镜子，镜子却说要去夕摩家中。到家之后，镜子乘机给夕摩注射了麻药（这特么是怎么乘机的）并做了一通胡乱不清的解释后（总之就是藤堂老师早就告诉她夕摩是男生了）说要帮夕摩。夕摩因为麻药几乎无力反抗，但还是强忍着模糊的意识晓之以情动之以理，说服了镜子。夕摩也知道了叫夕莉出去的是藤堂老师。于是夕摩和镜子马上出门去救夕莉了。</p><p>原来，藤堂老师早在保健室遇到夕摩的时候就录像留证了，现在要用把这个发到网上来威胁夕莉。可她和姐弟相比还是太正常了。夕莉根本不在乎除了夕摩以外世界上任何一个人的态度。她完全不害怕，并且掏出一把水果刀割腕明志，扬言再见到藤堂一次就出刀。藤堂老师被吓跑了，夕莉第二天在学校也狠狠地扇了镜子一耳光。</p><p>然而第二天，一花又把夕摩单独叫出来，冷不丁地向夕摩表白。夕摩拒绝之后，一花尴尬地说女孩和女孩果然还是不行的呀……夕摩当然也知道，一花肯定是看穿自己了。</p><p>恰逢圣诞节，夕莉和夕摩在外面逛街，夕摩来到爱情宾馆向夕莉疯狂灌输爱意。二人没羞没臊了一整天。</p><blockquote><p> 回家后，夕莉看着依然提不起精神的父亲开始回忆往事：</p><p>母亲夕香里总是阻止夕莉和夕摩的亲密举动，也总是站在夕摩那边。这和只对夕莉寄予希望的父亲刚好相反。夕莉开始对母亲恶语相向，以至于母亲也意识到自己扭曲的心理。当天晚上，家里便起了大火。睡得没那么死的夕摩叫醒夕莉逃出来了，而母亲却永远葬身火海。因为工作没有回家的父亲开始责骂夕摩，并怒骂夕摩为什么没有救母亲出来，为什么没有替夕香里去死。夕摩自此精神失常，于是便住进了医院。</p></blockquote><p>因为夕摩还要去图书馆查点资料的原因（伏笔），夕莉又先于夕摩回家了。这次，父亲仍然大醉，并将夕莉错看成了夕香里，意欲图谋不轨。无可奈何之际，夕莉从厨房散落的刀架上抽出一把，出手了。夕摩回家，大惊失色，便开始安慰夕莉。二人不知如何是好，于是留在家里度过了浑浑噩噩且没羞没臊的三天（这也太……）。</p><p><strong>自此，夕摩的计划已经基本成功了，最后一步就是要出逃了。</strong>（没错，剧情到这里突然告诉你，各种各样 B 事的发生，大多都是夕摩设的局）</p><p>原来，夕摩没多大的时候就意识到，夕莉和自己也有同样的情感。而后来夕莉大骂母亲那天，其实是夕莉走后，夕香里打算上吊，但失败了。夕摩的出现给了夕香里一点希望。可是夕摩没有救夕香里，他落井下石，掐死了母亲，然后一把火烧掉了原来的家。夕摩带出来的物品，只有一个鸟笼和一顶假发（是姐姐在演艺圈的短暂时间里所用到的）料到的父亲的咒骂，故意装傻，被家人送进医院。由于本来就没有精神问题（我觉得有），夕摩在精神病院中成为了模范病人，并开始给舅舅写信，称父亲虐待自己。这时，夕摩也知道了，父亲觋礼次郎不是亲生父亲，而夕香里和舅舅由纪夫才是自己和夕莉的亲生父母（好家伙，xp 代代相传是吧）。舅舅逃到新加坡后生意的成功，夕摩看在眼里。且舅舅也十分疼爱夕摩和夕莉。于是夕摩提出要舅舅收养自己，由纪夫同意了（于是夕摩便获得了由纪夫的财产继承权）。后来，夕摩因为是模范病人获得了一次外出的机会。舅舅也悄悄飞回来，二人前往祭拜母亲。由于舅舅患有糖尿病，需要打胰岛素，夕摩悄悄更换了注射器，于是舅舅在注射后没多久就出现了钾血症，而症状又与库斯莫呼吸相似，于是谁也没有怀疑，谁都以为舅舅是因为糖尿病的急性症状过世的。夕摩秘密向管家高桥先生保证，舅舅过世后自己会支付比他更高的薪酬，于是管家也开始配合夕摩的计划。</p><p>夕摩模仿由纪夫的笔迹，写信给自己的姐姐，并跟姐姐说可以接夕摩出院了。此后，夕莉一直对舅舅的过世不知情，也一直在和“舅舅”书信来往。于是，看上去强势的夕莉其实是在夕摩的掌控中……（哈人）回家后，夕摩开始慢慢表现对夕莉的爱意，接受女装，强忍藤堂老师的侮辱，又慢慢给父亲的食物里下药，于是才有后面父亲逐渐精神失常，每日暴走的情况出现。为了更加保险，夕摩没有让自己出手，而是利用堆父亲下药，假借姐姐的正当防卫杀死了父亲。计划的最后一步——出逃。高桥秘书为他们安排了签证护照，两人三天之后便逃亡到了新加坡，二人世界正式开启。至此，夕摩的<strong>日常功课</strong>终于完结了（所以你小子从头到尾就没有在学习是吧）</p><p>夕莉怀上了夕摩的孩子，又生出一对异性双胞胎……什么命运的捉弄。</p><p>（true end 终）</p><p>（流水账结束 qwq）</p><h2 id="Part-2-人物分析"><a href="#Part-2-人物分析" class="headerlink" title="Part. 2 人物分析"></a>Part. 2 人物分析</h2><h3 id="觋夕香里"><a href="#觋夕香里" class="headerlink" title="觋夕香里"></a>觋夕香里</h3><p>整个家庭的不幸，源头都可以归结到夕香里身上。</p><p>夕香里年轻时曾当过演员，怀孕后急流勇退，回归家庭。在大众的眼中，她是持家的好妻子。然而真相是，榊夕香里和弟弟榊由纪夫有着特殊感情，怀上了由纪夫的孩子后，为了逃避他人的指责，榊家招来了一个新女婿作挡箭牌，而这个挡箭牌就是夕摩的“父亲”觋礼次郎。礼次郎入赘没几年便发现了由纪夫和夕香里的关系，于是开始打压由纪夫，利用财务省的职务之便以逃税名义追捕由纪夫。由纪夫只得出逃到新加坡。（可悲的是，礼次郎是真的对夕香里有感情的）</p><p>没有了由纪夫的夕香里寂寞难耐，她对眼前的礼次郎没有感情，每天看着自己的孩子思念着由纪夫。而夕香里和由纪夫的禁断之恋也充斥着扭曲的心理。随着孩子们的长大，夕摩越来越像由纪夫，而夕莉越来越像夕香里。由于控制不住对由纪夫的思念，夕香里较为偏爱夕摩，总之让他黏着自己，甚至对这尚在成长的亲儿子直接出手…（。。。）并由此对年幼的夕摩造成了不小的伤害。对于夕莉，母亲相对没有那么关心，并也总是在尝试说服夕莉走自己走过的演艺路。可是夕莉并不想当演员。虽然美若天仙的夕莉以艺名小尤莉娅（夕莉的日语发音为“尤利”）出道后收获大批粉丝，但她很快就隐退继续上学了。两个孩子进入青春期后，夕香里总是阻止着夕莉和夕摩的过近接触。其实光看这举动也挺正常的，但不正常就在于她自己对夕摩下狠手……</p><p>后来又一天，夕莉终于再也忍受不住，开始大骂夕香里。夕香里的内心是极为混乱的。她知道自己身为母亲做了许多缺德事。面对夕莉的指责，她开始陷入悲痛。夕莉离开后，她在悲伤之余选择了上吊自杀。这时，夕摩进了房间，看到夕摩的夕香里好像有了一丝希望，狼狈地挣扎着，此时夕香里的模样与平日美丽的样子完全是两个人，在夕摩看来，丑陋至极。绳断了，夕香里掉了下来。夕摩走到她面前，她开始向夕摩哭诉，问她是不是来救妈妈了，向他控诉夕莉的冷淡与无情，更瘆人的是竟然说自己的亲女儿是“恶魔”。</p><p>听到这里的夕摩对母亲再也没有怜悯之情。他捏紧了母亲的脖子，毫不动摇，力气越来越大。</p><p>夕香里的一生是罪恶的。他与由纪夫的禁断之恋，残害了两个孩子，并将一个毫无关系的外人礼次郎牵扯进来，使其也陷入这个家庭悲惨的旋涡。然而这一次，她的罚也到此为止了。</p><h3 id="觋夕莉"><a href="#觋夕莉" class="headerlink" title="觋夕莉"></a>觋夕莉</h3><p><img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/%E5%A4%95%E8%8E%89_%E4%B8%AD_%E5%88%B6%E6%9C%8D_2_%E9%80%9A%E5%B8%B808.png" alt=""></p><p>如果你没有玩到 true end，而是普通的 happy end（虽然我觉得一点也不 happy），没有揭示夕摩的阴谋，那么夕莉就是操纵大局的人，她带着夕摩面对了家庭的各种苦难，最后和夕摩逃到新加坡过着二人世界。但如果你玩到 te，你可能会觉得夕莉简直就是一个提线木偶，任由夕摩掌控。然而如果更进一步分析二人的心理，我倒认为，就算没有夕摩设下的局，二人的结局也会相似，毕竟夕莉是绝不会离开夕摩的。夕摩在陈述自己计划的时候，说道他当时还觉得夕莉拥有自我，如果放着不管的话，肯定又会想去做偶像之类的东西了。真的如此吗？就玩到这里，我觉得就算夕摩什么也不做，夕莉去做偶像也是天方夜谭。夕摩自以为自己控制住夕莉，她才不会离开。实际上夕莉也并不傻，就算夕摩不设局，夕莉也绝无可能踏上其他的道路。夕摩所做，其实也是夕莉所想做的。到这里有种“看山是山，看山不是山，看山又是山”的感觉。</p><p>从夕莉的视角看来，舅舅由纪夫自始至终一直健在，就算每次电话都是高桥管家接听的，她也不怀疑是由纪夫身体不适，不方便接电话的说法。在她看来，母亲也是她害死的，她也以为是自己的过激言语导致母亲自焚，对其他事件一无所知。其实剧情中还有一处伏笔，就是夕莉在看向夕摩的眼睛的时候，感叹道夕摩的眼睛总是有一种洞穿一切，知晓一切的深邃感，让她觉得自己不如夕摩美丽。（当然，在夕摩看来，夕莉纯洁无瑕的身体也绝不是自己这具深受玷污的“躯壳”所能比的）</p><p>相对夕摩癫狂的爱，夕莉的爱也有过之而无不及。为了保护弟弟而对好友大打出手，辱骂亲人，以极端的方式恐吓想要加害弟弟的人……夕莉甘愿走进夕摩构筑的“鸟笼”。夕莉的恶，是纯洁而高傲的。她的占有欲十分强大。与其说她爱着夕摩，不如说是扭曲疯狂又极端的想要掌控欲望。</p><p>如果你在一花告白时选择了接受，那么夕莉就会陷入疯狂，将夕摩步步相逼，直到夕摩也疯掉。“夕摩……你是无法从我这里逃掉的。”相应地，如果你在镜子麻醉夕摩时没有选择强忍着虚弱感说服镜子，而是接受了镜子，夕莉也会撕心裂肺，并逐渐疏远所有同学和亲人，几乎成为一个死人。所谓夕莉对夕摩的爱，实在太自私、疯狂了。</p><h3 id="觋夕摩"><a href="#觋夕摩" class="headerlink" title="觋夕摩"></a>觋夕摩</h3><p><img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/%E5%A4%95%E6%91%A9_%E4%B8%AD_%E3%82%AB%E3%83%BC%E3%83%87%E3%82%AC%E3%83%B3%E5%88%B6%E6%9C%8D_1_%E9%80%9A%E5%B8%B803.png" alt=""></p><p>没有玩到 true end 的同学只会觉得夕摩是个可怜又可恨的脆弱小男生，而知晓事件全貌之后，夕摩则是整部游戏中承载着最多罪恶的人。可以说是相较于他的母亲”青出于蓝“了。</p><p>夕莉小时候总是不喜欢夕摩交女性朋友，也不太支持他养小动物。夕摩收集的昆虫一个一个死去，或是被丢掉。除此之外，还有被他当做玩物的蟾蜍、金鱼以及小鸟。夕摩的乐趣就是将这些小动物关起来，仔细把玩。由于缺乏社交，夕摩小时候的乐趣几乎全部就寄托在这些小动物，以及夕莉的身上。贯穿始终的“鸟笼”，是<del>全文</del>游戏的核心线索。</p><p>小时候，夕摩捡到一只受伤的小鸟，她和夕莉一起把小鸟关在笼子里，想要治好小鸟的伤。夕莉总认为自己就像这只受伤的小鸟，不希望被牢笼束缚，想要冲破天空。夕摩知道姐姐的心思（这是怎么看出来的），于是夕摩偷偷杀死了小鸟，将其埋葬，假装小鸟已经挣脱，飞向天空。在夕摩和夕莉看来，这个污浊不堪的家也是一个鸟笼，将自己和夕莉禁闭起来。于是后来，他经过设计亲手烧毁了鸟笼，又慢慢地，他也将夕莉和那只小鸟重叠起来，在夕莉的心中构建一个叫做“爱”的新鸟笼。而谁知道，自始至终，在夕莉看来，夕摩都是那么的柔弱。</p><p>出院后，夕摩的“日常功课”就没停过。他一直都在构思计划，设局。夕摩的罪恶是无法得到救赎的。他不仅设法残害了亲生父母，也把懦弱潜逃的舅舅搭上了船（在夕摩看来，抛弃母亲的舅舅同样是可恶的，应当受到惩罚），在一花线中更是把单纯的一花当做热兵器，并且把原本最爱的夕莉也推下水。</p><p>鸟笼，是夕摩设计的化身；假发，则是计划的一环。夕摩在放火后也只带了这两个东西出来。</p><p><em>“想关住我的母亲，想关住母亲的父亲，他们都失败了。有形的东西，终将坏掉。已经不再需要有形的鸟笼了。无论关进鸟笼多少次，都无法真正关住人的心。</em></p><p>深谙这一切的夕摩狂气地构筑了一个崩坏的鸟笼。</p><h3 id="铃森一花"><a href="#铃森一花" class="headerlink" title="铃森一花"></a>铃森一花</h3><p><img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/%E3%81%84%E3%81%A1%E3%81%8B_%E4%B8%AD_%E5%88%B6%E6%9C%8D_1_%E9%80%9A%E5%B8%B806.png" alt=""></p><p>一花可以说是这部官能小说中<strong>所有</strong>出场角色中唯一一个正常人了。至少她的身上是没有很深的罪恶的。相比于其他人各不相同的怪癖与遭遇，一花只不过是因为性格软弱受人欺负，在初次遇到夕摩让他安慰两句后也就振作起来了。在一花的世界观里，小动物是超可爱的，朋友也是值得信任的……</p><p>不过在遇到夕摩后，她的遭遇也是十分悲惨的（尤其是一花线）。因为总是示弱，在心狠手辣的夕摩眼里她简直就是任人摆布的小狗。她非常喜欢和夕摩一起玩，却总是因为夕摩的喜怒无常而被呵斥。不过她始终都是在对自己强调要保持“距离感”，找自己的错误（小天使一花）。因为夕摩总是在重要的时候伸出援手（失落的时候安慰她，被欺负的时候保护她，没有人愿意理她的时候也是夕摩和自己搭话），逐渐发现夕摩是男生的一花最终陷入了对夕摩的喜爱中。如果你拒绝了一花的表白，那还好，毕竟夕摩在鼓励她后，她已经没有那么容易被欺负了，也知道保持人与人之间的“距离感”，就算没有夕摩的帮助，也一定会好好生活下去的。否则，如果接受了一花，那么一花将成为又一个被带入觋家深渊的受害者。</p><p>在一花线，夕摩对于眼前这个任人摆布的“小狗”产生了想要肆意蹂躏把玩的念头，而深陷其中的纯情一花也十分听话。二人活动时被夕莉看到，夕莉开始对一花大打出手，并且也开始拷问夕摩。就在夕莉要向她曾最爱的弟弟出手时，一花站出来保护了夕摩。夕莉一直追夕摩追到了车站，在车站又一次，想要控制夕摩。夕摩在恐惧之余，不由得想到曾经也热衷于掌控自己的母亲夕香里。此时，夕摩的眼中，那个对儿子图谋不轨的夕香里和夕莉重叠在一起，使他感到一阵恶寒。无可忍耐的夕摩用力推开了纠缠不休的夕莉，却失手将她推上了电车轨道。奇怪的是，谁也没有看到这一幕，人们都以为夕莉是自杀身亡。夕摩惊慌失措地回到了家，他也终于意识到，自己曾最爱的姐姐，被自己亲手所害。然后夕摩便开始彻底的堕落了。他接着解决了父亲，并且什么也没收拾，便打电话叫一花来自己家……幸好之后就没有内容了，我不想看见一花再遭受来自夕摩莫名其妙的苦难……吉祥寺你对正常人真的好不公平。</p><h3 id="藤堂咲和御殿场镜子"><a href="#藤堂咲和御殿场镜子" class="headerlink" title="藤堂咲和御殿场镜子"></a>藤堂咲和御殿场镜子</h3><p><img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/%E5%92%B2_%E5%A4%A7_%E3%82%B3%E3%83%BC%E3%83%88_1_%E9%80%9A%E5%B8%B809.png" alt=""></p><p><img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/%E9%8F%A1%E5%AD%90_%E5%A4%A7_%E5%88%B6%E6%9C%8D_1_%E9%80%9A%E5%B8%B803.png" alt=""></p><p>藤堂老师和镜子的关系，游戏里其实说的不是很清楚，总之就是镜子和老师相互爱着（怪）。藤堂为了自己不正常的 xp 而伤害学生，也可以称得上是数一数二的罪恶了。夕莉知道她对夕摩的所作所为后，便在一天发了很多揭发藤堂老师罪行的海报传单。藤堂老师气急败坏，对面前的“夕摩”指指点点，并跟同学们扬言要揭发“夕摩”的真身。然而，藤堂老师强行撕开“夕摩”的衣服后，却发现她是个女生——原来这是夕莉假装的夕摩！接着藤堂就接受调查，并被学校开除了。</p><p>但是她阴魂不散。她曾试图私下联系夕摩，但信被夕莉撕毁了。后来她联系了镜子，尝试 2v2（误），但镜子和自己都没能得逞（te 和 he）。说到这，镜子也是个十分矛盾的人。她一方面珍惜自己与觋家<del>姐妹</del>姐弟的友谊，一方面却也爱着藤堂老师（所以这实在太怪了啊啊啊！），所以她才会同意咲老师的计划，也正如此，才会在主线中被夕摩说服。如果在镜子麻醉夕摩的时候夕摩没有说服她，那么夕摩就会在迷糊中享受起来。赶回来的夕莉看到这一幕则会受到暴击。赶回来的时候，夕莉的手是被包扎过的，对应真结局中夕莉拿刀恐吓藤堂老师（为什么，为什么我如此坚定，而夕摩你！你却……）。此后，夕莉渐渐疏远夕摩，也疏远了所有人，世界里只剩下她自己了。夕摩则开始另外一种堕落（但其实，不论是哪个结局，夕摩都堕落得够深了），他开始回味之前特别反感的那种感觉（和镜子以及老师的），直到最后主动联系他们，在三人游戏的崩坏中迎来镜子线的 bad end.</p><hr><p>我懒得写其他角色了。 QWQ</p><h2 id="Part-3-想法"><a href="#Part-3-想法" class="headerlink" title="Part. 3 想法"></a>Part. 3 想法</h2><p>玩的时候，一开始还是很有代入感的。”脆弱“的我接受着姐姐的庇护，也憎恶着父亲，这些地方，以及夕摩的内心情感都描绘得很好。如果是我的话，我大概也会像夕摩一样，沉迷于对姐姐的恋情之中无法自拔。尤其是高二一刷的时候，真的是感同身受，和夕摩产生了强烈的共鸣。是啊，如果自己明明深爱着一个人，却要囿于世俗眼光而无法向其诉说爱意，真的太惨了。如果那个人也爱着自己，何不冲破牢笼呢？而且我也常常会丧，会逃避。表结局那个“停止了一切社会和经济活动”的“废人”夕摩有时候或许就是我的真实写照。对，很多时候，除了咬牙坚持，我也常选择逃避现实，尽管这样做真的很自私。但是有时候我甚至觉得，如果我真的在那个世界里，我会成为另一个有过之而无不及的夕摩。这种疯狂的爱虽然扭曲，却能深深地烙印在我的心中。背德感，崩坏感……</p><p>但玩了真结局，看清夕摩的阴谋之后，便好像没那么有代入感了，对夕摩也不是特别同情了。反而开始觉得和夕摩相比，我或许更像一花一点。我反正是做不到像夕摩那样静谧构思，心狠手辣。怎么说呢，这里总觉得作者想尝试更加狂气，创新的剧本，但俗话说步子迈太大容易扯着淡，没有处理得很好。虽然伏笔埋得好，但最后圆过来，作用好像也就是让叙事更加完整了，总之，有点怪。而且最重要的是，本游戏虽然致敬了俄罗斯作家陀思妥耶夫斯基的《罪与罚》，但拉斯科尔尼科夫虽然也犯下了许多罪行，但好歹去西伯利亚认真忏悔了一段时间， “罪” 与 “罚”均在天平之上。反观《镜4》中的二人完全没有任何忏悔的意思（当然，其他人物也是有着各自的“罪”的，但是！夕莉和夕摩就应该好好地为铃森一花酱道歉！），而且他们最后只是幸福地一起生活，没有得到其“罚”。如果你硬要说他们的双胞胎预示着轮回的“罚”的话，第一，游戏中没有任何直接描写，还是很难感受到；第二，在夕摩和夕莉的经历之后，就算他们的孩子真的又来一个轮回，我想夕摩夕莉是不会像夕香里和由纪夫那样做的。总之，游戏中对男女主“罚”的描写几乎可以忽略不计。不由得让我感觉封面的那个天平实在是多余了，只有一个鸟笼才是切切实实扣紧主题的。所以，如果一定要说这是“罪与罚的少女”的话，虽然难以接受，但一花线或许才是游戏的真结局。毕竟，弟弟对姐姐的爱根本就不是纯洁的，而是崩坏的，充斥着罪恶的。发生背叛也不是不可能。只有在这条线，男女主才真正遭受了“罚”——夕摩彻底走上不归路，再也无法回到正常的生活，而夕莉也走到了她的尽头。或许，只在这一条线出现了封面中下着大雪的空洞街道，也暗示了这条线的可能呢？可惜，这条线的完成度还是偏低了。</p><p>这部作品相对于其他万华镜系列作品来说，更加具有文学气息，实用度有所下降（虽然只看 CG 的话实用度肯定只高不低，但看了剧情就不好说了）。不仅引用了大量诗句（主要是中原中也、波德莱尔的，大多…呃，不如说全部，都充斥着阴郁的情感），而且相当的 BGM 都是采用的名曲，诸如《爱的礼赞》、肖邦的《小狗圆舞曲》、德彪西的《月光曲》，等等。当然，游戏自己编的 BGM 也非常出彩，点名表扬《青麦》。中原中也、梦久野作、波德莱尔等人的文学作品也与游戏的氛围特别搭。在游戏中遇到他们的诗句总会多琢磨一会儿，但是脱离这款游戏好像就没什么兴趣了哈哈……</p><p>要说其文学风格，大抵是一种“反艺术主义”，颠覆传统，甚至践踏传统，可能让固定了审美观念的人们感到不适。或许更进一步，可以说是一种“达达主义”，给人的感官以某种“侵犯”。但本游戏与传统美学又针锋相对得没有那么彻底。</p><p>说其剧本可以留在文学史上还是稍微有点过誉了，但要是把最后这稍微有点烂的摊子梳理一下，主题再更鲜明一点，或许也说不定呢。总归是非常接近文学作品的了，不过还是不要对官能小说的剧情期望太大吧（</p><h2 id="Part-4-结语"><a href="#Part-4-结语" class="headerlink" title="Part. 4 结语"></a>Part. 4 结语</h2><p>总之，未成年人最好还是不要玩这个游戏，对心灵的冲击实在太强烈了。高二的时候……现在回想起来，那个时候我的心情也濒临失控了。前几天二刷的时候感觉就好多了。</p><p>硬要说这游戏的教育意义的话，《镜3》可能就提到了环境保护、人工智能危机的问题，而《镜4》则是对家庭教育的思考。毕竟，没有如此畸形的家庭，也就不会有这样的夕摩和夕莉。或许，也暗含对封建家庭思想的批判吧（我不好说是不是真有）。</p><p>最后，引用剧本作者（们）在游戏中写的一首诗结束全篇吧（姐姐的占有欲好恐怖）</p><p><em>哪怕你将我的双眼戳瞎 我也会看着你</em></p><p><em>哪怕你将我的耳朵刺破 我也会倾听你</em></p><p><em>哪怕我失去了双腿 我也会朝你前进</em></p><p><em>哪怕我没有了嘴巴 我也会呼唤你的名字</em></p><p><em>哪怕双手被折断 我的心也会如同手一般抓住你</em></p><p><em>就算你将我的心脏碾碎 我的大脑也会像心脏一样鼓动</em></p><p><em>如果你将我的大脑投入烈火之中</em></p><p><em>那么 我的血恐怕也会继续嘲弄你吧</em></p><p><strong>*END*</strong></p><p><img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/bg_%E6%B2%B3%E5%B7%9D%E6%95%B7_%E6%98%BC.png" alt=""></p>]]></content>
    
    
    <summary type="html">今日狂风也依旧嘶吼</summary>
    
    
    
    <category term="观止" scheme="https://eykenis.github.io/categories/%E8%A7%82%E6%AD%A2/"/>
    
    
  </entry>
  
  <entry>
    <title>《Earth OL 2022》成就列表</title>
    <link href="https://eykenis.github.io/2021/12/26/%E3%80%8AEarth-OL-2022%E3%80%8B%E6%88%90%E5%B0%B1%E5%88%97%E8%A1%A8/"/>
    <id>https://eykenis.github.io/2021/12/26/%E3%80%8AEarth-OL-2022%E3%80%8B%E6%88%90%E5%B0%B1%E5%88%97%E8%A1%A8/</id>
    <published>2021-12-26T14:37:07.783Z</published>
    <updated>2022-11-07T02:20:01.533Z</updated>
    
    <content type="html"><![CDATA[<ol><li><ul><li><strong>Lecteur en Ruine: Listen closing music of the library</strong></li></ul></li><li><ul><li>√ <strong>DONE: <del>New Reader: Read 1 paper book</del></strong></li></ul></li><li><ul><li><strong>Reader, Again: Read 2 paper book</strong></li></ul></li><li><ul><li><strong>Reading Expert: Read 4 paper book</strong></li></ul></li><li><ul><li><strong>Allegiant Reader: Read 8 paper book</strong></li></ul></li><li><ul><li><strong>Readmaster: Read 16 paper book</strong></li></ul></li><li><ul><li>√ <strong>DONE: <del>Oh you finally Get Started!: Running in the playground in evening</del></strong></li></ul></li><li><ul><li>√<strong>DONE: <del>Runner: Keep running in a week</del></strong></li></ul></li><li><ul><li>√<strong>DONE: <del>Excellent Runner: Keep running in a month</del></strong></li></ul></li><li><ul><li><strong>Gotcha!: End your Spring Term with a GPA higher than 3.6</strong></li></ul></li><li><ul><li><strong>Game Developing Pathfinder: Release your first demo using Unity Engine</strong></li></ul></li><li><ul><li><strong>Advanced Computer Graphics <del>(ACG)</del>: Finish the GAMES101, GAMES 102, GAMES 201, GAMES 202 Course and all of their assignments</strong></li></ul></li><li><ul><li><strong>√ DONE: </strong><del><strong>A Perfect Press (APP): Got the maximum grade point in a course</strong></del></li></ul></li><li><ul><li><strong>Recoder: Keep diary everyday</strong></li></ul></li><li><ul><li><strong>CM Reach!: Become candidate master on Codeforces</strong></li></ul></li></ol><p>$13.A\ Perfect\ Press:$</p><p><img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/H1RHCES%7BW%5B%60O5C718D2%609QH.jpg" alt=""></p><p>$7. Oh\ you\ finally\ get\ started!$</p><p>A successful exercise in the evening 3/8/2022.</p><p>$2.New\ Reader:$</p><p>Really the first book I read carefully which is not for schoolwork..</p><p><img src="https://ekkepic.oss-cn-beijing.aliyuncs.com/img/20220315150607.png" alt=""></p><p>$8.Runner$</p><p>From 4/11/2022 ~ 4/18/2022. Still keeping.</p><p>$9.Excellent~Runner$</p><p>Until 5/23/2022. Still keeping.</p>]]></content>
    
    
    <summary type="html">· Achivements</summary>
    
    
    
    <category term="问道" scheme="https://eykenis.github.io/categories/%E9%97%AE%E9%81%93/"/>
    
    
  </entry>
  
  <entry>
    <title>坠入海底</title>
    <link href="https://eykenis.github.io/2021/12/22/%E5%9D%A0%E5%85%A5%E6%B5%B7%E5%BA%95/"/>
    <id>https://eykenis.github.io/2021/12/22/%E5%9D%A0%E5%85%A5%E6%B5%B7%E5%BA%95/</id>
    <published>2021-12-22T09:19:17.000Z</published>
    <updated>2022-04-22T06:35:01.769Z</updated>
    
    <content type="html"><![CDATA[<p>先把话说好，这篇文章可能会有很多负能量，看我写出来什么样吧。</p><p>上大学之前，我对大学生活的想象是什么样的？</p><p>当时，我很珍视我的高中生活，我珍视每一天。在我们一中这个小地方学习是一件很快乐的事，虽然也很辛苦。同时我也憧憬大学生活。我觉得这样一个一直一直都在不起眼的小县城里生活了这么久的我，要去一个省会城市长期生活，是一件难以想象的事，也是一件令人兴奋的事。我会告别我的家人。本来就是月假式的高中，让一个月一次回家变成一个学期一到两次回家。我会不会想家？我会不会习惯这个未知的大学生活？我这样一个社恐，在看上去需要特别多人际交流的大学里，会不会遇到很多困难？我知道困难肯定是会有的，我也肯定会尝试着去克服。我希望交新朋友，身边肯定会有许许多多有趣的人。作为985大学，课程想必会很生动有趣，具有启发意义吧。毕竟因为地域原因，这么多年来，我都是在小城市里接受着小规模学校的小班式教育。<strong>我急切想要知道，大城市里先进的教育理念是什么样子的，它又会将我带向何种引人入胜的知识殿堂</strong>。</p><p>当我在二十平米的小屋里，打开手机又一次查看录取通知时，欣喜地发现录取状态从“已投档”变为“已录取”。止不住的喜悦迸发出来，差点在椅子上哭出来。我又开始回忆。高考前一周，我感冒发烧，脑袋犯浑。而且高考时不烧了但还是咳嗽，考场上一边高速思考还要一边忍住咳嗽，生怕自己影响他人。考完后，我去我的床位揭掉了贴在墙上的手写“浙江大学”“武汉大学”便利贴，留了一套自己认为考得不错，而且题目质量也很高的理综套题在抽屉里留给学弟们<del>寻宝</del>参考（虽然下一届不考理综了）。嘛，好像这一些都无所谓了，全都释然了，就算考的不是特别理想也无所谓。尽管离自己最高的目标ZJU差了四十来分，尽管只要不犯那几个重大失误完完全全可以考上WHU/HUST，但我还是欣然接受了。我非常高兴。毕竟还是个985嘛，虽然是末流B的。毕竟人生总有缺憾嘛，都说求上而得中，这或许就是得中吧。我相信未来的生活仍然是充满希望的。</p><p>然而在上大学之前，我也总是很担心。我担心我这个几乎可以说是乡下来的土包子没法融入群体，我担心我这么个小个子不会去了大学特别“突出”吧QAQ，我担心许许多多大城市来的同学们在各个方面上对我都是降维打击，担心自己跟不上新的学习进度。（所以我早早地买了一本C++ Primer，然后请它吃了一暑假的灰QAQ）</p><p>然而事实证明我的担心不全对，对了一半。事实上大多数同学的见识其实也和我差不多，其实在这个网络的时代，我们并没有那么大的差距。当然也不乏能够“降维打击”我的同学，在他们眼里我真的是蒟蒻、小白，啥都不会，即使到现在也是，专业知识远远地被甩在后面（不过，我现在相信这些都是可以追赶的，只要我不再摆烂 ^ ^ 又开摆是吧）。</p><p>然后？然后就没有然后了。然后，学校就花了一年的时间，彻彻底底打破了我的幻想，又逼迫着我慢慢重建新的认知并朝之努力。重建的时间可能就是现在吧，比较晚了。</p><p>GitBook《<a href="[README - SurviveSJTUManual (gitbook.io">交大生存手册</a>](<a href="https://survivesjtu.gitbook.io/survivesjtumanual/))》开篇就说：">https://survivesjtu.gitbook.io/survivesjtumanual/))》开篇就说：</a></p><blockquote><p>各位同学们，在本书的开始，我不得不遗憾地告诉大家一个消息。<strong>国内绝大部分大学的本科教学，不是濒临崩溃，而是早已崩溃。</strong>在此，我无意争论是否复旦、中科大、或者清华、北大是否比我们崩溃的更少一些——这种争论是没有意义的。我只是看到了无数充满求知欲、激情、与年轻梦想的同学们，将要把自己的四年青春，充满希望与信任地交给大学来塑造。这使我心中非常不安。</p></blockquote><p>大一一年我逐渐地就是从充满希望到产生疑问，再到不解。直到不久前看到这本电子书 <em>SurviveSJTUManual</em>, 并产生了强烈共鸣后，我才知道，原来认为这一切本不该如此的人远远不止我一个。</p><p><strong>为什么会这样？</strong></p><p>说说到底发生了什么。</p><h3 id="我看到的CSEE专业是什么样子"><a href="#我看到的CSEE专业是什么样子" class="headerlink" title="我看到的CSEE专业是什么样子"></a>我看到的CSEE专业是什么样子</h3><hr><h4 id="Part-1-学校课程"><a href="#Part-1-学校课程" class="headerlink" title="Part 1. 学校课程"></a>Part 1. 学校课程</h4><p>初见大学课堂，我是对老师们怀着非常高的敬畏之心的，毕竟据说都是教授/副教授起步。高数（1）是一门理想的课程，老师讲的很好，也非常有亲和力，所学的知识也很合适。不过还是我自己的原因吧，学的并不是特别认真，两次机考的成绩都不太高，好像是85/75，期末考了60多。然而那次高数期末好像比较难，一个考场就没有几个人及格，所以我的成绩竟然也可以算得上偏上。到这里，大学给我的第一个不正常的反馈就来了。原来我不用这么努力，只是平时随便听听，考前突击也能取得较好的名次？或许大多数人真的没有那么努力。线代也是一样，基本靠网课+整天刷题的突击，效果也还算好。当然，这两门课都挺正常的。除此之外的另一门核心课程序设计（也就是C/C++入门教学），感觉老师讲的过细了，很多地方都过于手把手，不给我们自己探索，而且老师讲的也很慢很浅，很多东西虽然讲的多但是实在不怎么深，依靠自己还算勤奋的日常 coding，差不多到十月中旬就已经把整个学期讲的东西学的差不多了（除了文件IO操作）。好在课程的考核安排的较为合理，有课内OJ，多为上机考试，也穿插一些小项目，和期末大项目，比较有实践性。总结大一上：还算可以，没有什么太大的意见。</p><p>接着就是大一下，我终于能好好地听期待已久的数据结构课了——这当然是计算机基础中的重中之重。然而这门课，老师讲的过于不够深入。有多不深入呢？背包问题甚至对于 $O(2^n)$ 的暴力枚举大讲特讲，而对于 $O(n^2)$ 的动规算法只是半节课敷衍地过了一下，滚动数组更是只字未提。要不是提前有了解就被老师忽悠过去了。我寻思这东西不应该讲 DFS 的时候就给提完吗？这个算法讲得有点过分敷衍了。当然这只是一个例子，还有很多我真的真的，接受不了的内容。真的觉得这门课在求知上是敷衍人。不仅如此，数据结构的所谓小班讨论，就是上网搜资料，做PPT。拜托，抄网上内容，做出个PPT就能把高级数据结构学会？也不是不可以，就是这考核方式有点过于逆天了，看你 PPT 做得好不好，而不管你到底掌握的如何。同理还有 Word 文档，还有更多本该更深入的作业也在使用 PPT、Word 进行考核，直到现在都是，我相信未来还会有，我很失望，很失望。我觉得这是在亵渎我特别敬畏的计算机知识，尽管亵渎这个词不好听。不仅如此，期中期末的笔试题，比较各个容器优缺点，一个大题；写出AVL左旋右旋旋转过程，一个大题。差不多得了……另一门核心课，离散数学，我也知道老师为人师表，甘为人梯，是带着一腔热血和自信去教书的。但还是要冒昧地吐槽一下，老师您编写的教材质量实在太烂了…… 很多时候我不理解，为什么不按照业界统一的标准去编写教材？为什么不把各种定义写得更清楚明白一点，而要自作主张按照所谓例题去直接讲解知识点，还觉得自己“自成体系”？关键是这例题还出的不怎么样。一学期下来我只学会了做题，而且只会做这本教材的题，对什么概念都特模糊，都是一知半解。我的离散数学仍然没有入门，教材烂，我学的也烂。关键主编教材的老师还自我感觉良好，唉。所以说，这两门最重要的核心基础课程，全让我们奔着应试去了，几乎没有学到什么真家伙。</p><p>再到这学期，延续一年的所谓大学物理，我真的不想再多说了…… 电子电路课，对于所谓模拟电路，我不理解；对于所谓电子平台测试，我不理解。我不知道你教我们这些要深不深，要简单不简单的东西有什么用。有的老师用所谓“中国硬件行业缺人才”来当做借口让我们认真焊板子，接电路。可是你浪费那么多个上午中午去接电路焊板子，无非就是又一次复习了一次示波器的使用方法，无非就是又浪费了宝贵的课外时间去干那格式分高的一批的课程报告。等我们卷完、摆完之后呢？我们国家的硬件能力不会有任何提高，中国芯片不会有任何技术上的进步。美其名曰“基础”。给所有工科生不分门类全部加上一些自认为的学门核心课，以为给软件学大物这种操作就能打造所谓“复合型人才”……笑死，根本入不了门，还浪费时间。</p><p>我们的学习范围太宽太宽了，每一样都不好学，每一样学成了也是特别特别浅，关键是电子测试平台的老师，根本就不打算教会你。具体的也不想再说……很累。不过电子电路理论课的老师是个非常负责，非常热爱教书的老师。虽然模电我真的不配……数电课程算是我对于学校本科教育权威性认识的慰藉了，是好课，我也想学好。不说了，总结下来，本科的课程就是麻中麻，开始还好，后来越来越麻，中间可能遇到好老师能点通一下自己，以至于让自己的自学道路没有那么艰难……无意义的课程，教的一言难尽的课程，无限地消磨着我的意志，打击着我的积极性。</p><blockquote><p>就算你把课本上的内容搞得再烂熟，绝不代表你真正对这门课能有什么理解（相反，那些真正理解的人，却不一定能针对考点答出高分）。请务必牢记：大学四年留给你的是你的人生，在你毕业之时，那一串苍白的分数其实就已经作废了。</p><p>​                                    ——还是 <em>SuriviveSJTUManual</em></p></blockquote><p>大学大学，大不了自己学。把时间花在自己心悦诚服的事情上，献给自己对科学文化知识的渴望，其意义本就远大于“上课”。自学当然会苦于没有真的能够满足自己求知欲的课程，没有人指导，导致自己可能在自学时走很多弯路。好在当下这些苦难都减轻了很多——我们可以上网自己找网课不是吗。</p><p>以上，对事不对人。我知道老师们都没有恶意，也都十分辛苦，我仍然是敬佩他们的，不过不会喜爱他们。这不是他们的问题，这是教育体制的问题。学校水平，考核只看科研等指标，对于课堂，只看你学生报告写的好不好，PPT 做得漂不漂亮，格式合不合要求。至于学生上课听了什么，老师讲了什么？没有人在意。除了部分老师和部分学生自己，没有人在意学生的脑子里真的听进去了什么。对于老师来说，不仅教学没有科研有实际用处，而且为难学生只会让老师事情更多。这或许是导致许多本该讲的深入的课程异常简单甚至敷衍的重要原因吧。</p><blockquote><h4 id="写在中间"><a href="#写在中间" class="headerlink" title="写在中间"></a>写在中间</h4><p>我觉得我们真的应该多独立思考，多花时间去回过头来思考，这绝对不是浪费时间，绝对算不上内耗。相反，如果只是为了ddl、绩点而疲于奔命，那么我们真的就是在被这不合理的制度牵着鼻子走，逐步成为国内教育流水线的牺牲品……</p></blockquote><h4 id="Part-2-学校环境与个人"><a href="#Part-2-学校环境与个人" class="headerlink" title="Part 2. 学校环境与个人"></a>Part 2. 学校环境与个人</h4><p>刚入大学，我渴望求知，我渴望遇见更大的世界。我觉得既然都是贴着这么多 tag 的高校了，应该人人都很乐意去学好玩有趣的东西，去发现问题，深究问题吧？但很遗憾，我周围的<strong>大多数</strong>人好像并不这么认为。他们要么只看到绩点，要么就是绩点都不看。时至今日，我们大部分人，对于课本之外的知识知之甚少，仿佛整个专业学习校内课程就到头了。即使大二了，也很少有人在能遨游中发现那令人神往的广阔计算机天地…… 稍微去看看那些从业者的经验就知道，这种行为无异于自掘坟墓。就包括我，到现在依然是个小白，有很多东西真的不懂，我也希望自己能遇到大佬，一步一步跟进。我还是不理解，我们到底怎么了？我不该戾气这么重，或许我想的不对。身边对所学专业毫不了解，混世度日的人太多太多了。我不想成为那种人，我没有后路可言，我可以靠的只有自己，我没有资格去成天贪图享乐…… 我不配，但却又逐渐在成为那样的人。不得不说，到现在，我只不过是个眼高手低的烂人罢了。很遗憾，一年过去了，我几乎是什么也不会，一事无成。我是一个愚钝的人，而且不擅长寻找正确的方向，我希望我能多思考，多提升自己的效率，不要再忙了一年发现自己什么都没学成。<br>很多时候，我真的是不思进取，混吃等死，该骂。这一年多我有很多时间浪费在了无意义的娱乐上，特别是大一下学期最为严重，泛滥成灾。诚然，人不应该拒绝娱乐，但或许对于休息之余来说，我的程度有点过火了吧。我应该去思考，发生这种事的原因是什么？</p><p>$Ivory\ \ Tower$. 校园给了我们一个相对于社会的缓冲，在这个缓冲下没有高中学业的紧张，也没有社会的重压。相对稳定舒适的生活，不管是其他任何年龄段的人看来都是奢侈的。而如果我们永远不跳出这种幻象，不去真的为工业界 or 学术界的工作提前打下真本事，可能只会追悔莫及，四顾茫然吧。大学是一锅温水，小心被煮了青蛙。当世界都用糖果引诱你进入她的监狱的时候，你还能保持独立思考吗？</p><p>当然，保持独立思考听起来也不应是一件难事，毕竟你要做的仅仅只是拒绝糖果而已。不过你脑子里的多巴胺会同意吗？</p><p>我好差劲，我们都好差劲。</p><hr><p>所以说，大概这就是我所看到的大学。更不用说那种阴森恐怖的内卷氛围，只要不是熟人，在课业学习上就几乎是封闭的。绝大多数人对于小组作业毫不过问，只要不是自己一个人的作业，天塌了有个高的顶着。都是这样子想，甚至有人匿名互评作业打0分。有时候保持一颗热心，你只会发现所有的杂事都被你摊上，而你得不到任何好处，反而在帮别人做事。囚徒困境啊！！！我想我的热心与积极态度，大概也被消磨殆尽了。</p><h3 id="我在做什么"><a href="#我在做什么" class="headerlink" title="我在做什么"></a>我在做什么</h3><p>竞赛。对于日常生活学习的不尽人意，竞赛最大程度地满足了我的许多需求与幻想，同时也<strong>极大地打击了我</strong>。这未尝不是好事，这让我开始反省自己在深入思考学习上到底是一个什么水平的人，也让我能够及时更新自己（个P）。算法竞赛对我自己来说，只是少了一些打游戏和复习那些所谓专业课的时间而已，得到的收益是这两样远不能比拟的。</p><p>然而我收获了什么呢？训练一年几乎是毫无成果，cf只是勉强维持在蓝名，而且在大一下结束后，我进入了长达半年的低谷期。从暑假自训不上心，蓝名迟迟上不去，到多校被虐，再到做题做到自闭也没有什么成果，还因为疫情被锁在四川回不来了，暑假有一天夜里打完 div2 甚至爆1，对着电脑屏幕抓狂，可能也给 childofcuriosity 佬佬传了一些负能量:pensive:呜呜呜，感觉自己挺烦人的。再到开学ccf-csp爆炸，算是跌到了谷底。ccf爆炸到没有颜面去参加ccsp，只希望明年再来。好在继续训练，国庆后成功上了蓝名，并终于学会了可持久化数据结构，并且组好了新队。本以为转机终于要来了，谁知道接着又是低谷。我在我抱有一丝希望的区域赛接连打铁，甚至离铜牌区都还有距离。而且这其中，队友有一个训练极不积极。等打完区域赛，虽然没有真的哭出来，但心里的泪已经流的差不多了吧。当时都觉得，济南站 2 小时签到或许永远是我的耻辱柱。又一次，竞赛线跌入谷底，这之后我甚至退役的小作文都写好了，打算放弃竞赛去死磕图形学走直接走就业路线了（就是上上篇博客，不过原内容被我撤掉了），就差去校队里和各位讲清楚了，然而幸好有某位大一的oi爷鼓励我，安慰我，才让我厚着脸皮坚持下来——脸皮真的厚了起来，毕竟我这样水平的人去参赛XCPC都感觉对不起一队打来的名额。<br>我花了这么久，终于想明白，或许我的情况是：很多时候我只是拿刷算法题当一个挡箭牌。不想做 ddl，不想认真学习的时候，我就把自己埋在 codeforces 上自闭，埋在洛谷里看博客，做题。然而听起来是做题，实际上两边不讨好——很多时候我仅仅只是为了逃避而已，我也很少因为不想学习的原因去补高难度的题，说不定，仅仅只是在这些网站上继续浪费时间而已。那这又和我 间歇性无节制打游戏综合征 有何差异呢？我对于竞赛的态度可能就这样走歪了，这也是导致我区域赛连续打铁的重要原因。明明做了很多题，却仍然打铁。可能我只是在追求着A题的快感，逐渐忘了去沉下心来好好学算法，提升思维吧。在刚开始的那段时间，学的东西简单，或许这个大问题还没有突出，随着算法学习逐渐深入，问题越来越严重。毕竟电子竞技菜是原罪，XCPC不就是一种脑力的电子竞技吗？别人EDG整天十几个小时的训练，而我每天平均真正有效有用的训练可能2小时都没有。对不起，我不仅是菜狗，而且还是懒狗，这下献大丑了。希望自己再打一年，好好打。</p><p>除开竞赛，也就是课外的其他学习。我尝试过很多东西，Qt 学习因为大一上期末考中断了，回过头来看这工具也确实不适合；Unity 因为完全不懂相关专业知识强行学导致做出来的东西很蹩脚，也就放了；尝试做项目项目半途暴死；说要给学校 OJ 重做前端，开发小组到现在也是杳无音讯；再到现在，开始找 CG 领域的入门知识，开始学 GAMES101 入门（可以说是国内第一个全中文讲课的美国大学的课程了），才发现自己的学习习惯已经变得多么差了。GAMES101 真正给代码框架的作业不知比学校那些 PPT 作业好了多少，但我不擅长做了……（所以说，对于许多出国的学生，很多人都说这是觉得外国的月亮圆，但上了他们很多网课了才发现，国内的本科教育，那确确实实是被吊打）确实，除了学校要求的，以及竞赛，剩下的学习，都是我追梦的尝试。然而我的很多尝试，都因为各种各样的事搁置，可能现在确实也稍早了一点。不过，还是希望自己尽早好好入门图形学，努力成为一名领域人才。至于为什么学图形学，当然是兴趣爱好使然（毕竟从小到大都是一个打游戏又菜又有瘾的人），觉得这样的领域很适合我，很感兴趣。我觉得做游戏是一件很痛苦的事（制作过程很复杂，实现一个简单的东西可能需要很多工作），也是一件很快乐的事（正确运行起来的正反馈当然强）。有时候我不想再在这些几乎毫无用处的课业上浪费时间，只想早点投身工业界，却又怕自己的选择太单纯太激进…… 不久前，TX 的资深图形大佬毛星云坠楼结束了自己的生命。我不熟悉这些大佬，没有看过他的那些入门书籍，但看到了网上流传的他的一段话：</p><blockquote><p>我有一个梦想，有一天，西游记能出ACT，打神弑佛，那绝对比《战神》带感。<br>我有一个梦想，有一天，上海滩能出沙盒游戏，而不是玩《GTA》感受美国梦，亦或是玩《热血无赖》体验国外公司强行塞给我们的「中国文化」。<br>我有一个梦想，有一天，不少3A大作不需汉化，因为是我们自己的游戏，配音是中国的，文化也是中国的。<br>我有一个梦想，将来的某一天，国产游戏能像中国的其他产业一样，以一个领跑者的姿态，面对全世界，面对全宇宙，器宇轩昂，扬眉吐气。<br>这会是由我们一起去完成的梦想。</p><p>等着我们的好消息！</p></blockquote><p>这不就是我所想的吗？</p><p>虽然直到这个事件我才得以了解这位热爱游戏开发的大师（这何尝不是一件令人遗憾的事），但是看到这段他给自己出的书所写的序言，又怎么不能让人感动得流泪。我不知道他经历了什么，我也不清楚是什么的重压让他做出如此决定。未来的路还很长，前人未竟的事业，我希望我能够在有能力维持生活之余，为之出一份力。</p><p>我想做一个理想主义者，不要在被生活和现实逐渐蚕食时失去自我。我有自己想做的事。有很多。</p><p>愿我们在这不尽人意的世界，还能找到自己，抓住自己，坚持自己。</p>]]></content>
    
    
    <summary type="html">如何才能挣脱这束缚呢？</summary>
    
    
    
    <category term="寻路" scheme="https://eykenis.github.io/categories/%E5%AF%BB%E8%B7%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>Treap学习笔记及模板</title>
    <link href="https://eykenis.github.io/2021/12/14/Treap%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%8F%8A%E6%A8%A1%E6%9D%BF/"/>
    <id>https://eykenis.github.io/2021/12/14/Treap%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%8F%8A%E6%A8%A1%E6%9D%BF/</id>
    <published>2021-12-14T02:33:32.000Z</published>
    <updated>2022-04-22T06:37:15.753Z</updated>
    
    <content type="html"><![CDATA[<p>Treap是平衡搜索树的一种。所谓 “Treap”，即 “Tree” + “Heap”, 顾名思义，是使用堆方法对搜索树进行平衡的一种数据结构。</p><p>约定该篇文章讨论的二叉搜索树都遵守 “比当前节点值大的节点在右子树，小于等于当前节点值的节点在其左子树” 这一规定。</p><h2 id="Treap维护平衡的方式"><a href="#Treap维护平衡的方式" class="headerlink" title="Treap维护平衡的方式"></a>Treap维护平衡的方式</h2><p>Treap的目的主要是利用堆的性质来平衡原搜索树。因为堆是一棵完全二叉树，深度最优嘛。</p><p>对于一棵普通的二叉搜索树，我们对其每个节点再随机赋上一个优先级权值 $p$. 即对任意节点，多了一个变量 $p=random()$.</p><p>例如，如果我们以小根堆的规则来约束这个平衡树，那么插入和删除两个主要操作就会变成这样：</p><p><strong>插入</strong>：先按照普通平衡树的方式将元素插入到合适位置。然后我们需要向上回溯，在回溯的过程中检查这些节点关于 $p$ 是否符合小根堆的性质。如果当前节点的 $p$ 大于左右子节点 $p$ 的最小值，那么就不符合小根堆的性质。这个时候，如果左子节点的 $p$ 更小，我们就需要左旋，反之需要右旋，以此保证平衡。</p><p>至于旋转的具体操作，即：</p><blockquote><p>以右旋为例：</p><ol><li>将当前节点下放至其左子节点的位置</li><li>令<strong>右子节点的左子节点</strong> 称为当前节点的新的右子节点</li><li>右子节点的左子节点变为当前节点，取代当前节点的位置</li></ol></blockquote><p>删除操作当然是同理了，回溯的时候观察 $p$ 来维护平衡。由于 $p$ 值是随机的， Treap也不是严格的堆结构，所以它是一种期望平衡的<strong>弱平衡</strong>的平衡树，搜索、插入和删除的期望时间复杂度为 $O(\log n)$.</p><p>Treap的优势在于其实现起来非常简单，包含的也就上面这些东西了。</p><h2 id="模板部分"><a href="#模板部分" class="headerlink" title="模板部分"></a>模板部分</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> cnt; <span class="comment">// cnt 表示当前treap内节点总数，用于动态开点</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = XXXXX;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="comment">// 分别表示左右子节点、所在子树的大小、当前节点值以及p值</span></span><br><span class="line">    <span class="keyword">int</span> l, r, size, val, p;</span><br><span class="line">&#125;a[maxn];</span><br></pre></td></tr></table></figure><h3 id="回溯统计"><a href="#回溯统计" class="headerlink" title="回溯统计"></a>回溯统计</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    a[k].size = a[a[k].l].size + a[a[k].r].size + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 右旋</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rrotate</span><span class="params">(<span class="keyword">int</span> &amp;k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tmp = a[k].l;</span><br><span class="line">    a[k].l = a[tmp].r;</span><br><span class="line">    a[tmp].r = k;</span><br><span class="line">    a[tmp].size = a[k].size;</span><br><span class="line">    <span class="built_in">pushup</span>(k);</span><br><span class="line">    k = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 左旋</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">lrotate</span><span class="params">(<span class="keyword">int</span> &amp;k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tmp = a[k].r;</span><br><span class="line">    a[k].r = a[tmp].l;</span><br><span class="line">    a[tmp].l = k;</span><br><span class="line">    a[tmp].size = a[k].size;</span><br><span class="line">    <span class="built_in">pushup</span>(k);</span><br><span class="line">    k = tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> &amp;k, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (k == <span class="number">0</span>) &#123;</span><br><span class="line">        k = ++cnt;</span><br><span class="line">        a[k].val = val;</span><br><span class="line">        a[k].p = <span class="built_in">rand</span>();</span><br><span class="line">        a[k].size = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    a[k].size++;</span><br><span class="line">    <span class="keyword">if</span> (val &gt;= a[k].val) &#123;</span><br><span class="line">        <span class="built_in">ins</span>(a[k].r, val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">ins</span>(a[k].l, val);</span><br><span class="line">    <span class="keyword">if</span> (a[k].l &amp;&amp; a[k].p &gt; a[a[k].l].p) &#123;</span><br><span class="line">        <span class="built_in">rrotate</span>(k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a[k].r &amp;&amp; a[k].p &gt; a[a[k].r].p) &#123;</span><br><span class="line">        <span class="built_in">lrotate</span>(k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pushup</span>(k);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> &amp;k, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    a[k].size--;</span><br><span class="line">    <span class="keyword">if</span> (a[k].val == val) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!a[k].l &amp;&amp; !a[k].r) &#123;</span><br><span class="line">            k = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!a[k].l || !a[k].r) &#123;</span><br><span class="line">            k = a[k].l + a[k].r;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (a[a[k].l].p &lt; a[a[k].r].p) &#123;</span><br><span class="line">            <span class="built_in">rrotate</span>(k);</span><br><span class="line">            <span class="built_in">del</span>(a[k].r, val); <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">lrotate</span>(k);</span><br><span class="line">            <span class="built_in">del</span>(a[k].l, val); <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a[k].val &gt;= val) &#123;</span><br><span class="line">        <span class="built_in">del</span>(a[k].l, val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">del</span>(a[k].r, val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pushup</span>(k);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>例题分割线~</p><p>例题：</p><h3 id="P3369-【模板】普通平衡树"><a href="#P3369-【模板】普通平衡树" class="headerlink" title="P3369 【模板】普通平衡树"></a><a href="https://www.luogu.com.cn/problem/P3369">P3369 【模板】普通平衡树</a></h3><p>其中还要维护查询排名，查询前驱后继等搜索操作。</p><p>当普通平衡树维护就可以啦，比较简单。</p><p>完整代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line"><span class="keyword">int</span> root;</span><br><span class="line"><span class="comment">// 注意按p是小根堆</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r, size, val, p;</span><br><span class="line">&#125;a[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    a[k].size = <span class="number">1</span> + a[a[k].l].size + a[a[k].r].size;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rrotate</span><span class="params">(<span class="keyword">int</span> &amp;k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tmp = a[k].l;</span><br><span class="line">    a[k].l = a[tmp].r;</span><br><span class="line">    a[tmp].r = k;</span><br><span class="line">    a[tmp].size = a[k].size;</span><br><span class="line">    <span class="built_in">pushup</span>(k);</span><br><span class="line">    k = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">lrotate</span><span class="params">(<span class="keyword">int</span> &amp;k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tmp = a[k].r;</span><br><span class="line">    a[k].r = a[tmp].l;</span><br><span class="line">    a[tmp].l = k;</span><br><span class="line">    a[tmp].size = a[k].size;</span><br><span class="line">    <span class="built_in">pushup</span>(k);</span><br><span class="line">    k = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> &amp;k, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (k == <span class="number">0</span>) &#123;</span><br><span class="line">        k = ++cnt;</span><br><span class="line">        a[k].val = val;</span><br><span class="line">        a[k].p = <span class="built_in">rand</span>();</span><br><span class="line">        a[k].size = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    a[k].size++;</span><br><span class="line">    <span class="keyword">if</span> (val &gt;= a[k].val) &#123;</span><br><span class="line">        <span class="built_in">ins</span>(a[k].r, val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">ins</span>(a[k].l, val);</span><br><span class="line">    <span class="keyword">if</span> (a[k].l &amp;&amp; a[k].p &gt; a[a[k].l].p) &#123;</span><br><span class="line">        <span class="built_in">rrotate</span>(k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a[k].r &amp;&amp; a[k].p &gt; a[a[k].r].p) &#123;</span><br><span class="line">        <span class="built_in">lrotate</span>(k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pushup</span>(k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> &amp;k, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    a[k].size--;</span><br><span class="line">    <span class="keyword">if</span> (a[k].val == val) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!a[k].l &amp;&amp; !a[k].r) &#123;</span><br><span class="line">            k = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!a[k].l || !a[k].r) &#123;</span><br><span class="line">            k = a[k].l + a[k].r;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (a[a[k].l].p &lt; a[a[k].r].p) &#123;</span><br><span class="line">            <span class="built_in">rrotate</span>(k);</span><br><span class="line">            <span class="built_in">del</span>(a[k].r, val); <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">lrotate</span>(k);</span><br><span class="line">            <span class="built_in">del</span>(a[k].l, val); <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a[k].val &gt;= val) &#123;</span><br><span class="line">        <span class="built_in">del</span>(a[k].l, val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">del</span>(a[k].r, val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pushup</span>(k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rk</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!k) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (val &gt; a[k].val) &#123;</span><br><span class="line">        <span class="keyword">return</span> a[a[k].l].size + <span class="built_in">rk</span>(a[k].r, val) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">rk</span>(a[k].l, val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> rnk)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (rnk == a[a[k].l].size + <span class="number">1</span>) <span class="keyword">return</span> a[k].val;</span><br><span class="line">    <span class="keyword">if</span> (rnk &gt; a[a[k].l].size + <span class="number">1</span>) <span class="keyword">return</span> <span class="built_in">find</span>(a[k].r, rnk - a[a[k].l].size - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">find</span>(a[k].l, rnk);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query_pre</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!k) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (a[k].val &gt;= val) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">query_pre</span>(a[k].l, val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> tmp = <span class="built_in">query_pre</span>(a[k].r, val);</span><br><span class="line">    <span class="keyword">if</span> (!tmp) <span class="keyword">return</span> a[k].val;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query_suf</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!k) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (a[k].val &lt;= val) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">query_suf</span>(a[k].r, val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> tmp = <span class="built_in">query_suf</span>(a[k].l, val);</span><br><span class="line">    <span class="keyword">if</span> (!tmp) <span class="keyword">return</span> a[k].val;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">int</span> opt, x;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; opt &gt;&gt; x;</span><br><span class="line">        <span class="keyword">if</span> (opt == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">ins</span>(root, x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (opt == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="built_in">del</span>(root, x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (opt == <span class="number">3</span>) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="built_in">rk</span>(root, x) + <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (opt == <span class="number">4</span>) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="built_in">find</span>(root, x) &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (opt == <span class="number">5</span>) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="built_in">query_pre</span>(root, x) &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> cout &lt;&lt; <span class="built_in">query_suf</span>(root, x) &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">最简单的平衡树之一</summary>
    
    
    
    <category term="XCPC" scheme="https://eykenis.github.io/categories/XCPC/"/>
    
    
    <category term="平衡树" scheme="https://eykenis.github.io/tags/%E5%B9%B3%E8%A1%A1%E6%A0%91/"/>
    
    <category term="Treap" scheme="https://eykenis.github.io/tags/Treap/"/>
    
  </entry>
  
  <entry>
    <title>一个艰难的决定</title>
    <link href="https://eykenis.github.io/2021/12/05/%E4%B8%80%E4%B8%AA%E8%89%B0%E9%9A%BE%E7%9A%84%E5%86%B3%E5%AE%9A/"/>
    <id>https://eykenis.github.io/2021/12/05/%E4%B8%80%E4%B8%AA%E8%89%B0%E9%9A%BE%E7%9A%84%E5%86%B3%E5%AE%9A/</id>
    <published>2021-12-05T04:32:12.000Z</published>
    <updated>2022-04-22T06:34:45.744Z</updated>
    
    <content type="html"><![CDATA[<p>先别想这么多……</p><p>先别想这么多……</p><p>好好休息……好好休息……</p><p>再调整一会，再坚持一会</p><p>心态再放平一会……</p>]]></content>
    
    
    <summary type="html">沉稳，冷静，严谨，坚忍 ——敬爱的高中数学老师</summary>
    
    
    
    <category term="寻路" scheme="https://eykenis.github.io/categories/%E5%AF%BB%E8%B7%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>快速傅里叶变换(FFT)及NTT入门笔记</title>
    <link href="https://eykenis.github.io/2021/11/18/%E5%BF%AB%E9%80%9F%E5%82%85%E9%87%8C%E5%8F%B6%E5%8F%98%E6%8D%A2-FFT-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/"/>
    <id>https://eykenis.github.io/2021/11/18/%E5%BF%AB%E9%80%9F%E5%82%85%E9%87%8C%E5%8F%B6%E5%8F%98%E6%8D%A2-FFT-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/</id>
    <published>2021-11-18T13:41:50.000Z</published>
    <updated>2022-05-22T14:06:45.035Z</updated>
    
    <content type="html"><![CDATA[<p>本博客学习于洛谷P3803各路大佬题解，所以你肯定会找到很多相似的地方QWQ</p><h2 id="什么是FFT"><a href="#什么是FFT" class="headerlink" title="什么是FFT"></a>什么是FFT</h2><p><strong>傅里叶变换</strong></p><p>傅里叶说明了：一切函数/波形都可以用有限或无限个弦函数/波形叠加形成。</p><p>例如，现在有一个由三个不同正弦波组成的近似矩形波，将这些波形关于 $x$ 轴平行地放在一起，就可以得到下图：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/97b88cfe9192ba702c13e817170e7a08.png" alt="img"></p><p>其中红色的是合成出来的近似矩形波。</p><p>（当然，图肯定是不太标准的，意思一下就行）</p><p>从 $xOz$ 平面看，我们可以获得各个波的时域信号，也就是 $t-f(t)$ 图像。而从 $zOy$ 平面看，则可以获得各个波的频域信号。</p><p>先不看频域信号中的红色部分，注意其他三个波其实是有排序规则的：按照频率大小排序。也就是说，频率越快， $y$ 越大。且每个频率下的 $z$ 将反映该波的振幅。两种不同的信号包含了不同的信息。</p><p>而傅里叶变换，就是对一个时域信号作变换，生成频域信号。</p><p><strong>离散傅里叶变换（DFT）</strong></p><p>顾名思义，离散傅里叶变换就是在确定时域信号和频域信号都是离散的时候作的傅里叶变换。</p><p>例如，现在有一个多项式函数 $f(x)=\sum_{i=0}^{n}a_ix^i$，那么这个函数其实就是“时域信号”，我们也可以将其表示成点集$\{P_0,P_1,…,P_n\}$，其中 $P_i$ 是函数图像上的某一个点。容易知道 $n$ 个点是可以确定一个 $n-1$ 次多项式的。那么这个点集其实就是“频域信号”。从函数式到点集的变化，就是一种离散傅里叶变换。</p><p>另外，我们称IDFT为DFT的逆运算，即从点集得到函数式的运算。</p><h2 id="为什么需要FFT"><a href="#为什么需要FFT" class="headerlink" title="为什么需要FFT"></a>为什么需要FFT</h2><p>离散型傅里叶变换解决的问题一般是多项式乘法问题。</p><p>最经典的FFT问题即多项式卷积问题：</p><p><a href="https://www.luogu.com.cn/problem/P3803">P3803 【模板】多项式乘法（FFT） - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p><p>给一个 $n$ 次多项式 $F(x)$ 和一个 $m$ 次多项式 $G(x)$，求 $F(x)$ 和 $G(x)$ 的卷积。</p><p>如果直接暴力计算，第一种就是直接展开函数式算，第二种就是执行一次DFT，将函数式转换为点集，通过对 $x$ 相同的点的 $y$ 值相乘，得到目标函数的点集，再通过 DFT 的逆运算 IDFT 转化为答案。</p><p>显然，不管采取哪种方法，一共都有 $m · n$ 项，复杂度为 $O((max\{n, m\})^2)$. 在 $nm\geq 1e9$ 的时候是无法接受的。虽然朴素方法下第二种方法的常数肯定比第一种还要大，但其实我们可以在DFT变换的基础上使用FFT来加速多项式乘法。实际上，FFT的加速原因在于其采用了分治的思想。</p><h2 id="多项式乘法问题"><a href="#多项式乘法问题" class="headerlink" title="多项式乘法问题"></a>多项式乘法问题</h2><h3 id="前置知识-复数根"><a href="#前置知识-复数根" class="headerlink" title="前置知识-复数根"></a>前置知识-复数根</h3><p>考虑欧拉公式</p><script type="math/tex; mode=display">e^{\theta i}= \cos\theta + i\sin\theta</script><p>，容易知道 $e^{2\pi i}=1$.</p><p>不妨令 $w_n=e^{2\pi i\over n}=\sin{2\pi i\over n}+i\cos{2\pi i\over n}$, 则 $w_n^n=1$.</p><p>则称 $w_n$ 为 $n$ 的一个复数z单位根. 容易知道 $n$ 的复数根最多有 $n$ 个，为 $\{w_i|i\in [0,n-1]\}$. 这是因为复数根具有性质 $w_n^{n+k}=w_n^k$.</p><p>另外，还有一个通过消去定理得到的引理：$w_n^k=w_{n\over2}^{k\over2}$.</p><h3 id="使用FFT解决多项式乘法问题"><a href="#使用FFT解决多项式乘法问题" class="headerlink" title="使用FFT解决多项式乘法问题"></a>使用FFT解决多项式乘法问题</h3><p>例题：</p><p><a href="https://www.luogu.com.cn/problem/P3803">P3803 【模板】多项式乘法（FFT）</a></p><p><strong>DFT</strong></p><p>现在要将$F(x)$的表达式转化为点值表示法，那么我们需要取$n$个点。前面已经讨论过，朴素的取法复杂度是 $O(n^2)$ 的，现在我们需要构造一个可以分治的取法：</p><p>设$ F(x)$ 的项数 $n$ 为偶数，并令</p><p>$A(x)=a_0+a_2x+a_4x^2+…+a_nx^{n\over 2}$,</p><p>$B(x)=a_1+a_3x+a_5x^2+…+a_{n-1}x^{\frac{n}{2}-1}$.</p><p>则 $F(x)=A(x^2)+xB(x^2)$.</p><p>代入 $n$ 个单位复数根 $w_n^k, k\in[0, n - 1]$，有</p><p>$F(w_n^k)=A(w_{n}^{2k})+w_n^kB(w_n^{2k})$</p><p>而 $A(w_n^{2k})=a_0+a_2w_n^{2k}+…+a_nw_n^{2k\over n}$</p><p>$=a_0+a_2w_{n\over2}^k+…+a_nw_{n\over2}^{k\over n}$.</p><p>且对 $B(w_n^{2k})$，我们也有相似的结论。</p><p>故</p><p>$F(w_n^k)=A(w_{n\over2}^k)+w_n^kB(w_{n\over2}^{k})\ (k&lt;{n\over2})$.</p><p>考虑 $k\geq {n\over2}$ 的情况，令 $k+{n\over 2}$ 取代原来位置上的 $k$,</p>$F(w_n^{{n\over 2}+k})=A(w_n^{n+2k})+w_n^{{n\over 2}+k}B(w_n^{2k})$,$=A(w_n^{2k})-w_n^{k}B(w_n^{2k})$,$=A(w_{n\over2}^k)-w_n^kB(w_{n\over2}^k)$.那么在求 $F(w_n^k)$ 时，我们可以先求 $A(w_{n\over2}^{k})$ 以及 $B(w_{n\over2}^{k})$，然后再合并出 $F(w_n^k)$. 到这里，分治递归的可行性就十分显然了。由主定理可知复杂度为 $T(n)=T(\frac{n}{2})+O(n)=O(n\log n)$.**IDFT**IDFT 即 DFT 的逆变换。我们的目的是求最终表达式的各个系数，而通过 DFT 得到最终的点值表达式后，我们还需要将其逆向变回系数表达式。其实，这里只需要取 $w'=\overline {w_n^k}$. 即单位根的共轭复数，然后再执行一遍相似的分治，并且最后得到的多项式系数都除以一个 $n $ 就可以了。（不再展开证明 QWQ，了解就好，因为本蒟蒻也不会）CPP:<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// F[]即F(x)，注意n为A(x),B(x)的长度，op为1/-1表示进行的是FFT/IDFT</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI acos(-1.0)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FFT</span><span class="params">(complex&lt;<span class="keyword">double</span>&gt; F[], <span class="keyword">int</span> n, <span class="keyword">int</span> op)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!n) <span class="keyword">return</span>;</span><br><span class="line">    complex&lt;<span class="keyword">double</span>&gt; a[n], b[n];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        a[i] = F[i &lt;&lt; <span class="number">1</span>], b[i] = F[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">FFT</span>(a, n &gt;&gt; <span class="number">1</span>, op), <span class="built_in">FFT</span>(b, n &gt;&gt; <span class="number">1</span>, op);</span><br><span class="line">    <span class="function">complex&lt;<span class="keyword">double</span>&gt; <span class="title">wn</span><span class="params">(cos(PI / n), sin(PI / n) * op)</span>, <span class="title">w</span><span class="params">(<span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        F[i] = a[i] + w * b[i];</span><br><span class="line">        F[i + n] = a[i] - w * b[i];</span><br><span class="line">        w *= wn;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>此为FFT的递归写法，由于单位根的原因需要使用 `double` 数据类型，且需要一个复数结构体，每层分治还要额外开数组，其常数比较大。另外还有一种FFT的迭代写法，常数更小。（需要的可以去别处找，或者我说不定会更？QAQ）****回到该问题，由于需要分治的任何时候都要保证 $n$ 为偶数，故我们需要把 $n,m$ 补成相同的一个 $2$ 的幂次方。项数补全不影响结果，只要让多出来的项系数都为0就行了。故整个流程即：1. 对 $F(x),G(x)$ 分别求 DFT2. 直接将每个点值相乘3. 通过IDFT将点值还原成系数表达式，得到答案对于例题[P3803](https://www.luogu.com.cn/problem/P3803)，AC代码如下：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI acos(-1.0)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// op = 1 ? DFT : IDFT</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">3e6</span> + <span class="number">10</span>;</span><br><span class="line">complex &lt;<span class="keyword">double</span>&gt; F[maxn], G[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fft</span><span class="params">(complex&lt;<span class="keyword">double</span>&gt; f[], <span class="keyword">int</span> n, <span class="keyword">int</span> op)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!n) <span class="keyword">return</span>;</span><br><span class="line">    complex &lt;<span class="keyword">double</span>&gt; a[n], b[n];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; ++k) &#123;</span><br><span class="line">        a[k] = f[k &lt;&lt; <span class="number">1</span>], b[k] = f[k &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">fft</span>(a, n &gt;&gt; <span class="number">1</span>, op), <span class="built_in">fft</span>(b, n &gt;&gt; <span class="number">1</span>, op);</span><br><span class="line">    <span class="function">complex&lt;<span class="keyword">double</span>&gt; <span class="title">wn</span><span class="params">(cos(PI / n), sin(PI / n) * op)</span>, <span class="title">w</span><span class="params">(<span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; ++k, w *= wn) &#123;</span><br><span class="line">        f[k] = a[k] + w * b[k], f[k + n] = a[k] - w * b[k];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;F[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;G[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    m += n, n = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(n &lt;= m) n &lt;&lt;= <span class="number">1</span>; <span class="comment">// 补足系数，保证是2的幂次</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// DFT</span></span><br><span class="line">    <span class="built_in">fft</span>(F, n &gt;&gt; <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">fft</span>(G, n &gt;&gt; <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) F[i] *= G[i];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// IDFT</span></span><br><span class="line">    <span class="built_in">fft</span>(F, n &gt;&gt; <span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%.0f &quot;</span>, <span class="built_in">fabs</span>(F[i].<span class="built_in">real</span>()) / n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>基本上和洛谷上 FlashHu 的题解代码一样...因为我的FFT基本上是从这里理解的## NTT-快速数论变换很多时候，要求的多项式系数并不会有多大，`double` 显得有些浪费空间了，而且很容易产生精度问题。故可以使用另一种 “原根” 替代复数来解决多项式乘法问题，这样就可以避免使用 `double` 以及 `complex<T>`. 如果有系数较大的多项式需要计算且考察 NTT 时，一般会要求对结果取模。### 前置知识-原根在 NTT 算法中，原根是 FFT 中复数的替代品。~~（？又说一遍）~~要理解原根，首先我们需要群论中的若干定义。**循环群**如果一个群 $A$ 的所有元素 $x$ 都是 $a$ 的幂次，即$\forall x\in A, x=a^i(i\in \Z)$，则称 $A$ 是一个循环群，$a$ 是它的生成元。**阶**假设 $e$ 是某个循环群的单位元，则若 $a^p=1$，则 $p$ 的最小值即为 $a$ 的阶，记作 $Ord(a)$.**原根**原根的一般定义是：对于群 $G$, $\exist g\in G$, $Ord(g)=|G|$，则 $g$ 是 $G$ 的原根。现在有一个以加法取模为运算，元素为整数的群，容易知道这是一个循环群，单位元是1. 我们约定，如果这样的一个群的模数是 $p$，则其所在的群是 $G_p$.那么如果我们的问题是这样：求多项式系数，同时多项式系数对一个模数 $p$ 取余，显然系数构成一个群 $G_p$. 设 $n=|G|$，容易知道 $g^{p-1}=1$, 则不妨令 $g_n=g^{\frac{p-1}{n}}$, 有 $g_n^n=1$.从这里我们就看出，$g_n$ 和 FFT 中的 $w_n$ 是有一一对应关系的，所以我们只需要将 FFT 的点值取值修改为 $g_n^0,g_n^1,...g_n^{n-1}$ 即可。至于原根如何求出，我们可以找一个 $p-1$ 的质因子 $q$, 则 $g$ 为原根 $\lrArr$ $g^{\frac{p-1}{q}}\neq 1$ （由欧拉定理可证），将 $p-1$ 的质因子逐个找出再判断一下即可。通常题目会要求 $p=119×2^{23}+1=998244353,\ g=3$.> 据说，因为大多数NTT题目都会取更方便造数据的998244353为模数，这就导致很多题一看模数就知道这题是要做NTT。所以后来许多和NTT无关甚至完全不需要取模的题目也会加上一句“对998244353取模”。理解粗浅，还是老老实实看模板吧。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// op = 1 ? DFT : IDFT</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">3e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> F[maxn], G[maxn];</span><br><span class="line"><span class="keyword">int</span> r[maxn];</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fpow</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(p) &#123;</span><br><span class="line">        <span class="keyword">if</span>(p &amp; <span class="number">1</span>) ans = (ans * a) % mod;</span><br><span class="line">        a = (a * a) % mod;</span><br><span class="line">        p &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ntt</span><span class="params">(<span class="keyword">int</span> f[], <span class="keyword">int</span> n, <span class="keyword">int</span> op)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!n) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(i &lt; r[i]) <span class="built_in">swap</span>(f[i], f[r[i]]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> mid = <span class="number">1</span>; mid &lt; n; mid &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> wn = <span class="built_in">fpow</span>(op == <span class="number">1</span> ? <span class="number">3</span> : <span class="number">332748118</span>, (mod - <span class="number">1</span>) / (mid &lt;&lt; <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j += (mid &lt;&lt; <span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="keyword">int</span> w = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; mid; ++k, w = w * wn % mod) &#123;</span><br><span class="line">                <span class="keyword">int</span> x = f[j + k], y = w * f[j + k + mid] % mod;</span><br><span class="line">                f[j + k] = (x + y) % mod;</span><br><span class="line">                f[j + k + mid] = ((x - y) % mod + mod) % mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;F[i]);</span><br><span class="line">        F[i] = (F[i] + mod) % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        G[i] = (G[i] + mod) % mod;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;G[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    m += n, n = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(n &lt;= m) n &lt;&lt;= <span class="number">1</span>, cnt++; <span class="comment">// 补足系数，保证是2的幂次</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) r[i] = (r[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) | ((i &amp; <span class="number">1</span>) &lt;&lt; (cnt - <span class="number">1</span>));</span><br><span class="line">    <span class="comment">// DFT</span></span><br><span class="line">    <span class="built_in">ntt</span>(F, n, <span class="number">1</span>), <span class="built_in">ntt</span>(G, n, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) F[i] = (F[i] * G[i]) % mod;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// IDFT</span></span><br><span class="line">    <span class="built_in">ntt</span>(F, n, <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">int</span> inv = <span class="built_in">fpow</span>(n, mod - <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld &quot;</span>, (F[i] * inv) % mod);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">打死不学数学FLAG系列...</summary>
    
    
    
    <category term="XCPC" scheme="https://eykenis.github.io/categories/XCPC/"/>
    
    
    <category term="FFT" scheme="https://eykenis.github.io/tags/FFT/"/>
    
    <category term="NTT" scheme="https://eykenis.github.io/tags/NTT/"/>
    
    <category term="数学" scheme="https://eykenis.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>2021ICPC济南记</title>
    <link href="https://eykenis.github.io/2021/11/17/2021ICPC%E6%B5%8E%E5%8D%97%E8%AE%B0/"/>
    <id>https://eykenis.github.io/2021/11/17/2021ICPC%E6%B5%8E%E5%8D%97%E8%AE%B0/</id>
    <published>2021-11-17T03:12:06.000Z</published>
    <updated>2022-07-14T09:16:16.151Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2021-11-14-济南打铁…"><a href="#2021-11-14-济南打铁…" class="headerlink" title="2021.11.14 济南打铁…"></a>2021.11.14 济南打铁…</h2><p>抛开题目本身严重出锅的问题，也是因为自己签到慢的一批还乱WA而导致签到就能拿的铜牌不翼而飞…</p><p>对不起，以后再也不要让本蒟蒻来做签到了qwq（CF签到我2分钟一个，区域赛签到我两小时调不出，真的绝绝子）</p><p>队友死磕D无果，G有思路但时间不够+赛后发现离正解也差得远，C越想越糊，其余题开不动。</p><p>就这样本队第一次出征打铁了。</p><p>感觉在区域赛这方面自己还是一片空白，目前的进度只是学会了很多板子和CF做一做1800以下的题而已。而意识到这些之后，上海站也只剩下十来天了。。。看来得寄希望于明年了。（废物JBer叹气）</p><p>感觉自己是真的废物。。。废到不敢吱声那种。</p><p>以后我就是双铁战神了！（十天以后三铁战神flag）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;2021-11-14-济南打铁…&quot;&gt;&lt;a href=&quot;#2021-11-14-济南打铁…&quot; class=&quot;headerlink&quot; title=&quot;2021.11.14 济南打铁…&quot;&gt;&lt;/a&gt;2021.11.14 济南打铁…&lt;/h2&gt;&lt;p&gt;抛开题目本身严重出锅的问题，</summary>
      
    
    
    
    <category term="XCPC" scheme="https://eykenis.github.io/categories/XCPC/"/>
    
    
  </entry>
  
  <entry>
    <title>Codeforces Round 371 Div. 1</title>
    <link href="https://eykenis.github.io/2021/11/11/Codeforces-Round-371-Div-1/"/>
    <id>https://eykenis.github.io/2021/11/11/Codeforces-Round-371-Div-1/</id>
    <published>2021-11-11T12:57:16.000Z</published>
    <updated>2022-04-22T06:35:17.233Z</updated>
    
    <content type="html"><![CDATA[<h1 id="A-Sonya-and-Queries"><a href="#A-Sonya-and-Queries" class="headerlink" title="A. Sonya and Queries"></a>A. Sonya and Queries</h1><p>由于默认补足前导0，而且必须从低到高匹配，可以直接使用map.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    map&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; mp;</span><br><span class="line">    <span class="keyword">while</span>(t--) &#123;</span><br><span class="line">        <span class="keyword">char</span> op;</span><br><span class="line">        <span class="keyword">int</span> num;</span><br><span class="line">        cin &gt;&gt; op &gt;&gt; num;</span><br><span class="line">        <span class="keyword">if</span>(op == <span class="string">&#x27;?&#x27;</span>) &#123;</span><br><span class="line">            cout &lt;&lt; mp[num] &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; num; i *= <span class="number">10</span>) &#123;</span><br><span class="line">            res += (num &amp; <span class="number">1</span>) * i;</span><br><span class="line">            num /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(op == <span class="string">&#x27;+&#x27;</span>) mp[res]++;</span><br><span class="line">        <span class="keyword">else</span> mp[res]--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="B-Searching-Rectangles"><a href="#B-Searching-Rectangles" class="headerlink" title="B. Searching Rectangles"></a>B. Searching Rectangles</h1><p>一道有点毒瘤的二分交互题。</p><p>由于两个矩形不相交，一定存在一条竖线/横线使得两个矩形分别在线的两侧，通过两次二分找到一条符合条件的线即可。</p><p>找到分割线后，分别在两个区域内询问出一个矩形的上下左右边界，求各个边界也用二分即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> ans[<span class="number">2</span>][<span class="number">4</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x1, <span class="keyword">int</span> y1, <span class="keyword">int</span> x2, <span class="keyword">int</span> y2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tmp;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;? %d %d %d %d\n&quot;</span>, x1, y1, x2, y2);</span><br><span class="line">    <span class="built_in">fflush</span>(stdout);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;tmp);</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">1</span>, r = n;</span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">    <span class="keyword">while</span>(l + <span class="number">1</span> &lt; r) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        x = <span class="built_in">query</span>(<span class="number">1</span>, <span class="number">1</span>, mid, n);</span><br><span class="line">        y = <span class="built_in">query</span>(mid + <span class="number">1</span>, <span class="number">1</span>, n, n);</span><br><span class="line">        <span class="keyword">if</span>(!x &amp;&amp; !y) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(x &amp;&amp; !y) r = mid;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(!x &amp;&amp; y) l = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(x &amp;&amp; y) <span class="keyword">return</span> mid;</span><br><span class="line">    &#125;</span><br><span class="line">    x = <span class="built_in">query</span>(<span class="number">1</span>, <span class="number">1</span>, l, n);</span><br><span class="line">    y = <span class="built_in">query</span>(r, <span class="number">1</span>, n, n);</span><br><span class="line">    <span class="keyword">if</span>(x == <span class="number">1</span> &amp;&amp; y == <span class="number">1</span>) <span class="keyword">return</span> l;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ud</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">1</span>, r = n;</span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">    <span class="keyword">while</span>(l + <span class="number">1</span> &lt; r) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        x = <span class="built_in">query</span>(<span class="number">1</span>, <span class="number">1</span>, n, mid);</span><br><span class="line">        y = <span class="built_in">query</span>(<span class="number">1</span>, mid + <span class="number">1</span>, n, n);</span><br><span class="line">        <span class="keyword">if</span>(!x &amp;&amp; !y) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(x &amp;&amp; !y) r = mid;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(!x &amp;&amp; y) l = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(x &amp;&amp; y) <span class="keyword">return</span> mid;</span><br><span class="line">    &#125;</span><br><span class="line">    x = <span class="built_in">query</span>(<span class="number">1</span>, <span class="number">1</span>, n, l);</span><br><span class="line">    y = <span class="built_in">query</span>(<span class="number">1</span>, r, n, n);</span><br><span class="line">    <span class="keyword">if</span>(x == <span class="number">1</span> &amp;&amp; y == <span class="number">1</span>) <span class="keyword">return</span> l;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">queryRec</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> x1, <span class="keyword">int</span> y1, <span class="keyword">int</span> x2, <span class="keyword">int</span> y2)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//upper_bound</span></span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="comment">// right</span></span><br><span class="line">    <span class="keyword">int</span> l = x1, r = x2;</span><br><span class="line">    <span class="keyword">while</span>(l &lt; r) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        x = <span class="built_in">query</span>(x1, y1, mid, y2);</span><br><span class="line">        <span class="keyword">if</span>(x) r = mid;</span><br><span class="line">        <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ans[id][<span class="number">2</span>] = l;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// left</span></span><br><span class="line">    l = x1, r = x2;</span><br><span class="line">    <span class="keyword">while</span>(l &lt; r) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = ((l + r) &amp; <span class="number">1</span>) ? ((l + r) &gt;&gt; <span class="number">1</span>) + <span class="number">1</span> : ((l + r) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        x = <span class="built_in">query</span>(mid, y1, x2, y2);</span><br><span class="line">        <span class="keyword">if</span>(x) l = mid;</span><br><span class="line">        <span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ans[id][<span class="number">0</span>] = r;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// up</span></span><br><span class="line">    l = y1, r = y2;</span><br><span class="line">    <span class="keyword">while</span>(l &lt; r) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        x = <span class="built_in">query</span>(x1, y1, x2, mid);</span><br><span class="line">        <span class="keyword">if</span>(x) r = mid;</span><br><span class="line">        <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ans[id][<span class="number">3</span>] = l;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// down</span></span><br><span class="line">    l = y1, r = y2;</span><br><span class="line">    <span class="keyword">while</span>(l &lt; r) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = ((l + r) &amp; <span class="number">1</span>) ? ((l + r) &gt;&gt; <span class="number">1</span>) + <span class="number">1</span> : ((l + r) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        x = <span class="built_in">query</span>(x1, mid, x2, y2);</span><br><span class="line">        <span class="keyword">if</span>(x) l = mid;</span><br><span class="line">        <span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ans[id][<span class="number">1</span>] = r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">int</span> u = <span class="built_in">lr</span>();</span><br><span class="line">    <span class="keyword">if</span>(u) &#123;</span><br><span class="line">        <span class="built_in">queryRec</span>(<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, u, n);</span><br><span class="line">        <span class="built_in">queryRec</span>(<span class="number">1</span>, u + <span class="number">1</span>, <span class="number">1</span>, n, n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        u = <span class="built_in">ud</span>();</span><br><span class="line">        <span class="built_in">queryRec</span>(<span class="number">0</span>, <span class="number">1</span>, u + <span class="number">1</span>, n, n);</span><br><span class="line">        <span class="built_in">queryRec</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, n, u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;!&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">1</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">3</span>; ++j) <span class="built_in">printf</span>(<span class="string">&quot; %d&quot;</span>, ans[i][j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">fflush</span>(stdout);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="C-Sonya-and-Problem-Without-a-Legend"><a href="#C-Sonya-and-Problem-Without-a-Legend" class="headerlink" title="C. Sonya and Problem Without a Legend"></a>C. Sonya and Problem Without a Legend</h1><p>要严格单调增，不好求。尝试让每第 $i$ 个元素减掉 $i$, 即加上一个等差数列 $(1, 1)$，减出来的数列求一下其非严格单调递增的结果，再还原就能得到一个严格单调递增的数组。且容易知道减掉后答案是不会变的。</p><p>怎么求这个非严格单调递增数列呢？为了让答案尽可能小，第 $i$ 个元素要么不变（已经符合严格不下降的条件），要么就变成第 $i-1$ 个元素。</p><p>这是因为：如果变得比第 $i-1$ 个元素更大的话，不仅当前答案会增加，对之后的修改也有弊无利。故可以推出：最终的数组中所有元素的值都是原数组的某一个元素值。</p><p>再看 $n\leq 3000$, 考虑 $O(n^2)$ 的动态规划。设 $dp[i][j]$ 表示修改完成前 $i$ 个数，且第 $i$ 个数变成了原数组<strong>第 $j$ 大</strong>的数的答案。</p><p>那么</p><script type="math/tex; mode=display">dp[i][j]=min(dp[i-1][m]) + |a[i]-b[j]|,1 \leq m \leq j</script><p>其中 $b$ 是原数组排序后的数组。</p><p>这个式子是 $O(n^3)$ 的。但其实可以用滚动数组优化掉对 $m$ 的枚举, 伪代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">for i from 1 to n</span><br><span class="line">int res = INF</span><br><span class="line">for j from 1 to n</span><br><span class="line">res = min(res, dp[i - 1][j])</span><br><span class="line">dp[i][j] = res + abs(a[i] - b[j])</span><br></pre></td></tr></table></figure><p><strong>代码</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">3005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn], b[maxn];</span><br><span class="line"><span class="keyword">int</span> dp[maxn][maxn];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) cin &gt;&gt; a[i], a[i] -= i, b[i] = a[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) dp[i][j] = inf;</span><br><span class="line">    <span class="built_in">sort</span>(b + <span class="number">1</span>, b + <span class="number">1</span> + n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) dp[<span class="number">1</span>][i] = <span class="built_in">abs</span>(a[<span class="number">1</span>] - b[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> res = inf;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">            res = <span class="built_in">min</span>(dp[i - <span class="number">1</span>][j], res);</span><br><span class="line">            dp[i][j] = res + <span class="built_in">abs</span>(a[i] - b[j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans = inf;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        ans = <span class="built_in">min</span>(ans, dp[n][i]);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">补ABC题</summary>
    
    
    
    <category term="XCPC" scheme="https://eykenis.github.io/categories/XCPC/"/>
    
    
    <category term="Codeforces" scheme="https://eykenis.github.io/tags/Codeforces/"/>
    
  </entry>
  
</feed>
